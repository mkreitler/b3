function listenFor(a,b){var c=switchboard[a],d=!1;if(c||(c=[],switchboard[a]=c),c.indexOf(b)<0){for(i=0;i<c.length;++i)if(!c[i]){c[i]=b,d=!0;break}d||c.push(b)}}function unlistenFor(a,b){var c=switchboard[a];c&&c.indexOf(b)>=0&&(c[c.indexOf(b)]=null)}function broadcast(a,b){var c=switchboard[a],d=0,e=null;if(c)for(d=0;d<c.length;++d)e=c[d],e&&e[a]&&e[a](b)}function onPauseMainScreen(){game.sound.pauseAll(),game.paused=!0}function onResumeMainScreen(){game.paused=!1,game.sound.resumeAll()}function onPauseOther(){game.paused=!0}function onResumeOther(){game.paused=!1}function preload(){game.load.image("world_ff","./res/tilesets/oryx_16bit_fantasy_world_trans.png",!1),game.load.image("world_sf","./res/tilesets/oryx_16bit_scifi_world_trans.png",!1),game.load.tilemap("globe","./res/tilesets/world.json",null,Phaser.Tilemap.TILED_JSON),game.load.tilemap("base","./res/tilesets/base.json",null,Phaser.Tilemap.TILED_JSON),game.load.image("noSelectLarge","./res/ui/noSelectLarge.png",!1),game.load.image("eventMarker","./res/ui/eventMarker.png",!1),game.load.image("eventInfo","./res/ui/eventInfo.png",!1),game.load.image("infoShield","./res/ui/infoShield.png",!1),game.load.image("infoPanel","./res/ui/infoPanel.png",!1),game.load.image("saved","./res/ui/saved.png",!1),game.load.image("reseeded","./res/ui/reseeded.png",!1),game.load.image("adapted","./res/ui/adapted.png",!1),game.load.image("migrated","./res/ui/migrated.png",!1),game.load.image("displaced","./res/ui/displaced.png",!1),game.load.image("eventResults","./res/ui/results.png",!1),game.load.image("helperCenter","./res/ui/helperCenter.png",!1),game.load.image("helperRing","./res/ui/helperRing.png",!1),game.load.image("helperArrowOut","./res/ui/helperArrowOut.png",!1),game.load.image("helperArrowIn","./res/ui/helperArrowIn.png",!1),game.load.image("helperTop","./res/ui/helperTop.png",!1),game.load.image("helperRight","./res/ui/helperRight.png",!1),game.load.image("helperBottom","./res/ui/helperBottom.png",!1),game.load.image("helperLeft","./res/ui/helperLeft.png",!1),game.load.spritesheet("ui_buttons","./res/ui/buttons.png",315,79),game.load.spritesheet("ui_buttons_g","./res/ui/buttons_g.png",324,98),game.load.spritesheet("ui_specials","./res/ui/specials.png",24,24),game.load.spritesheet("items_ff","./res/tilesets/oryx_16bit_fantasy_items_trans.png",16,16),game.load.spritesheet("cursor","./res/ui/cursor.png",48,96),game.load.image("ui_frame_right","./res/ui/frameRight.png"),game.load.image("ui_frame_top","./res/ui/frameTop.png"),game.load.bitmapFont("smallbogboo","./res/fonts/bogboosmall.png","./res/fonts/bogboosmall.xml"),game.load.bitmapFont("bogboo","./res/fonts/bogboomid.png","./res/fonts/bogboomid.xml"),game.load.bitmapFont("bigbogboo","./res/fonts/bigbogboo.png","./res/fonts/bigbogboo.xml"),game.load.audio("uiButton",["./res/uiSoundsEGG/exported/button5.ogg","./res/uiSoundsEGG/exported/button5.mp3"]),game.load.audio("uiButtonHi",["./res/uiSoundsEGG/exported/button4.ogg","./res/uiSoundsEGG/exported/button4.mp3"]),game.load.audio("uiButtonLo",["./res/uiSoundsEGG/exported/displace2.ogg","./res/uiSoundsEGG/exported/displace2.mp3"]),game.load.audio("displace",["./res/uiSoundsEGG/exported/destroy1.ogg","./res/uiSoundsEGG/exported/destroy1.mp3"]),game.load.audio("destroy",["./res/uiSoundsEGG/exported/displace1.ogg","./res/uiSoundsEGG/exported/displace1.mp3"]),game.load.audio("event",["./res/uiSoundsEGG/exported/event1.ogg","./res/uiSoundsEGG/exported/event1.mp3"]),game.load.audio("eventReveal",["./res/uiSoundsEGG/exported/event3.ogg","./res/uiSoundsEGG/exported/event3.mp3"]),game.load.audio("info",["./res/uiSoundsEGG/exported/info1.ogg","./res/uiSoundsEGG/exported/info1.mp3"]),game.load.audio("infoReveal",["./res/uiSoundsEGG/exported/event2.ogg","./res/uiSoundsEGG/exported/event2.mp3"]),game.load.audio("dialogClose",["./res/uiSoundsEGG/exported/dialogClose.ogg","./res/uiSoundsEGG/exported/dialogClose.mp3"]),game.load.audio("score",["./res/uiSoundsEGG/exported/score1.ogg","./res/uiSoundsEGG/exported/score1.mp3"]),game.load.audio("phaseSwitch",["./res/uiSoundsEGG/exported/phaseSwitch.ogg","./res/uiSoundsEGG/exported/phaseSwitch.mp3"]),game.load.audio("reportOpen",["./res/uiSoundsEGG/exported/event5.ogg","./res/uiSoundsEGG/exported/event5.mp3"])}function create(){var a=null;gs.biomeMap=game.add.tilemap("globe"),gs.biomeMap.addTilesetImage("ff_world","world_ff",24,24),gs.biomeMap.addTilesetImage("sf_world","world_sf",24,24),gs.baseMap=game.add.tilemap("base"),gs.baseMap.addTilesetImage("sf_world","world_sf",24,24),gs.baseMap.addTilesetImage("ff_world","world_ff",24,24),gs.sounds.button=game.add.audio("uiButton"),gs.sounds.buttonHi=game.add.audio("uiButtonHi"),gs.sounds.buttonLo=game.add.audio("uiButtonLo"),gs.sounds.destroy=game.add.audio("destroy"),gs.sounds.displace=game.add.audio("displace"),gs.sounds.event=game.add.audio("event"),gs.sounds.eventReveal=game.add.audio("eventReveal"),gs.sounds.info=game.add.audio("info"),gs.sounds.infoReveal=game.add.audio("infoReveal"),gs.sounds.dialogClose=game.add.audio("dialogClose"),gs.sounds.score=game.add.audio("score"),gs.sounds.phaseSwitch=game.add.audio("phaseSwitch"),gs.sounds.reportOpen=game.add.audio("reportOpen"),gs.layers.crust=gs.biomeMap.createLayer("Crust"),gs.layers.terrain=gs.biomeMap.createLayer("Terrain"),gs.layers.shadows=gs.biomeMap.createLayer("Shadow"),gs.layers.producers=gs.biomeMap.createLayer("Producers"),gs.layers.animals=gs.biomeMap.createLayer("Animals"),gs.layers.links=gs.biomeMap.createLayer("Links"),gs.layers.grid=gs.biomeMap.createLayer("GridMarks"),gs.baseLayers.floor=gs.baseMap.createLayer("Floor"),gs.baseLayers.walls=gs.baseMap.createLayer("Walls"),gs.baseLayers.objects=gs.baseMap.createLayer("Objects"),gs.baseLayers.ui=gs.baseMap.createLayer("UI");for(a in gs.layers)gs.layers[a]&&(gs.layers[a].setScale(1.5,1.5),gs.layers[a].pivot.x+=gs.getOffsetX(),gs.layers[a].pivot.y+=gs.getOffsetY());gs.layers.shadows.pivot.y-=SHADOW_OFFSET-TILE_OFFSET_Y,gs.layers.shadows.pivot.x+=TILE_OFFSET_X,gs.layers.animals.pivot.y+=TILE_OFFSET_Y,gs.layers.animals.pivot.x+=TILE_OFFSET_X,gs.layers.producers.pivot.y+=TILE_OFFSET_Y,gs.layers.producers.pivot.x+=TILE_OFFSET_X,gs.layers.grid.pivot.x+=TILE_OFFSET_X,gs.layers.links.alpha=gs.LINK_ALPHA,gs.layers.grid.alpha=gs.SPECIAL_ALPHA;for(a in gs.baseLayers)gs.baseLayers[a]&&(gs.baseLayers[a].pivot.y+=gs.getBaseOffsetY(),gs.baseLayers[a].setScale(1.5,1.5));uim.init(),gs.assignCardIds(),startGame()}function startGame(){var a=!1;window.LOLSDK.init("com.markkreitler.eggs"),window.LOLSDK.addLifecycleListener(onPauseMainScreen,onResumeMainScreen),window.LOLSDK.addLifecycleListener(onPauseOther,onResumeOther),window.LOLSDK.allowSound(),addUiElements(),gs.stockStores(),gs.createEmitters(),gs.doRestoreGame()?(gs.init(),events.init(),a=gs.restoreGameState(),uim.hideTitleText(),a&&gs.playerHasLegalMove(!0)?setState(sm.startPhaseOne):sm.setTransitionState("startPhaseTwo","phaseTwo"),events.seedTutorialEvent("poleShift"),setTimeout(function(){setState(sm.chooseEvent)},1e3)):setState(sm.startGame),uim.raiseGroups()}function quitGame(){window.LOLSDK.completeGame()}function assert(a,b){}function pushState(a,b){suspendData.state=a,suspendData.data=b,bWantsStatePush=!0}function popState(){bWantsStatePop=!0}function doStatePush(){suspendData.state&&(currentState&&currentState.hasOwnProperty("onPushed")&&currentState.onPushed(),suspendedStates.unshift(currentState),suspendData.state.enter(suspendData.data),currentState=suspendData.state,sm.clearNextState(),bWantsStatePush=!1)}function doStatePop(){suspendedStates.length>0&&(currentState&&currentState.exit(),currentState=suspendedStates.shift(),currentState&&currentState.hasOwnProperty("onPopped")&&currentState.onPopped(),bWantsStatePop=!1)}function setState(a,b){assert(!nextState,"setState: multiple state transitions in a single frame!"),"string"==typeof a&&(a=sm.hasOwnProperty(a)?sm[a]:null),nextState=a,stateData=b,bWantsStateChange=!0}function changeState(){nextState&&nextState!==currentState?(currentState&&currentState.exit(),currentState=nextState,currentState.enter(stateData)):nextState||currentState&&(currentState.exit(),currentState=null),nextState=null,stateData=null,bWantsStateChange=!1}function update(){bWantsStatePush?doStatePush():bWantsStatePop?doStatePop():bWantsStateChange&&changeState(),currentState&&currentState.update()}function render(){currentState&&currentState.hasOwnProperty("render")&&currentState.render()}function addUiElements(){var a=0,b=0,c=0,d=null,e=null,f=0,g=gs.getNumTitles(),h=uim.getButtonGroup();for(b=0,a=-game.cache.getImage("ui_buttons").width/g+TILE_SIZE*gs.SPRITE_SCALE,f=0;f<uim.NUM_BANNERS;++f)c=b+uim.BANNER_MARGIN+f*game.cache.getImage("ui_buttons").height+f*uim.BANNER_SPACING,d=new uim.button(h,"ui_buttons","ui_buttons_g",a,c,onBannerPressedCallback.bind(this),gs.titleToAnimIndex,{buttonIndex:f}),e=new uim.banner(d,"",0,"","",gs.specialToAnimIndex,{bannerIndex:f});a=game.width-game.cache.getImage("ui_frame_top").width,uim.frameTop=uim.group.create(0,0,"ui_frame_top"),uim.frameTop.visible=!1,a=0,uim.frameRight=uim.group.create(a,b,"ui_frame_right"),uim.frameRight.visible=!1,game.input.onUp.add(onInputUp,this),uim.createInfoArea(),uim.createCursors(),uim.createHints(),uim.createEventReport(),uim.enableInput()}function onInputUp(a,b,c){!uim.onInputUp(a,b,c)}function generateStartingTerrain(){var a=0,c=null,d=null,e=-1,g=-1,h=-1,i=null,j=[],k=null,l=0;i=gs.getNextAvailableBiome();for(c in i.TYPES)j.push(c),j.push(c);for(tm.scrambleList(j),a=0;a<N_BIOMES;++a){for(d=i.TYPES[j[a]],e=i.sizeByLatitude[a],g=Math.min((i.offsets[a]+1)%2+i.MAX_GROWTH-1,i.MAX_SIZE-e),h=i.MAX_SIZE-e-i.offsets[a]%2,h<g&&(h=g),i.setType(d),i.setLatitude(a),i.setStartCol(Math.round(Math.random()*(h-g))+g),l=0;l<e;++l)i.addNiche(i);k=uim.addBlocker(0,0,"noSelectLarge"),i.build(gs.layers.terrain,"ff_world",i.getType(),k),gs.biomes.push(i),a<N_BIOMES-1&&(i=gs.getNextAvailableBiome())}}function onBannerPressedCallback(a){currentState&&currentState.onBannerPressedCallback&&currentState.onBannerPressedCallback(a)}function onWorldPressCallback(){currentState&&currentState.onWorldPressCallback&&currentState.onWorldPressCallback()}strings={construct:function(a,b){var c=a.split("~"),d=0,e=null;for(d=0;d<b.length;++d)0===d?e=c[d]+b[d]:e+=c[d]+b[d];return c.length>b.length&&(e+=c[c.length-1]),e},INFO:{SELECT_ORGANISM:"Select an E.G.G. on the left, then click\non the map to add it to the world.",ILLEGAL_PLACEMENT:"You can't place that organism in this\nbiome.",NICHE_FULL_PRODUCER:"This habitat already contains a producer\nor decomposer.",OUT_OF_PLAYS:"Out of Plays!",RESHUFFLE_AND_TRY_AGAIN:"Reshuffle and try again.",GAME_OVER:"Game Over",NO_MORE_PLAYS:"None of your remaining E.G.G.s can hatch\non this world.",NO_MORE_MOVES:"No More Moves!",INSECT_MISPLACED:"Place insects to the left of a plant\nto activate their special ability.",HABITAT_FULL:"This population's niche is\nalready occupied.",INVALID_PLACEMENT_HERBIVORE:"Herbivores must be placed beneath\na Producer.",INVALID_PLACEMENT_CARNIVORE:"Carnivores must be placed beneath\nherbivores, insects, or nematodes.",INVALID_PLACEMENT_SCAVENGER:"Scavengers must be placed beneath\ncarnivores.",HUMANS_ARRIVE:"Humans Arrive!",SEE_THEIR_IMPACT:"They build their colony into\nthe biosphere you have created.",FINAL_SCORE:"Final Score",SCORE:"Score (populations x~): ~\nBiodiversity Rating: ~",PROJECT:"Project",EGG:"E.G.G."},HINTS:{CHOOSE_EGG:"          Choose an E.G.G.        ",CHOOSE_DISPLACED_ORGANISM:"Pick a displaced population",PLACE_ORGANISM:"Place it in the biosphere"},TUTORIAL:{WELCOME_TERRAFORMER_AND_TAPOUT:"Welcome\nterraformer!\n\n(tap messages\nto clear\nthem.)",THIS_IS_YOUR_BIOSPHERE:"This is your\nbiosphere.\n\nYour mission:",MISSION_OBJECTIVE:"Populate it\nbefore the\nfirst colonists\narrive!",INTRODUCING_THE_EGG:"This is an\nE.G.G.\n(Engineered\nGenome\nGerminator).",EGG_PURPOSE:"Using E.G.G.s,   \nyou can build\ncreatures\n from custom\n DNA. Deploy\nE.G.G.s to\npopulate\nyour world.             ",INTRODUCING_THE_DATA_CARD:"This is a\ndatacard. It\ntells you what\nthis E.G.G.'s\norganisms\nwill be.",CLICK_DATA_CARD:"Tap the\ncard. When it\nhighlights, look\nfor extra data\nin the window\nbelow.",THIS_IS_A_HABITAT:"This is a habitat.\n\nDrop E.G.G.s here\nto start\npopulating.",POPULATE_EGG_01:"Try it\nnow. With the\ndata card\nhighlighted, tap\nthe selected\nhabitat.",YOU_MADE_A_PLANT:"Great!\nYou made a\n plant! This\nstarts a new\necosystem.",BUILDING_ECOSYSTEMS_01:"An Ecosystem is\na group of\ninterrelated\nplants and animals\nin a habitat.",BUILDING_ECOSYSTEMS_02:"Build\necosystems\nniche by niche.\nProducers (P),\nfirst, then...",BUILDING_ECOSYSTEMS_03:"...Herbivores (H),\nCarnivores (C),\nand, finally,\nScavengers (S).\n",BUILDING_ECOSYSTEMS_04:"When you see letters\nby a habitat, you\nwill know what\nniche to build\nnext.\n",TRY_IT_NOW:"Try it now.\nTap on a\ndatacard to\nselect its\nE.G.G...",POPULATE_HERBIVORE:"...then tap on\nthis habitat to\ncreate a new\npopulation.",POPULATION_DEFINITION_01:"Each\nicon in an\nEcosystem is a\nPopulation.",POPULATION_DEFINITION_02:"A\nPopulation is\nmany organisms\nof the same\nspecies.",POPULATE_CARNIVORE_01:"Now,\npopulate a\nCarnivore.\nNote the extra\nsymbol on its\ndatacard.",POPULATE_CARNIVORE_02:"Cards\nwith icons\nlike these have\nspecial abilities.\nTap the\ndatacard...",POPULATE_CARNIVORE_03:"...then\nlook in the\ndata window to\nsee what the\ncreature can\ndo.",POPULATE_CARNIVORE_04:"Tap on\nthe habitat to\npopulate the\nCarnivore.",POPULATE_OMNIVORE_01:"Now,\nplace the\nfinal population\ninto your\nEcosystem.",POPULATE_OMNIVORE_02:"Tap\nthe datacard.\nNotice that the\nOmnivore is\na wild\ncard!",POPULATE_OMNIVORE_03:"Tap\nthe habitat to\npopulate the\nOmnivore.",PROCESS_EVENT_01:"As you\nbuild the\nbiosphere,\nEvents will\ntake place.",PROCESS_EVENT_02:"Events\nchange the\nbiosphere, often\ndestroying\npopulations.",PROCESS_EVENT_03:"When\nevents destroy\npopulations\nin an\necosystem...",PROCESS_EVENT_04:"...the\nremaining\npopulations are\ndisplaced. For\nexample...",PROCESS_EVENT_05:"...when\nHerbivores and\nCarnivores die,\nScavengers...",PROCESS_EVENT_06:"...must\n move to a\nnew habitat in\norder to\nsurvive.",PROCESS_EVENT_07:"When\nthis happens,\nthe displaced\npopulations...",PROCESS_EVENT_08:"...return\nto your base\nso you can\nmove them to\nanother\nhabitat.",PROCESS_EVENT_09:"Tap\nthe datacard\nof the displaced\npopulation...",PROCESS_EVENT_10:"...then\ntap the habitat\ninto which you\nwant to place\nit.",PROCESS_EVENT_11:"Note\nthat some\npopulations can\nreturn to their\noriginal\nhabitat.",PROCESS_EVENT_12:"When\nyou finish\nrelocating\npopulations,\nthe event\nwill end.",END_01:"This\nconcludes the\nin-game\ntutorial."},EVENTS:{FAMINE:{title:"Famine",info:"Destroy all large birds and mammals.",question:"What happens during a famine\nif all populations consist\nof large organisms?"},POLE_SHIFT:{title:"Pole Shift",info:"Destroy all large amphibians and reptiles.",question:"What happens during a pole\nshift if all populations\nconsist of large organisms?"},BLIGHT:{title:"Blight",info:"Destroy all large vegetation in 3\nneighboring biomes.",question:"What happens to biomes that\nhave only large plants\nwhen blight appears?"},INSECT_PLAGUE:{title:"Insect Plague",info:"Destroy all small vegetation in 3\nneighboring biomes.",question:"What happens to biomes that\nhave only small plants\nduring an insect plague?"},DISEASE:{title:"Disease",info:"Destroy all animals of one\nfamily in one biome.",question:"If all populations in a\nbiome belong to one family,\nis disease more dangerous?"},DROUGHT:{title:"Drought",info:"Destroy all herbivores in one biome.",question:"What kinds of ecosystems\ncan exist without herbivores?\nDid this biome have any?"},FAST_ACTING_TOXINS:{title:"Fast Acting Toxins",info:"Destroy all small amphibians and reptiles.",question:"Which populations can resist\nfast-acting toxins? Did you\nhave any in this biome?"},CUMULATIVE_TOXINS:{title:"Cumulative Toxins",info:"Destroy all small birds and mammals.",question:"Which populations can resist\ncumulative toxins? Did you\nhave any in this biome?"},GLOBAL_WARMING:{title:"Global Warming",info:"One wetland becomes a desert,\ndestroying large plants,\ninsects, and amphibians.",question:"How might biodiversity help\na biome recover from\nglobal warming, if at all?"},SUPER_PARASITE:{title:"Super Parasite",info:"Destroy all carnivores\nin one biome.",question:"What populations can occupy\na Carnivore niche and resist\nparasites?"},GLOBAL_COOLING:{title:"Global Cooling",info:"One desert becomes a wetland,\ndestroying small plants,\nnematodes, and reptiles.",question:"How does biodiversity help\na biome recover from\nglobal cooling, if at all?"},HUMAN_SETTLEMENT:{title:"Human Settlement",info:"Humans build a colony,\ndestroying mid-sized plants.",question:"Can biodiversity help ecosystems\nresist damage from human\nsettlement. If so, how?"},BIOSPHERE_SAFE:"Biosphere safe!",BIOME_DAMAGED:"Biome damaged!",BIOMES_DAMAGED:"Biomes damaged!",BIOME_DAMAGE_REPORT_NONE:"Fortunately, this event didn't\naffect any biomes. All\npopulations survived!",BIOME_DAMAGE_REPORT_SINGULAR:"~ of your biomes lost a total of\n1 population. This may displace\nother populations.",BIOME_DAMAGE_REPORT_PLURAL:"~ of your biomes lost a total of\n~ populations. This may displace\nother populations.",RESOLVED:"Resolved!",COLONY_COMPLETE:"Colony Complete!",RESOLUTION_MESSAGE:"You have survived this event! Now you\ncan return to building the biosphere.",RESOLUTION_MESSAGE_END:"The humans have completed their\ncolony! You can now review your work.",WILL_DISCARD_REMAINING_ORGANISMS:"None of the remaining displaced\npopulations can find a niche. Only\nmigratory populations will survive.",PLACED_ALL_ORGANISMS:"All of the populations have found\nnew niches. They will survive.",WELL_DONE:"Well done!",PROMPT:"(Tap here to continue...)",LOST:"LOST:"},DESCRIPTIONS:{PRODUCER:"Producers are the root of all\necosystems.",LARGE_PLANT:"Large plants cannot grow in deserts or\nplains.",ANGIOSPERM:"An Angiosperm can regrow from seeds\nconsumed by the animal below it.",POLLINATOR:"A Pollinator strengthens the plant to its\nright by increasing its genetic diversity.",DECOMPOSER:"Decomposers increase a biome's arable\nland.",ADAPTOR:"Adaptors can fill any niche (herbivore,\ncarnivore, or scavenger) when displaced.",MIGRATOR:"Migratory animals move to new biomes\ninstead of being destroyed.",SYMBIOTE:"A Symbiote protects, and is protected by,\nthe animal to it left."},WARNINGS:{},UI:{START_GAME:"Start Game",TUTORIAL:"Play Tutorial",TOGGLE_SOUND:"Toggle Sound",CHOOSE_ONE:"Choose One",RESTART_GAME:"Restart Game",QUIT:"Quit"}},gs={LINK_ALPHA:.67,SPECIAL_ALPHA:.5,WILD_CARD_VALUE:4,SPRITE_SCALE:1.5,UNIT_SCORE_SCALAR:5,UNIT_BIODIVERSITY_SCALAR:5,FIRE_PARTICLE_SPEED:250,MAX_PARTICLE_FACTOR:3,PARTICLES_PER_EMISSION:6,MAP_OFFSET_X:464,MAP_OFFSET_Y:58,FIRE_PARTICLE_SCALE_MIN:.75,FIRE_PARTICLE_SCALE_MAX:1.25,FIRE_PARTICLE_ALPHA_MIN:.33,FIRE_PARTICLE_ALPHA_MAX:.67,SAVED_PARTICLE_SPEED:50,TEXT_PARTICLE_SCALE:.5,linkTile:{down:81,right:81,left:81,up:81},iter:0,bLogging:!0,cardLog:[],debugLog:[{biomes:"{~Mountains~0~3~2~}{~Plains~1~2~3~}{~Wetlands~2~2~4~}{~Desert~3~2~3~}{~Forest~4~3~2~}",cards:[]},{biomes:"{~Mountains~0~3~2~}{~Desert~1~1~3~}{~Wetlands~2~2~4~}{~Forest~3~1~3~}{~Forest~4~2~2~}",cards:["3~1~2","6~1~1","15~1~0","12~0~1","2~0~0","4~2~3","0~2~2","13~3~2","8~4~1","9~2~1","5~3~1","14~4~0","10~2~0","16~3~0","69~0~1"]},{biomes:"{~Mountains~0~3~2~}{~Desert~1~1~3~}{~Wetlands~2~2~4~}{~Forest~3~1~3~}{~Forest~4~2~2~}",cards:["3~1~2","6~1~1","15~1~0","12~0~1","2~0~0","4~2~3","0~2~2","13~3~2","8~4~1","9~2~1","5~3~1","14~4~0","10~2~0","16~3~0","69~0~1","38~0~1","21~1~2","27~1~1","71~2~2","65~0~1","30~4~0","28~3~2","32~3~1","29~4~1","49~0~0","39~1~0","56~1~0","37~4~1","51~4~1","22~2~3","50~1~1","47~1~2","24~2~1","66~0~0","59~1~2","48~2~3","17~2~0","46~2~0","25~3~0","64~1~1","34~2~2","54~2~3","67~2~2","35~4~0","45~2~1","41~3~2","55~2~1","43~3~0","53~4~0","70~3~1","57~3~2","68~3~1"]},{biomes:"{~Mountains~0~3~2~}{~Desert~1~1~3~}{~Wetlands~2~2~4~}{~Forest~3~1~3~}{~Forest~4~2~2~}",cards:["3~1~2","6~1~1","15~1~0","12~0~1","2~0~0","4~2~3","0~2~2","13~3~2","8~4~1","9~2~1","5~3~1","14~4~0","10~2~0","16~3~0","69~0~1","38~0~1","21~1~2","27~1~1","71~2~2","65~0~1","30~4~0","28~3~2","32~3~1","29~4~1","49~0~0","39~1~0","56~1~0","37~4~1","51~4~1","22~2~3","50~1~1","47~1~2","24~2~1","66~0~0","59~1~2","48~2~3","17~2~0","46~2~0","25~3~0","64~1~1","34~2~2","54~2~3"]}],iRestore:-1,logData:"",lastPopulationCount:0,worldPressInfo:{biome:null,niche:null,tile:null},biomeMap:null,baseMap:null,biomes:[],biomeStore:[null,null,null,null,null],availableBiomes:[],nPopulationsPerFamily:0,nicheStore:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],beforePopulationCount:{aves:0,reptilia:0,amphibia:0,mammalia:0},afterPopulationCount:{aves:0,reptilia:0,amphibia:0,mammalia:0},availableNiches:[],layers:{ocean:null,crust:null,oceanDetail:null,terrain:null,ice:null,shadows:null,producers:null,animals:null,links:null,grid:null},baseLayers:{floor:null,walls:null,objects:null,ui:null},drawDeck:[],primaryDrawDeck:[],discardDeck:[],displacementDeck:[],workPoint:new Phaser.Point,titleToAnimIndex:{amphibia:3,aves:5,insecta:6,mammalia:2,nematoda:3,plantae:1,reptilia:0},specialToAnimIndex:{pollinator:0,angiosperm:1,symbiote:2,adaptor:3,decomposer:4,migrator:5},biomeScores:[],bPhaseOne:!1,emitterFire:null,emitterSaved:null,emitterDisplaced:null,emitterReseeded:null,emitterAdapted:null,emitterMigrated:null,sounds:{button:null,buttonHi:null,buttonLo:null,destroy:null,displace:null,event:null,eventReveal:null,info:null,infoRevealed:null,dialogClose:null,score:null,phaseSwitch:null,reportOpen:null},discardFn:[this.canDiscardPlantae,this.canDiscardAnimal],cardInfo:{plantae:{producer:[strings.DESCRIPTIONS.PRODUCER],large:[strings.DESCRIPTIONS.LARGE_PLANT],small:[strings.DESCRIPTIONS.SMALL_PLANT],angiosperm:[strings.DESCRIPTIONS.ANGIOSPERM]},animalia:{pollinator:[strings.DESCRIPTIONS.POLLINATOR],decomposer:[strings.DESCRIPTIONS.DECOMPOSER],adaptor:[strings.DESCRIPTIONS.ADAPTOR],migrator:[strings.DESCRIPTIONS.MIGRATOR],symbiote:[strings.DESCRIPTIONS.SYMBIOTE]},class:{herbivore:strings.WARNINGS.HERBIVORE,carnivore:strings.WARNINGS.CARNIVORE,scavenger:strings.WARNINGS.SCAVENGER,omnivore:strings.WARNINGS.OMNIVORE}},cardValueToSuit:{0:"P",1:"H",2:"C",3:"S",4:"W"},phaseOneCards:[{id:0,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Producer, Angiosperm",special:"angiosperm"},{id:1,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Nematoda",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Decomposer",special:"decomposer"},{id:2,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Insecta",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Producer, Pollinator",special:"pollinator"},{id:3,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Producer, Angiosperm",special:"angiosperm"},{id:4,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Producer",special:""},{id:5,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Producer",special:""},{id:6,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Producer",special:""},{id:7,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Nematoda",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Decomposer",special:"decomposer"},{id:8,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Producer, Angiosperm",special:"angiosperm"},{id:9,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Producer, Angiosperm",special:"angiosperm"},{id:10,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Producer",special:""},{id:11,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Producer",special:""},{id:12,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Producer",special:""},{id:13,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Producer, Angiosperm",special:"angiosperm"},{id:14,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Producer",special:""},{id:15,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Insecta",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Producer, Pollinator",special:"pollinator"},{id:16,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Plantae",niche:null,value:0,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Producer",special:""}],phaseTwoCards:[{id:17,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Herbivore",special:""},{id:18,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Herbivore",special:""},{id:19,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Herbivore",special:""},{id:20,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Herbivore",special:""},{id:21,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Herbivore, Migrator",special:"migrator"},{id:22,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Herbivore, Symbiote",special:"symbiote"},{id:23,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Herbivore",special:""},{id:24,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Herbivore, Migrator",special:"migrator"},{id:25,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Herbivore",special:""},{id:26,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Herbivore",special:""},{id:27,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Herbivore",special:""},{id:28,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Herbivore, Symbiote",special:"symbiote"},{id:29,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Herbivore, Migrator",special:"migrator"},{id:30,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Herbivore",special:""},{id:31,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Herbivore",special:""},{id:32,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Herbivore",special:""},{id:33,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:1,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Herbivore, Symbiote",special:"symbiote"},{id:34,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Carnivore, Symbiote",special:"symbiote"},{id:35,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Carnivore",special:""},{id:36,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Carnivore",special:""},{id:37,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Carnivore",special:""},{id:38,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Carnivore, Migrator",special:"migrator"},{id:39,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Carnivore",special:""},{id:40,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Carnivore",special:""},{id:41,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Carnivore, Symbiote",special:"symbiote"},{id:42,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Carnivore",special:""},{id:43,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Carnivore",special:""},{id:44,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:2,linkedCards:{
above:null,right:null,below:null,left:null},keywords:"Carnivore",special:""},{id:45,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Carnivore",special:""},{id:46,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Carnivore, Migrator",special:"migrator"},{id:47,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Carnivore, Symbiote",special:"symbiote"},{id:48,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Carnivore",special:""},{id:49,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Carnivore, Migrator",special:"migrator"},{id:50,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Carnivore",special:""},{id:51,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:2,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Carnivore",special:""},{id:52,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Scavenger, Symbiote",special:"symbiote"},{id:53,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Scavenger, Migrator",special:"migrator"},{id:54,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Scavenger",special:""},{id:55,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Scavenger",special:""},{id:56,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Scavenger",special:""},{id:57,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Scavenger",special:""},{id:58,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Scavenger",special:""},{id:59,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Scavenger, Symbiote",special:"symbiote"},{id:60,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Scavenger",special:""},{id:61,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Scavenger",special:""},{id:62,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Scavenger, Symbiote",special:"symbiote"},{id:63,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Scavenger, Migrator",special:"migrator"},{id:64,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Scavenger",special:""},{id:65,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Scavenger",special:""},{id:66,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Scavenger",special:""},{id:67,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Large, Scavenger",special:""},{id:68,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:3,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Small, Scavenger, Migrator",special:"migrator"},{id:69,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Amphibia",niche:null,value:4,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Omnivore, Adaptor",special:"adaptor"},{id:70,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Reptilia",niche:null,value:4,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Omnivore, Adaptor",special:"adaptor"},{id:71,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Aves",niche:null,value:4,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Omnivore, Adaptor",special:"adaptor"},{id:72,coCard:null,tileId:-1,shadowId:-1,bRemovePending:!1,bWantsRemoved:!1,title:"Mammalia",niche:null,value:4,linkedCards:{above:null,right:null,below:null,left:null},keywords:"Omnivore, Adaptor",special:"adaptor"}],cardSpecialFunctionTable:{onPlayed:{decomposer:"addNiche"},onDestroyed:{angiosperm:"transferSeeds",migrator:"migrate"},onDisplaced:{adaptor:"adapt"}},indexInfo:{tile:-1,shadow:-1},producerIndexTable:{desert:{plantae:{large:{tile:0,shadow:0},normal:{tile:[218,219,220],shadow:2114},small:{tile:[108,109,110],shadow:0}},insecta:{large:{tile:0,shadow:0},normal:{tile:-69,shadow:2111},small:{tile:0,shadow:0}},nematoda:{large:{tile:0,shadow:0},normal:{tile:-177,shadow:2112},small:{tile:0,shadow:0}}},plains:{plantae:{large:{tile:0,shadow:0},normal:{tile:[102,107,163],shadow:0},small:{tile:[157,158,159],shadow:0}},insecta:{large:{tile:0,shadow:0},normal:{tile:-69,shadow:2111},small:{tile:0,shadow:0}},nematoda:{large:{tile:0,shadow:0},normal:{tile:-177,shadow:2112},small:{tile:0,shadow:0}}},forest:{plantae:{large:{tile:{arctic:275,normal:[274,269,270]},shadow:2115},normal:{tile:102,shadow:2115},small:{tile:164,shadow:2113}},insecta:{large:{tile:0,shadow:0},normal:{tile:-69,shadow:2111},small:{tile:0,shadow:0}},nematoda:{large:{tile:0,shadow:0},normal:{tile:-177,shadow:2112},small:{tile:0,shadow:0}}},wetlands:{plantae:{large:{tile:[269,270,271,272],shadow:2115},normal:{tile:[102,107],shadow:2115},small:{tile:[111,112],shadow:0}},insecta:{large:{tile:0,shadow:0},normal:{tile:-69,shadow:2111},small:{tile:0,shadow:0}},nematoda:{large:{tile:0,shadow:0},normal:{tile:-177,shadow:2112},small:{tile:0,shadow:0}}},mountains:{plantae:{large:{tile:{arctic:275,normal:274},shadow:2115},normal:{tile:163,shadow:2115},small:{tile:[103,104,105],shadow:0}},insecta:{large:{tile:0,shadow:0},normal:{tile:-69,shadow:2111},small:{tile:0,shadow:0}},nematoda:{large:{tile:0,shadow:0},normal:{tile:-177,shadow:2112},small:{tile:0,shadow:0}}}},consumerIndexTable:{amphibia:{herbivore:{large:{tile:241,shadow:2110},normal:{tile:240,shadow:2111},small:{tile:185,shadow:2110}},carnivore:{large:{tile:241,shadow:2110},normal:{tile:240,shadow:2111},small:{tile:185,shadow:2110}},scavenger:{large:{tile:241,shadow:2110},normal:{tile:240,shadow:2111},small:{tile:185,shadow:2110}},omnivore:{large:{tile:243,shadow:2110},normal:{tile:242,shadow:2111},small:{tile:186,shadow:2110}}},aves:{herbivore:{large:{tile:73,shadow:2110},normal:{tile:74,shadow:2110},small:{tile:75,shadow:2110}},carnivore:{large:{tile:73,shadow:2110},normal:{tile:74,shadow:2110},small:{tile:75,shadow:2110}},scavenger:{large:{tile:73,shadow:2110},normal:{tile:74,shadow:2110},small:{tile:75,shadow:2110}},omnivore:{large:{tile:77,shadow:2110},normal:{tile:78,shadow:2111},small:{tile:79,shadow:2110}}},mammalia:{herbivore:{large:{tile:179,shadow:2111},normal:{tile:128,shadow:2111},small:{tile:121,shadow:2110}},carnivore:{large:{tile:179,shadow:2111},normal:{tile:128,shadow:2111},small:{tile:121,shadow:2110}},scavenger:{large:{tile:179,shadow:2111},normal:{tile:128,shadow:2111},small:{tile:121,shadow:2110}},omnivore:{large:{tile:132,shadow:2110},normal:{tile:184,shadow:2111},small:{tile:76,shadow:2110}}},reptilia:{herbivore:{large:{tile:173,shadow:2111},normal:{tile:67,shadow:2111},small:{tile:61,shadow:2110}},carnivore:{large:{tile:173,shadow:2111},normal:{tile:67,shadow:2111},small:{tile:61,shadow:2110}},scavenger:{large:{tile:173,shadow:2111},normal:{tile:67,shadow:2111},small:{tile:61,shadow:2110}},omnivore:{large:{tile:170,shadow:2111},normal:{tile:133,shadow:2111},small:{tile:77,shadow:2110}}}}},gs.stockStores=function(){var a=0;for(a=0;a<this.biomeStore.length;++a)this.biomeStore[a]=new bd.biome;for(a=0;a<this.nicheStore.length;++a)this.nicheStore[a]=new bd.niche(0,0)},gs.isNicheIdentifier=function(a){return a&&gs.cardInfo.class.hasOwnProperty(a.toLowerCase())},gs.startGame=function(a){uim.clearFocusBanner(),gs.init(),events.init(),generateStartingTerrain(),setState(sm.startPhaseOne)},gs.getBeforePopulations=function(){return gs.beforePopulationCount},gs.getAfterPopulations=function(){return gs.afterPopulationCount},gs.recordBeforePopulations=function(){gs.recordPopulations(gs.beforePopulationCount)},gs.recordAfterPopulations=function(){gs.recordPopulations(gs.afterPopulationCount)},gs.recordPopulations=function(a){var b=null,c=0;for(b in a)a[b]=0;for(c=0;c<this.biomes.length;++c)this.biomes[c].recordPopulations(a)},gs.instructions=function(a){uim.clearFocusBanner(),gs.init(),events.init(),uim.hideTitleText(),this.restoreGameState(0),setState(sm.startTutorial)},gs.getNextAvailableBiome=function(){var a=gs.availableBiomes.shift();return assert(a,"getNextAvailableBiome: out of biomes!"),a.init(),a},gs.getNextAvailableNiche=function(){var a=gs.availableNiches.shift();return assert(a,"getNextAvailableNiche: out of niches!"),a.init(),a},gs.computeScore=function(){var a=0,b=0;for(a=0;a<this.biomes.length;++a)b+=this.biomes[a].computeScore();return b},gs.computeEcosystemBiodiversity=function(){var a=0,b=0;for(a=0;a<this.biomes.length;++a)b+=this.biomes[a].computeEcosystemBiodiversity();return b},gs.computeNicheBiodiversity=function(){var a=0,b=0,c=0;for(a=0;a<this.biomes.length;++a)for(b=0;b<gs.WILD_CARD_VALUE;++b)c+=this.biomes[a].computeNicheBiodiversity(b);return c},gs.computeWorldBiodiversity=function(){var a=0,b=[],c={mammalia:[],reptilia:[],amphibia:[],aves:[]},d=null,e=0,f=[],g=null;for(a=0;a<this.biomes.length;++a)this.biomes[a]&&this.biomes[a].getCards(b);for(a=0;a<b.length;++a)d=gs.getCardTitle(b[a]),d&&(d=d.toLowerCase(),c.hasOwnProperty(d)&&c[d].push(b[a]));for(g in c)f.push(c[g].length);for(tm.sortListHighToLow(f),a=f.length-1;a>=0;--a)e+=Math.round(f[a]/(f.length-a));return e*this.UNIT_BIODIVERSITY_SCALAR},gs.playSound=function(a){assert(a,"playSound: invalid sound!"),a.isPlaying&&a.stop(),a.play()},gs.eraseTileAt=function(a,b){var c=null;return assert(a,"drawTileAt: invalid tile reference!"),assert(a.iBiome>=0&&a.iBiome<this.biomes.length,"drawTileAt: invalid biome index!"),c=this.biomes[a.iBiome].getCardAt(a,b),c&&this.eraseCard(c),a.iNiche<0&&(a.iBiome+=1,a.iBiome>=this.biomes.length?a.iBiome=-1:(a.iNiche=0,a.iCard=0)),c},gs.seedTutorialDeck=function(a){switch(this.drawDeck.length=0,a){case 0:this.drawDeck.push(this.phaseOneCards[5]),this.drawDeck.push(this.phaseOneCards[5]),this.drawDeck.push(this.phaseOneCards[5]),this.drawDeck.push(this.phaseOneCards[5]),this.drawDeck.push(this.phaseOneCards[5]),this.drawDeck.push(this.phaseOneCards[5]);break;case 1:this.drawDeck.push(this.phaseTwoCards[6]),this.drawDeck.push(this.phaseTwoCards[6]),this.drawDeck.push(this.phaseTwoCards[6]),this.drawDeck.push(this.phaseTwoCards[6]),this.drawDeck.push(this.phaseTwoCards[6]),this.drawDeck.push(this.phaseTwoCards[6]);break;case 2:this.drawDeck.push(this.phaseTwoCards[21]),this.drawDeck.push(this.phaseTwoCards[21]),this.drawDeck.push(this.phaseTwoCards[21]),this.drawDeck.push(this.phaseTwoCards[21]),this.drawDeck.push(this.phaseTwoCards[21]),this.drawDeck.push(this.phaseTwoCards[21]);break;case 3:this.drawDeck.push(this.phaseTwoCards[52]),this.drawDeck.push(this.phaseTwoCards[52]),this.drawDeck.push(this.phaseTwoCards[52]),this.drawDeck.push(this.phaseTwoCards[52]),this.drawDeck.push(this.phaseTwoCards[52]),this.drawDeck.push(this.phaseTwoCards[52])}},gs.toggleSound=function(a){uim.clearFocusBanner(),game.sound.volume=1-game.sound.volume},gs.getBiomeId=function(a){var b=0,c=-1;for(b=0;b<this.biomes.length;++b)if(a===this.biomes[b]){c=b;break}return c},gs.getBaseOffsetY=function(){return-30},gs.getOffsetX=function(){return 5*-TILE_SIZE-TILE_SIZE/2},gs.getOffsetY=function(){return 1.75*TILE_SIZE},gs.getNumBiomes=function(){return this.biomes.length},gs.getBiomeOffset=function(a){return a>=0&&a<bd.biome.prototype.offsets.length?bd.biome.prototype.offsets[a]:-1},gs.isPhaseOne=function(){return gs.bPhaseOne},gs.setPhaseOne=function(a){gs.bPhaseOne=a},gs.getMaxBiomeOffset=function(){var a=0,b=-1;for(a=0;a<bd.biome.prototype.offsets.length;++a)b<bd.biome.prototype.offsets[a]&&(b=bd.biome.prototype.offsets[a]);return b},gs.isLogging=function(){return this.bLogging},gs.saveGameState=function(){var a=0,b={biomes:null,cards:null};if(gs.isLogging()){for(a=0;a<this.biomes.length;++a)b.biomes?b.biomes+="{~"+this.biomes[a].type.name+"~"+this.biomes[a].latitude+"~"+(this.biomes[a].startCol+this.biomes[a].getNumPrepended())+"~"+(this.biomes[a].getNumNiches()-this.biomes[a].getNumPrepended())+"~}":b.biomes="{~"+this.biomes[a].type.name+"~"+this.biomes[a].latitude+"~"+(this.biomes[a].startCol+this.biomes[a].getNumPrepended())+"~"+(this.biomes[a].getNumNiches()-this.biomes[a].getNumPrepended())+"~}";b.cards=this.cardLog,console.log(JSON.stringify(b))}},gs.doRestoreGame=function(){return this.iRestore!==-1},gs.restoreGameState=function(a){var b=null,c=!1,d=this.iRestore;return"undefined"!=typeof a&&(this.iRestore=a),this.iRestore>=0&&this.iRestore<this.debugLog.length?(b=gs.debugLog[this.iRestore],gs.rebuildBiomes(b.biomes),c=gs.populateBiomes(b.cards)):assert(!1,"restoreGameState: invalid restore ID!"),this.iRestore=d,c},gs.getEggIndexFromType=function(a){var b=-1;return assert(a,"getEggIndexFromType: invalid type!"),a=a.toLowerCase(),gs.titleToAnimIndex.hasOwnProperty(a)&&(b=gs.titleToAnimIndex[a]),b},gs.getBiomesOfType=function(a,b){var c=0;for(a=a.toLowerCase(),c=0;c<this.biomes.length;++c)this.biomes[c].getType().name.toLowerCase()===a&&b.push(this.biomes[c])},gs.rebuildBiomes=function(a){var b=a.split("{"),c=null,d=0,e=0,f="",i=0,j=null,m=-1;for(e=1;e<b.length;++e){for(j=gs.getNextAvailableBiome(),c=b[e].split("~"),f=c[1],j.setType(j.TYPES[f.toUpperCase()]),j.setLatitude(parseInt(c[2])),m=j.offsets[e-1],j.setStartCol(parseInt(c[3])),i=parseInt(c[4]),d=0;d<i;++d)j.addNiche(j);blocker=uim.addBlocker(0,0,"noSelectLarge"),j.build(gs.layers.terrain,"ff_world",j.getType(),blocker),gs.biomes.push(j)}},gs.populateBiomes=function(a){var b=0,c=null,d=null,e=-1,f=-1,g=-1,h=null,i=null,j=!0,k=null,l=[];for(a.length>=this.getNumNiches()&&(j=!1,gs.removeInsectsAndNematodes(),gs.addPhaseTwoCards()),b=0;b<a.length;++b)b<this.phaseOneCards.length&&!gs.isPhaseOne()?gs.setPhaseOne(!0):b>=this.phaseOneCards.length&&gs.isPhaseOne()&&gs.setPhaseOne(!1),d=a[b].split("~"),assert(3===d.length,"populateBiomes: invalid cardInfo!"),e=parseInt(d[0]),f=parseInt(d[1]),g=parseInt(d[2]),assert(f>=0&&f<this.biomes.length,"populateBiomes: invalid biome ID!"),h=this.biomes[f],assert(g>=0&&g<h.getNumNiches()),i=h.getNicheAt(g),c=this.getCardWithId(e),l.push(c),tm.listNullAndMoveToBack(this.drawDeck,c,!0),k=this.populateNiche(c,i,!0);return assert(tm.listsExclusive(this.drawDeck,l),"populateBiomes: drawDeck and world share cards!"),j},gs.getNiche=function(a,b){return assert(a>=0&&a<this.biomes.length,"getNiche: invalid biome index!"),this.biomes[a].getNicheAt(b)},gs.addLogData=function(a){this.logData+=a},gs.clearLogData=function(){this.logData=""},gs.saveLogData=function(){this.cardLog.push(this.logData)},gs.getCardWithId=function(a){var c=null;return"string"==typeof a&&(a=parseInt(a)),c=a>=this.phaseOneCards.length?this.phaseTwoCards[a-this.phaseOneCards.length]:this.phaseOneCards[a]},gs.eraseNiche=function(a){assert(a.iBiome>=0&&a.iBiome<this.biomes.length,"eraseNiche: invalid tileRef!"),this.biomes[a.iBiome].eraseNiche(a),a.iRank<0&&(a.iBiome+=1,a.iRank=0,a.iBiome>=this.biomes.length&&(a.iBiome=-1))},gs.redrawNiche=function(a){assert(a.iBiome>=0&&a.iBiome<this.biomes.length,"redrawNiche: invalid tileRef!"),this.biomes[a.iBiome].redrawNiche(a),gs.playSound(gs.sounds.score)},gs.eraseEcosystem=function(a){var b=null;return assert(a.iBiome>=0&&a.iBiome<this.biomes.length,"eraseEcosystem: invalid tileRef!"),b=this.biomes[a.iBiome].eraseEcosystem(a),b.eraseCards(a),a.iNiche<0&&(a.iBiome+=1,a.iNiche=0,a.iBiome>=this.biomes.length&&(a.iBiome=-1)),gs.playSound(gs.sounds.score),b},gs.redrawEcosystem=function(a){a.redrawCards()},gs.getCardX=function(a){var b=a?gs.getCardNiche(a):null;b?b.getRankForCard(a):-1;return gs.MAP_OFFSET_X+(b.getLeftCol()-6)*TILE_SIZE*3/2},gs.getCardY=function(a){var b=a?gs.getCardNiche(a):null,c=b?b.getRankForCard(a):-1;return gs.MAP_OFFSET_Y+(b.getTopRow()-3+c)*TILE_SIZE*3/2},gs.eraseCard=function(a){var b=a?gs.getCardNiche(a):null,c=b?b.getRankForCard(a):-1;switch(assert(b,"eraseCard: invalid card or niche!"),gs.getCardTitle(a).toLowerCase()){case"plantae":case"insecta":case"nematoda":switch(tm.removeTileFromLayer(gs.layers.shadows,b.getTopRow(),b.getLeftCol()+1),tm.removeTileFromLayer(gs.layers.producers,b.getTopRow(),b.getLeftCol()+1),tm.removeTileFromLayer(gs.layers.animals,b.getTopRow(),b.getLeftCol()+1),special=gs.getCardSpecial(a),special){case"angiosperm":tm.removeTileFromLayer(gs.layers.grid,b.getTopRow(),b.getLeftCol());break;case"pollinator":tm.removeTileFromLayer(gs.layers.grid,b.getTopRow(),b.getLeftCol()+2)}break;default:switch(assert(c>0,"eraseCard: invalid rank!"),tm.removeTileFromLayer(gs.layers.shadows,b.getTopRow()+c,b.getLeftCol()+1),tm.removeTileFromLayer(gs.layers.animals,b.getTopRow()+c,b.getLeftCol()+1),special=gs.getCardSpecial(a),special){case"migrator":case"symbiote":case"adaptor":tm.removeTileFromLayer(gs.layers.grid,b.getTopRow()+c,b.getLeftCol())}}},gs.redrawCard=function(a){var b=a?gs.getCardNiche(a):null,c=b?b.getRankForCard(a):-1;if(a)switch(a.shadowId>=0&&tm.addTilesToLayer(gs.layers.shadows,"ff_world",a.shadowId,b.getTopRow()+c,b.getLeftCol()+1),gs.getCardTitle(a).toLowerCase()){case"plantae":case"insecta":case"nematoda":a.tileId>=0&&tm.addTilesToLayer(gs.layers.producers,"ff_world",a.tileId,b.getTopRow()+c,b.getLeftCol()+1);break;default:a.tileId>=0&&tm.addTilesToLayer(gs.layers.animals,"ff_world",a.tileId,b.getTopRow()+c,b.getLeftCol()+1)}},gs.populateNiche=function(a,b,c){var d=null,e=[],g=null,h=-1,j=gs.getCardCoCard(a);switch(j&&(b.canHoldCard(j)?(gs.populateNiche(j,b,!0),broadcast("seedsTransferred",j)):(this.primaryDrawDeck.unshift(j),broadcast("angiospermMigrated")),gs.setCardCoCard(a,null)),c||gs.playSound(gs.sounds.buttonLo),gs.getCardTitle(a).toLowerCase()){case"plantae":case"insecta":case"nematoda":if(b.hasOrganismAtRank(0))d=strings.INFO.NICHE_FULL_PRODUCER;else switch(gs.getTileIndexForCardInBiome(a,b.getBiome()),a.tileId>=0&&(gs.indexInfo.tile=a.tileId),gs.indexInfo.shadow&&(tm.addTilesToLayer(gs.layers.shadows,"ff_world",gs.indexInfo.shadow,b.getTopRow(),b.getLeftCol()+1),a.shadowId=gs.indexInfo.shadow),gs.indexInfo.tile>0?(tm.addTilesToLayer(gs.layers.producers,"ff_world",gs.indexInfo.tile,b.getTopRow(),b.getLeftCol()+1),a.tileId=gs.indexInfo.tile):(tm.addTilesToLayer(gs.layers.animals,"ff_world",-gs.indexInfo.tile,b.getTopRow(),b.getLeftCol()+1),a.tileId=-gs.indexInfo.tile),g=gs.getCardSpecial(a)){case"angiosperm":tm.addTilesToLayer(gs.layers.grid,"ff_world",135,b.getTopRow(),b.getLeftCol());break;case"pollinator":tm.addTilesToLayer(gs.layers.grid,"ff_world",134,b.getTopRow(),b.getLeftCol()+2)}break;default:if(gs.getTileIndexForCardInBiome(a,b.getBiome()),a.tileId>=0&&(gs.indexInfo.tile=a.tileId),h=b.getRankForNewCard(a),h>=0)switch(gs.indexInfo.shadow&&(tm.addTilesToLayer(gs.layers.shadows,"ff_world",gs.indexInfo.shadow,b.getTopRow()+h,b.getLeftCol()+1),a.shadowId=gs.indexInfo.shadow),tm.addTilesToLayer(gs.layers.animals,"ff_world",gs.indexInfo.tile,b.getTopRow()+h,b.getLeftCol()+1),a.tileId=gs.indexInfo.tile,gs.getCardValue(a)===gs.WILD_CARD_VALUE&&gs.setCardValue(a,h),g=gs.getCardSpecial(a)){case"migrator":tm.addTilesToLayer(gs.layers.grid,"ff_world",139,b.getTopRow()+h,b.getLeftCol());break;case"symbiote":tm.addTilesToLayer(gs.layers.grid,"ff_world",136,b.getTopRow()+h,b.getLeftCol());break;case"adaptor":tm.addTilesToLayer(gs.layers.grid,"ff_world",137,b.getTopRow()+h,b.getLeftCol())}else if(h!==b.ERR_INVALID_PLACEMENT&&h!==b.ERR_MAX_RANK_EXCEED)switch(gs.getCardValue(a)){case 1:d=strings.INFO.INVALID_PLACEMENT_HERBIVORE;break;case 2:d=strings.INFO.INVALID_PLACEMENT_CARNIVORE;break;case 3:d=strings.INFO.INVALID_PLACEMENT_SCAVENGER;break;default:d=strings.INFO.HABITAT_EMPTY}else d=strings.INFO.HABITAT_FULL}if(!d)for(this.bLogging&&this.cardLog.push(a.id+"~"+b.getBiomeId()+"~"+b.getId()),uim.closeAllEggChambers(),b.addCard(a),e=gs.getCardKeywords(a).split(","),i=0;i<e.length;++i)e[i]=e[i].toLowerCase().replace(" ",""),gs.hasOwnProperty(e[i])&&(assert(!1,"addCard: something called this code!"),gs[e[i]](a,b));return d},gs.unlogCard=function(a){this.bLogging&&(niche=gs.getCardNiche(a),assert(niche,"onCardDestroyed: invalid niche!"),tm.listDeleteElement(this.cardLog,a.id+"~"+niche.getBiomeId()+"~"+niche.getId()))},gs.onCardDestroyed=function(a){var b=gs.getCardSpecial(a),c=!1;return gs.cardSpecialFunctionTable.onDestroyed.hasOwnProperty(b)&&(c=gs[gs.cardSpecialFunctionTable.onDestroyed[b]](a)),c?broadcast("cardSaved",a):(gs.discard(a),gs.resetCard(a),gs.playSound(gs.sounds.destroy)),c},gs.onCardDisplaced=function(a){var b=gs.getCardSpecial(a),c=!1;return gs.cardSpecialFunctionTable.onDisplaced.hasOwnProperty(b)&&(c=gs[gs.cardSpecialFunctionTable.onDisplaced[b]](a)),c||(gs.displacementDeck.push(a),gs.playSound(gs.sounds.displace)),c},gs.addNiche=function(a,b){assert(b.getBiome(),"addNiche: invalid biome!"),b.getBiome().prependNiche(b.getBiome())},gs.transferSeeds=function(a){var b=null,c=null,d=!1;return assert(a,"transferSeeds: invalid card!"),b=gs.getCardNiche(a),c=b.getNextCard(a),c&&(gs.setCardCoCard(c,a),broadcast("seedsTransferred",c),d=!0),d},gs.adapt=function(a){return assert(a,"adapt: invalid card!"),gs.setCardValue(a,gs.WILD_CARD_VALUE),gs.setCardSuitFromValue(a),broadcast("cardAdapted",a),!1},gs.migrate=function(a){var b=gs.getCardCoCard(a);return b&&gs.cardHasKeyword(b,"angiosperm")&&(gs.setCardCoCard(a,null),this.primaryDrawDeck.unshift(b),broadcast("angiospermMigrated")),this.primaryDrawDeck.unshift(a),broadcast("cardMigrated",a),!0},gs.getTileIndexForCardInBiome=function(a,b){var c=a?gs.getCardTitle(a).toLowerCase():null,d=gs.isCardPlantInsectOrNematode(a),e=a?gs.getCardKeywords(a).toLowerCase().replace(" ",""):null,f=!!e&&e.indexOf("large")>=0,g=!!e&&e.indexOf("small")>=0,h=0===b.getLatitude()||b.getLatitude()===this.biomes.length-1,i=null,j=f?"large":g?"small":"normal",k=b?b.getType().name.toLowerCase():null,l=null,m=null;return assert(c&&e,"getTileIndexForCardInBiome: invalid card data!"),assert(k,"getTileIndexForCardInBiome: invalid biome data!"),gs.indexInfo.tile=0,gs.indexInfo.shadow=0,d?l=gs.producerIndexTable[k][c][j]:(e.indexOf("herbivore")>=0?i="herbivore":e.indexOf("carnivore")>=0?i="carnivore":e.indexOf("scavenger")>=0?i="scavenger":e.indexOf("omnivore")>=0&&(i="omnivore"),l=gs.consumerIndexTable[c][i][j]),assert(l,"getTileIndexForCardInBiome: invalid indexInfo!"),gs.indexInfo.shadow=l.shadow,m=l.tile,"object"!=typeof m||m instanceof Array||(m.hasOwnProperty("arctic")&&h?m=m.arctic:m.hasOwnProperty("normal")&&!h?m=m.normal:assert(!1,"getTileIndexForCardInBiome: invalid tile index!")),"number"==typeof m?gs.indexInfo.tile=m:m instanceof Array&&(gs.indexInfo.tile=m[Math.floor(Math.random()*m.length)]),gs.indexInfo},gs.cardTitleIs=function(a,b){var c=!1;return a&&(c=gs.getCardTitle(a).toLowerCase()===b.toLowerCase()),c},gs.cardHasKeyword=function(a,b){var c=!1,d=a?gs.getCardKeywords(a):null;return assert(a&&b,"cardHasKeyword: invalid input!"),d&&(c=d.toLowerCase().indexOf(b.toLowerCase())>=0),c},gs.cardHasLink=function(a,b){var c=a?gs.getCardKeywords(a).split(","):null,d=0,e=!1;for(assert(c,"cardHasLink: invalid keywords!"),b=b.substring(0,1).toUpperCase()+b.substring(1).toLowerCase(),d=0;d<c.length;++d)if(c[d]=c[d].toLowerCase().replace(" ",""),gs.cardSpecialFunctionTable.onPlayed[c[d]]&&gs.cardSpecialFunctionTable.onPlayed[c[d]]==="link"+b){e=!0;break}return e},gs.getCardSuit=function(a,b){var c="number"==typeof a?a:a.value,d=a?""+c:"unknown",e=a&&gs.cardValueToSuit.hasOwnProperty(d)?gs.cardValueToSuit[""+c]:"?",f=b?b:"number"!=typeof a?gs.getCardTitle(a).toLowerCase():null;return f&&("insecta"===f?e="I":"nematoda"===f&&(e="N")),e},gs.getCardSuitFromValue=function(a){var b=null;return a=""+a,gs.cardValueToSuit.hasOwnProperty(a)&&(b=gs.cardValueToSuit[a]),b},gs.setCardSuitFromValue=function(a){var b=gs.getCardValue(a);assert(b>=0&&b<=gs.WILD_CARD_VALUE,"setCardSuitFromValue: invalid value!"),a.suit=gs.cardValueToSuit[b]},gs.getCardCoCard=function(a){return assert(a,"getCardCoCard: invalid card!"),a.coCard},gs.setCardCoCard=function(a,b){assert(a,"setCardCoCard: invalid card!"),a.coCard=b},gs.getCardTitle=function(a){return a?a.title:null},gs.getCardKeywords=function(a){return a?a.keywords:null},gs.getCardLinkedCards=function(a){var b=a?a.linkedCards:null;return assert(b,"getCardLinkedCards: no linked cards!"),b},gs.cardBreakLink=function(a,b){var c=a?gs.getCardLinkedCards(a):null;return assert(a&&c&&c.hasOwnProperty(b),"cardBreakLink: invalid input!"),c[b]&&(c[b]=null,bBrokeLink=!0),bBrokeLink},gs.isCardWild=function(a){return a&&gs.cardHasKeyword(a,"adaptor")},gs.getCardValue=function(a){return a?a.value:-1},gs.setCardValue=function(a,b){a.value=b},gs.getCardSpecial=function(a){return a?a.special:null},gs.getCardPhaseValue=function(a){var b=a?a.value:-1;return a&&gs.isPhaseOne()&&("insecta"!==gs.getCardTitle(a).toLowerCase()&&"nematoda"!==gs.getCardTitle(a).toLowerCase()||(b=0)),b},gs.cardTaggedForRemoval=function(a){return a&&a.bWantsRemoved},gs.tagCardForRemoval=function(a){assert(a,"tagCardForRemoval: invalid card!"),a.bWantsRemoved=!0},gs.untagCardForRemove=function(a){assert(a,"untagCardForRemoval: invalid card!"),a.bWantsRemoved=!1},gs.cardConfirmRemoval=function(a){assert(a,"cardConfirmRemoval: invalid card!"),a.bRemovePending=!0},gs.cardUnconfirmRemoval=function(a){assert(a,"cardConfirmRemoval: invalid card!"),a.bRemovePending=!0},gs.cardRemovalConfirmed=function(a){return assert(a,"cardRemovalConfirmed: invalid card!"),a.bRemovePending},gs.getCardNiche=function(a){return a?a.niche:null},gs.setCardNiche=function(a,b){a.niche=b},gs.getTextForKeyword=function(a,b){var c=null;return a=a.toLowerCase(),b=b.toLowerCase(),c=this.cardInfo[a]?this.cardInfo[a][b]:this.cardInfo.animalia[b]},gs.getNextBiome=function(a){var b=0,c=null;return assert(a,"getNextBiome: invalid reference biome!"),b=this.biomes.indexOf(a),b>=0&&b<this.biomes.length-1&&(c=this.biomes[b+1]),c},gs.getPrevBiome=function(a){var b=0,c=null;return assert(a,"getPrevBiome: invalid reference biome!"),b=this.biomes.indexOf(a),b>0&&(c=this.biomes[b-1]),c},gs.getFirstKeywordForCard=function(a){return this.iter=0,this.getNextKeywordForCard(a)},gs.getNextKeywordForCard=function(a){var b=null,c=a&&a.keywords?a.keywords.split(","):null;return c&&this.iter<c.length&&(b=c[this.iter],b=b.toLowerCase().replace(" ",""),++this.iter),b},gs.bannerStateFromIndex=function(a){var b=0,c=null;assert(a>=0&&a<Object.keys(this.titleToAnimIndex).length,"bannerStateFromIndex: invalid index!");for(c in this.titleToAnimIndex){if(a===b)break;++b}return c},gs.getNumTitles=function(){var a=null,b=0;for(a in this.titleToAnimIndex)++b;return b},gs.getDrawDeckSize=function(){var a=0,b=0;for(a=0;a<this.drawDeck.length&&this.drawDeck[a];++a)b=a+1;return b},gs.getDrawDeckType=function(a){return a<this.drawDeck.length?this.drawDeck[a].title:"INVALID INDEX"},gs.getDrawDeckValue=function(a){return a<this.drawDeck.length?this.drawDeck[a].value:-1},gs.getDrawDeckSuit=function(a){var b=a>=0&&a<this.drawDeck.length?this.drawDeck[a]:null;return b?gs.getCardSuit(b):"?"},gs.getDrawDeckKeywords=function(a){return a<this.drawDeck.length?this.drawDeck[a].keywords:"invalid index"},gs.getDrawDeckSpecial=function(a){return a<this.drawDeck.length?this.drawDeck[a].special:"invalid index"},gs.getDrawDeckCard=function(a){return a<this.drawDeck.length?this.drawDeck[a]:null},gs.getWorldPressInfo=function(a,b){var d=null,f=gs.layers.terrain,h=0,i=0;return h=uim.UiToWorldX(a),i=uim.UiToWorldY(b),this.worldPressInfo.biome=null,this.worldPressInfo.tile=null,this.workPoint=f.getTileXY(h,i,this.workPoint),d=f.map.getTile(this.workPoint.x,this.workPoint.y,gs.layers.terrain),d&&d.properties&&(this.worldPressInfo.niche=d.properties,this.worldPressInfo.biome=this.worldPressInfo.niche.getBiome(),this.worldPressInfo.tile=d),this.worldPressInfo},gs.cardsAreSequentialRank=function(a,b){return assert(a&&b,"cardsAreSequentialRank: invalid card(s)!"),a.value+1===b.value},gs.isCardPlantInsectOrNematode=function(a){var b=a?this.getCardTitle(a).toLowerCase():null;return b&&"plantae"===b||"insecta"===b||"nematoda"===b},gs.showTargetableNiches=function(a){assert(a,"showTargetableNiches: invalid card!"),uim.clearAllCursors(),this.placeCursors(a)},gs.resolvingEvents=function(){return currentState===sm.eventResolveDisplacement},gs.selectNiche=function(a,b){assert(a>=0&&a<this.biomes.length,"placeCursor: invalid biome index!"),this.biomes[a].placeCursor(b)},gs.placeCursors=function(a){var b=0;for(b=0;b<this.biomes.length;++b)this.biomes[b].placeCursors(a)},gs.showAvailableBiomes=function(a){var b=null;assert(a,"showAvailableBiomes: invalid card!"),b=gs.getCardKeywords(a),gs.resolvingEvents()||(this.blockBiomes(null),b&&(b=b.toLowerCase(),"plantae"===gs.getCardTitle(a).toLowerCase()&&b.toLowerCase().indexOf("large")>=0?this.blockBiomes(["desert","plains"]):"nematoda"===gs.getCardTitle(a).toLowerCase()&&this.blockLargeBiomes()))},gs.unblockAllBiomes=function(){var a=0;for(a=0;a<this.biomes.length;++a)this.biomes[a].unblock()},gs.isolateBiome=function(a){var b=0;for(assert(a,"isolateBiome: invalid biome!"),b=0;b<this.biomes.length;++b)this.biomes[b]!==a&&this.biomes[b].block();a.unblock()},gs.blockLargeBiomes=function(){var a=0;for(a=0;a<this.biomes.length;++a)(this.biomes[a].niches.length>=this.biomes[a].maxSizeAtLatitude[a]||this.biomes[a].getStartColumn()===1-this.biomes[a].getStartOffset()%2)&&this.biomes[a].block()},gs.blockBiomes=function(a){var b=0;if(a)for(b=0;b<this.biomes.length;++b)a.indexOf(this.biomes[b].getType().name.toLowerCase())>=0?this.biomes[b].block():this.biomes[b].unblock();else for(b=0;b<this.biomes.length;++b)this.biomes[b].unblock()},gs.assignCardIds=function(){var a=0;for(a=0;a<this.phaseOneCards.length;++a)this.phaseOneCards[a].id=a;for(a=0;a<this.phaseTwoCards.length;++a)this.phaseTwoCards[a].id=this.phaseOneCards.length+a;
},gs.canDiscardPlantae=function(a,b){var c=!0,d=null;return assert(a,"canDiscardPlantae: invalid card!"),"plantae"===gs.getCardTitle(a).toLowerCase()&&(d=gs.getCardLinkedCards(a),d&&gs.cardTitleIs(d.left,"insecta")&&(c=!1)),c},gs.canDiscardAnimal=function(a,b){var c=!1,d=null;return assert(a,"canDiscardAnimal: invalid card!"),c=!gs.cardTaggedForRemoval(a),c||(d=gs.getCardLinkedCards(a),b.push(a),d.left&&b.indexOf(d.left)<0&&(c=!gs.canDiscardAnimal(d.left)),!c&&d.right&&b.indexOf(d.right)<0&&(c=!gs.canDiscardAnimal(d.right))),!c},gs.verifyCardCanBeRemoved=function(a,b){for(var c=!0,d=0,e=[];c&&d<gs.discardFn.length;)c=gs.discardFn[d](b,e),d++;c?gs.cardConfirmRemoval(b):gs.untagCardForRemoval(b)},gs.cardRemove=function(a,b){a.removeCard(b)},gs.makeDisplacementDeckDrawDeck=function(){this.drawDeck=this.displacementDeck},gs.restoreOriginalDrawDeck=function(){this.drawDeck=this.primaryDrawDeck,gs.clearDisplacementDeck()},gs.cardOnPostDisplacementShuffle=function(a){gs.cardHasKeyword(a,"adaptor")&&gs.setCardValue(gs.WILD_CARD_VALUE)},gs.resetBiomes=function(){var a=0;for(a=0;a<this.biomes.length;++a)this.biomes[a].reset(gs.layers.terrain)},gs.resetCards=function(){var a=0;for(a=0;a<this.phaseOneCards.length;++a)this.resetCard(this.phaseOneCards[a]);for(a=0;a<this.phaseTwoCards.length;++a)this.resetCard(this.phaseTwoCards[a])},gs.cardResetSuitAndValue=function(a){assert(a,"cardResetSuitAndValue: invalid card!"),gs.cardHasKeyword(a,"omnivore")&&(a.value=gs.WILD_CARD_VALUE),a.suit=gs.cardValueToSuit[""+a.value]},gs.resetCard=function(a){assert(a,"resetCard: invalid card"),a.bWantsRemoved=!1,a.bRemovePending=!1,a.linkedCards.above=null,a.linkedCards.right=null,a.linkedCards.below=null,a.linkedCards.left=null,a.tileId=-1,a.shadowId=-1,gs.cardResetSuitAndValue(a),a.coCard=null},gs.createEmitters=function(){game.physics.startSystem(Phaser.Physics.ARCADE),gs.emitterFire=game.add.emitter(0,0,gs.PARTICLES_PER_EMISSION*gs.MAX_PARTICLE_FACTOR),gs.emitterFire.minParticleSpeed.setTo(-gs.FIRE_PARTICLE_SPEED,-gs.FIRE_PARTICLE_SPEED),gs.emitterFire.maxParticleSpeed.setTo(gs.FIRE_PARTICLE_SPEED,gs.FIRE_PARTICLE_SPEED),gs.emitterFire.minParticleScale=gs.FIRE_PARTICLE_SCALE_MIN,gs.emitterFire.maxParticleScale=gs.FIRE_PARTICLE_SCALE_MAX,gs.emitterFire.minParticleAlpha=gs.FIRE_PARTICLE_ALPHA_MIN,gs.emitterFire.maxParticleAlpha=gs.FIRE_PARTICLE_ALPHA_MAX,gs.emitterFire.makeParticles("items_ff",[134]),gs.emitterSaved=game.add.emitter(0,0,gs.MA_PARTICLE_FACTOR),gs.emitterSaved.minParticleSpeed.setTo(0,-gs.SAVED_PARTICLE_SPEED),gs.emitterSaved.maxParticleSpeed.setTo(0,-gs.SAVED_PARTICLE_SPEED),gs.emitterSaved.minRotation=0,gs.emitterSaved.maxRotation=0,gs.emitterSaved.minParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterSaved.maxParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterSaved.makeParticles("saved"),gs.emitterDisplaced=game.add.emitter(0,0,gs.MA_PARTICLE_FACTOR),gs.emitterDisplaced.minParticleSpeed.setTo(0,-gs.Displaced_PARTICLE_SPEED),gs.emitterDisplaced.maxParticleSpeed.setTo(0,-gs.Displaced_PARTICLE_SPEED),gs.emitterDisplaced.minRotation=0,gs.emitterDisplaced.maxRotation=0,gs.emitterDisplaced.minParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterDisplaced.maxParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterDisplaced.makeParticles("displaced"),gs.emitterReseeded=game.add.emitter(0,0,gs.MA_PARTICLE_FACTOR),gs.emitterReseeded.minParticleSpeed.setTo(0,1.1*-gs.SAVED_PARTICLE_SPEED),gs.emitterReseeded.maxParticleSpeed.setTo(0,1.1*-gs.SAVED_PARTICLE_SPEED),gs.emitterReseeded.minRotation=0,gs.emitterReseeded.maxRotation=0,gs.emitterReseeded.minParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterReseeded.maxParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterReseeded.makeParticles("reseeded"),gs.emitterAdapted=game.add.emitter(0,0,gs.MA_PARTICLE_FACTOR),gs.emitterAdapted.minParticleSpeed.setTo(0,1.2*-gs.SAVED_PARTICLE_SPEED),gs.emitterAdapted.maxParticleSpeed.setTo(0,1.2*-gs.SAVED_PARTICLE_SPEED),gs.emitterAdapted.minRotation=0,gs.emitterAdapted.maxRotation=0,gs.emitterAdapted.minParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterAdapted.maxParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterAdapted.makeParticles("adapted"),gs.emitterMigrated=game.add.emitter(0,0,gs.MA_PARTICLE_FACTOR),gs.emitterMigrated.minParticleSpeed.setTo(0,1.3*-gs.SAVED_PARTICLE_SPEED),gs.emitterMigrated.maxParticleSpeed.setTo(0,1.3*-gs.SAVED_PARTICLE_SPEED),gs.emitterMigrated.minRotation=0,gs.emitterMigrated.maxRotation=0,gs.emitterMigrated.minParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterMigrated.maxParticleScale=gs.TEXT_PARTICLE_SCALE,gs.emitterMigrated.makeParticles("migrated"),listenFor("cardDestroyed",this),listenFor("cardSaved",this),listenFor("cardDisplaced",this),listenFor("seedsTransferred",this),listenFor("cardAdapted",this),listenFor("angiospermRepopulated",this),listenFor("cardMigrated",this)},gs.init=function(){var a=0;for(gs.biomes.length=0,gs.availableBiomes.length=0,gs.availableNiches.length=0,gs.lastPopulationCount=0,a=0;a<gs.biomeStore.length;++a)gs.availableBiomes.push(gs.biomeStore[a]);for(a=0;a<gs.nicheStore.length;++a)gs.availableNiches.push(gs.nicheStore[a]);gs.resetWorld(),gs.lastPopulationCount=0,gs.initDrawDeck(),gs.initDiscardDeck()},gs.computePopulationsPerFamily=function(){var a=0,b=0,c=0,d=0,e=0;for(a=0;a<gs.phaseTwoCards.length;++a)switch(gs.getCardTitle(gs.phaseTwoCards[a]).toLowerCase()){case"aves":b+=1;break;case"reptilia":c+=1;break;case"amphibia":d+=1;break;case"mammalia":e+=1;break;default:assert(!1,"computePopulationPerFamily: invalid family!")}assert(b===c&&c===d&&d===e,"computePopulationsPerFamily: family have unequal membership!"),gs.nPopulationsPerFamily=b},gs.getPopulationsPerFamily=function(){return gs.nPopulationsPerFamily},gs.cardDestroyed=function(a){gs.startFireParticles(gs.getCardX(a),gs.getCardY(a),events.CARD_DESTROY_INTERVAL_MS/2)},gs.cardSaved=function(a){},gs.cardDisplaced=function(a){gs.startDisplacedParticles(gs.getCardX(a),gs.getCardY(a),events.CARD_DESTROY_INTERVAL_MS/2)},gs.seedsTransferred=function(a){gs.startReseededParticles(gs.getCardX(a),gs.getCardY(a),events.CARD_DESTROY_INTERVAL_MS/2)},gs.cardAdapted=function(a){gs.startAdaptedParticles(gs.getCardX(a),gs.getCardY(a),events.CARD_DESTROY_INTERVAL_MS/2)},gs.angiospermRepopulated=function(a){gs.seedsTransferred(a)},gs.cardMigrated=function(a){gs.getCardNiche(a)&&gs.startMigratedParticles(gs.getCardX(a),gs.getCardY(a),events.CARD_DESTROY_INTERVAL_MS/2)},gs.startFireParticles=function(a,b,c){gs.emitterFire.x=a,gs.emitterFire.y=b,gs.emitterFire.start(!0,c,null,gs.PARTICLES_PER_EMISSION)},gs.startSavedParticles=function(a,b,c){gs.emitterSaved.x=a,gs.emitterSaved.y=b,gs.emitterSaved.start(!0,c,null,1)},gs.startDisplacedParticles=function(a,b,c){gs.emitterDisplaced.x=a,gs.emitterDisplaced.y=b,gs.emitterDisplaced.start(!0,c,null,1)},gs.startReseededParticles=function(a,b,c){gs.emitterReseeded.x=a,gs.emitterReseeded.y=b,gs.emitterReseeded.start(!0,c,null,1)},gs.startAdaptedParticles=function(a,b,c){gs.emitterAdapted.x=a,gs.emitterAdapted.y=b,gs.emitterAdapted.start(!0,c,null,1)},gs.startMigratedParticles=function(a,b,c){gs.emitterMigrated.x=a,gs.emitterMigrated.y=b,gs.emitterMigrated.start(!0,c,null,1)},gs.initDrawDeck=function(){var a=0;for(a=0;a<gs.phaseOneCards.length;++a)gs.resetCard(gs.phaseOneCards[a]);for(a=0;a<gs.phaseTwoCards.length;++a)gs.resetCard(gs.phaseTwoCards[a]);gs.primaryDrawDeck.length=0,tm.copyListToList(gs.phaseOneCards,gs.primaryDrawDeck,!0),gs.drawDeck=gs.primaryDrawDeck},gs.drawDeckExhausted=function(){return tm.trimList(gs.drawDeck),0===gs.drawDeck.length},gs.removeInsectsAndNematodes=function(){for(var a=0,b=!0;b;)for(b=!1,a=0;a<this.drawDeck.length;++a)if(this.drawDeck[a]&&"plantae"!==this.drawDeck[a].title.toLowerCase()){this.drawDeck[a]=null,b=tm.listReplaceWithLastNonNull(this.drawDeck,a,!0);break}tm.trimList(this.drawDeck)},gs.addPhaseTwoCards=function(){tm.copyListToList(gs.phaseTwoCards,gs.primaryDrawDeck,!1)},gs.shuffleDrawDeck=function(){tm.trimList(this.drawDeck),tm.scrambleList(gs.drawDeck),tm.scrambleList(gs.drawDeck),tm.scrambleList(gs.drawDeck),gs.playerHasLegalMove(gs.isPhaseOne())||gs.movePlayableCardToTop()},gs.movePlayableCardToTop=function(){var a=0,b=gs.isPhaseOne(),c=!1,d=null,e=-1,f=null;for(a=uim.getNumBanners();a<this.drawDeck.length;++a)if(d=this.drawDeck[a],c=gs.cardTitleIs(d,"plantae")&&gs.cardHasKeyword(d,"large"),gs.countPlays(d,c,b)>0){e=Math.floor(Math.random()*uim.getNumBanners()),f=gs.drawDeck[e],gs.drawDeck[e]=gs.drawDeck[a],gs.drawDeck[a]=f;break}},gs.postTutorialProgress=function(){var a=gs.getMaxPopulationCount(),b={currentProgress:1,maximumProgress:a,score:gs.computeScore()};gs.lastPopulationCount=1,window.LOLSDK.submitProgress(b)},gs.postProgressComplete=function(){var a=gs.getMaxPopulationCount(),b={currentProgress:a,maximumProgress:a,score:gs.computeScore()};gs.lastPopulationCount=a,window.LOLSDK.submitProgress(b)},gs.postPopulationProgress=function(){var a=gs.getCurrentPopulationCount(),b=gs.getMaxPopulationCount(),c={currentProgress:Math.max(gs.lastPopulationCount,a),maximumProgress:b,score:gs.computeScore()};gs.lastPopulationCount=Math.max(gs.lastPopulationCount,a),window.LOLSDK.submitProgress(c)},gs.getCurrentPopulationCount=function(){var a=0,b=0;for(b=0;b<this.biomes.length;++b)a+=this.biomes[b].getCurrentPopulationCount();return a},gs.getMaxPopulationCount=function(){var a=0,b=0;for(a=0;a<this.biomes.length;++a)b+=this.biomes[a].getNormalSize();for(a=0;a<this.phaseOneCards.length;++a)(gs.cardTitleIs(this.phaseOneCards[a],"insecta")||gs.cardTitleIs(this.phaseOneCards[a],"nematoda"))&&(b+=1);return b*gs.WILD_CARD_VALUE},gs.initDiscardDeck=function(){gs.discardDeck.length=0},gs.getDrawCardsRemaining=function(){var a=0,b=0;for(b=0;b<gs.drawDeck.length;++b)gs.drawDeck[b]&&++a;return a},gs.discard=function(a){gs.discardDeck.push(a)},gs.discardAndReplace=function(a){var b=0,c=!1;if(assert(a,"discardAndReplace: invalid card!"),gs.discard(a),gs.getDrawCardsRemaining()>uim.getNumBanners()){for(b=0;b<gs.drawDeck.length;++b)if(gs.drawDeck[b]===a){c=tm.listReplaceWithLastNonNull(gs.drawDeck,b,!0);break}}else for(b=0;b<gs.drawDeck.length;++b)if(gs.drawDeck[b]===a){tm.listReplaceWithLastNonNull(gs.drawDeck,b,!0);break}return c?(assert(b>=0&&b<gs.drawDeck.length&&gs.drawDeck[b],"discardAndReplace: invalid index!"),uim.setFocusBannerInfo(gs.getDrawDeckType(b),gs.getDrawDeckSuit(b),gs.getDrawDeckKeywords(b),gs.getDrawDeckSpecial(b),gs.getDrawDeckCard(b))):uim.setFocusBannerInfo("",9,"","",null),c},gs.playerHasLegalMove=function(a){var b=!1,c=0,d=null,e=!1,f=0;for(c=0;c<Math.min(this.drawDeck.length,uim.getNumBanners());++c)if(card=this.drawDeck[c],d=gs.getCardKeywords(card),d&&(d=d.toLowerCase(),e="plantae"===gs.getCardTitle(card).toLowerCase()&&d.toLowerCase().indexOf("large")>=0,f=this.countPlays(card,e,a),f>0)){b=!0;break}return b},gs.isCardLargePlant=function(a){var b=!1;return assert(a,"isCardLargePlant: invalid card!"),"plantae"===gs.getCardTitle(a).toLowerCase()&&gs.cardHasKeyword(a,"large")&&(b=!0),b},gs.cardsContiguous=function(){var a=0,b=!0;for(a=0;a<this.drawDeck.length-1;++a)if(!this.drawDeck[a]&&this.drawDeck[a+1]){b=!1;break}return b},gs.doPlaysRemainInDrawDeck=function(){var a=!1,b=0;for(assert(gs.cardsContiguous(),"doPlaysRemainInDrawDeck: deck data corrupted.");this.drawDeck[b]&&!a;)gs.countPlays(this.drawDeck[b],gs.isCardLargePlant(this.drawDeck[b]),!0)>0?a=!0:b+=1;return a},gs.getNumNiches=function(){var a=0,b=0;for(a=0;a<this.biomes.length;++a)b+=this.biomes[a].getNumNiches();return b},gs.countPlays=function(a,b,c){var d=0,f=0,g=null;for(d=0;d<this.biomes.length;++d)g=this.biomes[d].getType().name.toLowerCase(),this.biomes[d].isBlocked()||(!b||"desert"!==g&&"plains"!==g)&&this.biomes[d].canHoldCard(a)&&(f+=1);return f},gs.drawLink=function(a,b){var c=gs.getCardNiche(a),d=0,e=0,f=0,g=0,h=0,i=0;switch(b=b.toLowerCase()){case"down":f=c.getLeftCol()+1,g=f,d=c.getTopRow()+c.getRankForCard(a),e=d+1;break;case"right":f=c.getLeftCol()+1,g=f+c.getBiome().getType().tiles[0].length,d=c.getTopRow()+c.getRankForCard(a),e=d;break;case"left":g=c.getLeftCol()+1,f=g-c.getBiome().getType().tiles[0].length,d=c.getTopRow()+c.getRankForCard(a),e=d}for(h=d;h<=e;++h)for(i=f;i<=g;++i)tm.addTilesToLayer(gs.layers.links,"ff_world",gs.linkTile[b],h,i)},gs.eraseLink=function(a,b){var c=gs.getCardNiche(a),d=null,e=0,f=0,g=0,h=0,i=0,j=0;switch(b=b.toLowerCase()){case"down":g=c.getLeftCol()+1,h=g,e=c.getTopRow()+c.getRankForCard(a),f=e+1,d=gs.getCardLinkedCards(a).below;break;case"right":g=c.getLeftCol()+1,h=g+c.getBiome().getType().tiles[0].length,e=c.getTopRow()+c.getRankForCard(a),f=e,d=gs.getCardLinkedCards(a).right;break;case"left":h=c.getLeftCol()+1,g-=c.getBiome().getType().tiles[0].length,e=c.getTopRow()+c.getRankForCard(a),f=e,d=gs.getCardLinkedCards(a).left;break;case"up":g=c.getLeftCol()+1,h=g,e=c.getTopRow()+c.getRankForCard(a),f=e-1,d=gs.getCardLinkedCards(a).right}for(i=e;i<=f;++i)for(j=g;j<=h;++j)i===f&&j===h?gs.cardHasNoOtherLinks(d,a)&&tm.removeTileFromLayer(gs.layers.links,i,j):tm.removeTileFromLayer(gs.layers.links,i,j)},gs.cardHasNoOtherLinks=function(a,b){var c=!0,d=null;return a&&(d=gs.getCardLinkedCards(a),a.left&&a.left!==b&&(c=!0),!c&&a.above&&a.above!==b&&(c=!0),!c&&a.right&&a.right!==b&&(c=!0),!c&&a.below&&a.below!==b&&(c=!0)),!c},gs.executeCardSpecialFunction=function(a,b){var c=a?gs.getCardKeywords(a):null,d=null,e=null,f=0;for(assert(c,"executeCardSpecialFunctions: invalid keywords!"),d=c.split(","),f=0;f<d.length;++f)e=d[f].replace(" ","").toLowerCase(),gs.cardSpecialFunctionTable[b].hasOwnProperty(e)&&gs[gs.cardSpecialFunctionTable[b][e]](a,gs.getCardNiche(a),!1)},gs.resetWorld=function(){this.resetBiomes(),this.resetCards(),gs.cardLog.length=0},gs.hideCardHints=function(){var a=0;for(a=0;a<this.biomes.length;++a)this.biomes[a].hideCardHints()},gs.showNextCardHints=function(){var a=0;for(a=0;a<this.biomes.length;++a)this.biomes[a].showNextCardHints()},gs.DEBUGgetRandomBiome=function(){return this.biomes[Math.floor(Math.random()*this.biomes.length)]},gs.getEventBiome=function(){var a=events.getCurrentPrimaryBiome();return a},gs.scoreBiomesBy=function(a,b,c,d,e){var f=0;for(assert(e,"scoreBiomesBy: invalid scores out array!"),c&&(e.length=0),f=0;f<this.biomes.length;++f)c&&(e.push(0),this.biomes[f].setScore(0)),this.biomes[f].setScore(this.biomes[f].getScore()+this.biomes[f].scoreNichesBy(a,b,d)),e[f]=this.biomes[f].getScore()},gs.getIthBiome=function(a){return assert(a>=0&&a<this.biomes.length,"getIthBiome: invalid index!"),this.biomes[a]},gs.clearDisplacementDeck=function(){var a=0;for(a=0;a<this.displacementDeck.length;++a)this.displacementDeck[a]&&(gs.onCardDestroyed(this.displacementDeck[a]),gs.discard(this.displacementDeck[a]));this.displacementDeck.length=0},gs.displaceCard=function(a){var b=gs.getCardCoCard(a);b&&gs.cardHasKeyword(b,"angiosperm")&&(this.displacementDeck.push(b),gs.setCardCoCarad(a,null),broadcast("angiospermDisplaced")),this.displacementDeck.push(a)},gs.displacementDeckEmpty=function(){return 0===this.displacementDeck.length},events={CARD_DESTROY_INTERVAL_MS:667,remaining:[],targetBiome:null,iCurBiome:-1,affectedBiomes:[],nCardsDestroyed:0,nCardsDisplaced:0,init:function(){this.remaining.length=0,this.buildDeck()},buildDeck:function(){var a=null;for(a in this.normal)this.remaining.push(this.normal[a]);tm.scrambleList(this.remaining),tm.scrambleList(this.remaining),tm.scrambleList(this.remaining)},seedTutorialEvent:function(a){this.normal.hasOwnProperty(a)?this.remaining.unshift(this.normal[a]):this.endGame.hasOwnProperty(a)?this.remaining.unshift(this.endGame[a]):assert(!1,"seedTutorialEvent: unknown event!")},getNextAffectedBiome:function(){return this.iCurBiome<this.affectedBiomes.length?this.affectedBiomes[this.iCurBiome++]:null},next:function(){0===this.remaining.length&&this.buildDeck(),this.remaining.shift()},getCurrentEventTitle:function(){return assert(this.remaining.length>0,"getCurrentEventTitle: out of Event cards!"),this.remaining[0].getTitle()},getCurrentEventInfo:function(){return assert(this.remaining.length>0,"getCurrentEventInfo: out of Event cards!"),this.remaining[0].getInfo()},getCurrentPrimaryBiome:function(){return assert(this.remaining.length>0,"getCurrentPrimaryBiome: out of Event cards!"),this.remaining[0].getPrimaryBiome()},getCurrentEventQuestion:function(){return assert(this.remaining.length>0,"getCurrentEventQuestion: out of Event cards!"),this.remaining[0].getQuestion()},tagCardsForDestruction:function(){return assert(this.remaining.length>0,"applyCurrent: out of Event cards!"),this.iCurBiome=0,events.affectedBiomes.length=0,this.remaining[0].tagCardsForDestruction(this.targetBiome)},tagCardsForDisplacement:function(a){a&&(this.nCardsDisplaced=a.tagCardsForDisplacement())},displaceCards:function(a){var b=0;for(listenFor("cardDisplaced",this),b=0;b<this.nCardsDisplaced;++b)fn=function(a){return function(){gs.getCardNiche(a).removeCard(a,!1)}},setTimeout(fn(a.getDisplacedCard(b)),events.CARD_DESTROY_INTERVAL_MS*(b+1))},cardDisplaced:function(a){this.nCardsDisplaced-=1,0===this.nCardsDisplaced&&(unlistenFor("cardDisplaced",this),broadcast("allCardsDisplaced"))},getNumCardsDisplaced:function(){return this.nCardsDisplaced},destroyCards:function(){var a=0,b=0,c=null;for(this.nCardsDestroyed=0,listenFor("cardDestroyed",this),a=0;a<this.affectedBiomes.length;++a)for(b=0;b<this.affectedBiomes[a].getNumCardsDestroyed();++b)c=function(a,b){return function(){gs.getCardNiche(b).removeCard(b,!0)}},setTimeout(c(events.affectedBiomes[a],events.affectedBiomes[a].getTaggedCard(b)),events.CARD_DESTROY_INTERVAL_MS*(this.nCardsDestroyed+1)),++this.nCardsDestroyed;0===this.nCardsDestroyed&&(unlistenFor("cardDestroyed"),broadcast("noCardsRemoved"))},cardDestroyed:function(){--this.nCardsDestroyed,0===this.nCardsDestroyed&&(unlistenFor("cardDestroyed"),broadcast("allCardsRemoved"))},getNumCardsDestroyed:function(){var a=0,b=0;for(a=0;a<this.affectedBiomes.length;++a)b+=this.affectedBiomes[a]?this.affectedBiomes[a].getNumCardsDestroyed():0;return b},getNumBiomesAffected:function(){return this.affectedBiomes.length},setBiome:function(a){this.targetBiome=a},endGame:{humanSettlement:{getTitle:function(){return strings.EVENTS.HUMAN_SETTLEMENT.title},getInfo:function(){return strings.EVENTS.HUMAN_SETTLEMENT.info},getQuestion:function(){return strings.EVENTS.HUMAN_SETTLEMENT.question},getPrimaryBiome:function(){var a=[],b=[],c=[],d=0,e=-1;for(gs.scoreBiomesBy("plantae",null,!0,!0,a),gs.scoreBiomesBy("plantae","large",!0,!0,b),gs.scoreBiomesBy("plantae","small",!1,!0,b),d=0;d<a.length;++d)a[d]=a[d]-b[d];return tm.numberListFindMaxima(a,c),e=tm.listReturnRandomElement(c),e>=0&&e<a.length?gs.getIthBiome(e):null},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.humanSettlement.tagCardsForDestruction: displacementDeck not empty!"),a.tagCardsOfTypeForDestruction("plantae",null,!0),a.untagDestroyedCardsWithKeyword("large"),a.untagDestroyedCardsWithKeyword("small"),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}}},normal:{famine:{getTitle:function(){return strings.EVENTS.FAMINE.title},getInfo:function(){return strings.EVENTS.FAMINE.info},getQuestion:function(){return strings.EVENTS.FAMINE.question},getPrimaryBiome:function(){var a=[],b=[],c=-1;return gs.scoreBiomesBy("aves","large",!0,!0,a),gs.scoreBiomesBy("mammalia","large",!1,!0,a),tm.numberListFindMaxima(a,b),c=tm.listReturnRandomElement(b),c>=0&&c<a.length?gs.getIthBiome(c):null},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.famine.tagCardsForDestruction: displacementDeck not empty!"),a.tagCardsOfTypeForDestruction("aves","large",!0),a.tagCardsOfTypeForDestruction("mammalia","large",!1),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}},poleShift:{getTitle:function(){return strings.EVENTS.POLE_SHIFT.title},getInfo:function(){return strings.EVENTS.POLE_SHIFT.info},getQuestion:function(){return strings.EVENTS.POLE_SHIFT.question},getPrimaryBiome:function(){var a=[],b=[],c=-1;return gs.scoreBiomesBy("reptilia","large",!0,!0,a),gs.scoreBiomesBy("amphibia","large",!1,!0,a),tm.numberListFindMaxima(a,b),c=tm.listReturnRandomElement(b),c>=0&&c<a.length?gs.getIthBiome(c):null},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.poleShift.tagCardsForDestruction: displacementDeck not empty!"),a.tagCardsOfTypeForDestruction("reptilia","large",!0),a.tagCardsOfTypeForDestruction("amphibia","large",!1),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}},blight:{NUM_BIOMES_AFFECTED:3,getTitle:function(){return strings.EVENTS.BLIGHT.title},getInfo:function(){return strings.EVENTS.BLIGHT.info},getQuestion:function(){return strings.EVENTS.BLIGHT.question},getPrimaryBiome:function(){var a=[],b=[],c=0,d=-1,e=Number.NEGATIVE_INFINITY,f=0;for(gs.scoreBiomesBy("plantae","large",!0,!0,a),c=0;c<a.length-2;++c)f=a[c]+a[c+1]+a[c+2],f>e&&(e=f);for(c=0;c<a.length-2;++c)f=a[c]+a[c+1]+a[c+2],f===e&&b.push(c);return b.length>0&&b.length<=a.length&&(d=b[Math.floor(Math.random()*b.length)]),d>=0?gs.getIthBiome(d):null},tagCardsForDestruction:function(a){var b=0;for(assert(gs.displacementDeckEmpty(),"events.blight.tagCardsForDestruction: displacementDeck not empty!"),b=0;b<this.NUM_BIOMES_AFFECTED;++b)a.tagCardsOfTypeForDestruction("plantae","large",!0),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),a=gs.getNextBiome(a);broadcast("cardsDestroyed")}},insectPlague:{NUM_BIOMES_AFFECTED:3,getTitle:function(){return strings.EVENTS.INSECT_PLAGUE.title},getInfo:function(){return strings.EVENTS.INSECT_PLAGUE.info},getQuestion:function(){return strings.EVENTS.INSECT_PLAGUE.question},getPrimaryBiome:function(){var a=[],b=[],c=0,d=-1,e=0,f=0;for(gs.scoreBiomesBy("plantae","small",!0,!0,a),c=0;c<a.length-2;++c)f=a[c]+a[c+1]+a[c+2],f>e&&(e=f);for(c=0;c<a.length-2;++c)f=a[c]+a[c+1]+a[c+2],f===e&&b.push(c);return b.length>0&&b.length<=a.length&&(d=b[Math.floor(Math.random()*b.length)]),d>=0?gs.getIthBiome(d):null},tagCardsForDestruction:function(a){var b=0;for(assert(gs.displacementDeckEmpty(),"events.insectPlague.tagCardsForDestruction: displacementDeck not empty!"),b=0;b<this.NUM_BIOMES_AFFECTED;++b)a.tagCardsOfTypeForDestruction("plantae","small",!0),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),a=gs.getNextBiome(a);broadcast("cardsDestroyed")}},disease:{targetFamily:null,getTitle:function(){return strings.EVENTS.DISEASE.title},getInfo:function(){return strings.EVENTS.DISEASE.info},getQuestion:function(){return strings.EVENTS.DISEASE.question},getPrimaryBiome:function(){var a={amphibia:[],reptilia:[],aves:[],mammalia:[]},b=[],c=null,d=[],e=-1,f=0,g=0;for(c in a)gs.scoreBiomesBy(c,null,!0,!0,a[c]),f=tm.numberListFindMaxValue(a[c]),f>g?(b.length=0,b.push(c),g=f):f===g&&f>0&&b.push(c);return this.targetFamily=tm.listReturnRandomElement(b),tm.numberListFindMaxima(a[this.targetFamily],d),e=tm.listReturnRandomElement(d),e>=0&&e<a[this.targetFamily].length?gs.getIthBiome(e):null},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.disease.tagCardsForDestruction: displacementDeck not empty!"),a.tagCardsOfTypeForDestruction(this.targetFamily,null,!0),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}},drought:{getTitle:function(){return strings.EVENTS.DROUGHT.title},getInfo:function(){return strings.EVENTS.DROUGHT.info},getQuestion:function(){return strings.EVENTS.DROUGHT.question},getPrimaryBiome:function(){var a=[],b=[],c=-1;return gs.scoreBiomesBy("amphibia","herbivore",!0,!0,a),gs.scoreBiomesBy("reptilia","herbivore",!1,!0,a),gs.scoreBiomesBy("aves","herbivore",!1,!0,a),gs.scoreBiomesBy("mammalia","herbivore",!1,!0,a),tm.numberListFindMaxima(a,b),c=tm.listReturnRandomElement(b),c>=0&&c<a.length?gs.getIthBiome(c):null},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.drought.tagCardsForDestruction: displacementDeck not empty!"),a.tagCardsOfTypeForDestruction("amphibia","herbivore",!0),a.tagCardsOfTypeForDestruction("reptilia","herbivore",!1),a.tagCardsOfTypeForDestruction("aves","herbivore",!1),a.tagCardsOfTypeForDestruction("mammalia","herbivore",!1),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}},fastActingToxins:{getTitle:function(){return strings.EVENTS.FAST_ACTING_TOXINS.title},getInfo:function(){return strings.EVENTS.FAST_ACTING_TOXINS.info},getQuestion:function(){return strings.EVENTS.FAST_ACTING_TOXINS.question},getPrimaryBiome:function(){var a=[],b=[],c=-1;return gs.scoreBiomesBy("amphibia","small",!0,!0,a),gs.scoreBiomesBy("reptilia","small",!1,!0,a),tm.numberListFindMaxima(a,b),c=tm.listReturnRandomElement(b),c>=0&&c<a.length?gs.getIthBiome(c):null},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.fastActingToxins.tagCardsForDestruction: displacementDeck not empty!"),a.tagCardsOfTypeForDestruction("amphibia","small",!0),a.tagCardsOfTypeForDestruction("reptilia","small",!1),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}},cumulativeToxins:{getTitle:function(){return strings.EVENTS.CUMULATIVE_TOXINS.title},getInfo:function(){return strings.EVENTS.CUMULATIVE_TOXINS.info},getQuestion:function(){return strings.EVENTS.CUMULATIVE_TOXINS.question},getPrimaryBiome:function(){var a=[],b=[],c=-1;return gs.scoreBiomesBy("aves","small",!0,!0,a),gs.scoreBiomesBy("mammalia","small",!1,!0,a),tm.numberListFindMaxima(a,b),c=tm.listReturnRandomElement(b),c>=0&&c<a.length?gs.getIthBiome(c):null},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.cumulativeToxins.tagCardsForDestruction: displacementDeck not empty!"),a.tagCardsOfTypeForDestruction("aves","small",!0),a.tagCardsOfTypeForDestruction("mammalia","small",!1),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}},globalWarming:{getTitle:function(){return strings.EVENTS.GLOBAL_WARMING.title},getInfo:function(){return strings.EVENTS.GLOBAL_WARMING.info},getQuestion:function(){return strings.EVENTS.GLOBAL_WARMING.question},getPrimaryBiome:function(){var a=[],b=null,c=0,d=[],e=[],f=-1;if(gs.getBiomesOfType("WETLANDS",a),a.length>0)for(c=0;c<a.length;++c)a[c].setScore(0),a[c].setScore(a[c].scoreNichesBy("insecta",null,!0)),a[c].setScore(a[c].getScore()+a[c].scoreNichesBy("plantae","large",!0)),a[c].setScore(a[c].getScore()+a[c].scoreNichesBy("amphibia",null,!0)),d.push(a[c].getScore()),tm.numberListFindMaxima(d,e),f=tm.listReturnRandomElement(e),d[f]>0?b=a[f]:a[f].convertToNewType("DESERT");return b},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.globalWarming.tagCardsForDestruction: displacementDeck not empty!"),a.convertToNewType("DESERT"),a.tagCardsOfTypeForDestruction("insecta",null,!0),a.tagCardsOfTypeForDestruction("plantae","large",!1),a.tagCardsOfTypeForDestruction("amphibia",null,!1),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}},globalCooling:{getTitle:function(){return strings.EVENTS.GLOBAL_COOLING.title},getInfo:function(){return strings.EVENTS.GLOBAL_COOLING.info},getQuestion:function(){return strings.EVENTS.GLOBAL_COOLING.question},getPrimaryBiome:function(){var a=[],b=null,c=0,d=[],e=[],f=-1;if(gs.getBiomesOfType("DESERT",a),a.length>0)for(c=0;c<a.length;++c)a[c].setScore(0),a[c].setScore(a[c].scoreNichesBy("nematoda",null,!0)),a[c].setScore(a[c].getScore()+a[c].scoreNichesBy("plantae","small",!0)),a[c].setScore(a[c].getScore()+a[c].scoreNichesBy("reptilia",null,!0)),d.push(a[c].getScore()),tm.numberListFindMaxima(d,e),f=tm.listReturnRandomElement(e),d[f]>0?b=a[f]:a[f].convertToNewType("WETLANDS");return b},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.globalCooling.tagCardsForDestruction: displacementDeck not empty!"),a.convertToNewType("WETLANDS"),a.tagCardsOfTypeForDestruction("nematoda",null,!0),a.tagCardsOfTypeForDestruction("plantae","small",!1),a.tagCardsOfTypeForDestruction("reptilia",null,!1),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}},superParasite:{getTitle:function(){return strings.EVENTS.SUPER_PARASITE.title},getInfo:function(){return strings.EVENTS.SUPER_PARASITE.info},getQuestion:function(){return strings.EVENTS.SUPER_PARASITE.question},getPrimaryBiome:function(){var a=[],b=[],c=-1;return gs.scoreBiomesBy("amphibia","carnivore",!0,!0,a),gs.scoreBiomesBy("reptilia","carnivore",!1,!0,a),gs.scoreBiomesBy("aves","carnivore",!1,!0,a),gs.scoreBiomesBy("mammalia","carnivore",!1,!0,a),tm.numberListFindMaxima(a,b),c=tm.listReturnRandomElement(b),c>=0&&c<a.length?gs.getIthBiome(c):null},tagCardsForDestruction:function(a){assert(gs.displacementDeckEmpty(),"events.drought.tagCardsForDestruction: displacementDeck not empty!"),a.tagCardsOfTypeForDestruction("amphibia","carnivore",!0),a.tagCardsOfTypeForDestruction("reptilia","carnivore",!1),a.tagCardsOfTypeForDestruction("aves","carnivore",!1),a.tagCardsOfTypeForDestruction("mammalia","carnivore",!1),a.getNumCardsDestroyed()>0&&events.affectedBiomes.push(a),broadcast("cardsDestroyed")}}}},bd={},bd.ROW_OFFSET=3,bd.biome=function(){this.latitude=-1,this.type=null,this.startCol=-1,this.sprNoSelect=null,this.layer=null,this.sprBlocked=null,this.niches=[],this.tileSet=null,this.suitText=null,this.score=0,this.nPrepended=0,this.cardsDestroyed=[],this.cardsDisplaced=[]},bd.biome.prototype.MAX_GROWTH=2,bd.biome.prototype.MAX_SIZE=6,bd.biome.prototype.sizeByLatitude=[2,3,4,3,2],bd.biome.prototype.noSelectByLatitude=["Small","Medium","Large","Medium","Small"],bd.biome.prototype.maxSizeAtLatitude=[4,5,5,5,4],bd.biome.prototype.offsets=[6,7,6,7,6],bd.biome.prototype.TYPES={DESERT:{name:"Desert",tiles:[[{row:18,col:37},{row:18,col:36},{row:19,col:34}],[{row:18,col:35},{row:18,col:33},{row:19,col:35}],[{row:18,col:35},{row:18,col:33},{row:19,col:35}],[{row:18,col:38},{row:18,col:39},{row:19,col:36}]]},FOREST:{name:"Forest",tiles:[[{row:34,col:37},{row:34,col:36},{row:35,col:34}],[{row:34,col:35},{row:34,col:33},{row:35,col:35}],[{row:34,col:35},{row:34,col:33},{row:35,col:35}],[{row:34,col:38},{row:34,col:39},{row:35,col:36}]]},PLAINS:{name:"Plains",tiles:[[{row:16,col:37},{row:16,col:36},{row:17,col:34}],[{row:16,col:35},{row:16,col:33},{row:17,col:35}],[{row:16,col:35},{row:16,col:33},{row:17,col:35}],[{row:16,col:38},{row:16,col:39},{row:17,col:36}]]},WETLANDS:{name:"Wetlands",tiles:[[{row:31,col:9},{row:31,col:9},{row:31,col:6}],[{row:31,col:9},{row:31,col:9},{row:31,col:6}],[{row:31,col:9},{row:31,col:9},{row:31,col:6}],[{row:31,col:9},{row:31,col:9},{row:31,col:6}]]},MOUNTAINS:{name:"Mountains",tiles:[[{row:22,col:37},{row:22,col:36},{row:23,col:34}],[{row:22,col:35},{row:22,col:33},{row:23,col:35}],[{row:22,col:35},{row:22,col:33},{row:23,col:35}],[{row:22,col:38},{row:22,col:39},{row:23,col:36}]]}},bd.biome.prototype.init=function(){this.niches.length=0},bd.biome.prototype.getCards=function(a){var b=0;for(b=0;b<this.niches.length;++b)this.niches[b].getCards(a)},bd.biome.prototype.computeEcosystemBiodiversity=function(){var a=0,b=0;for(a=0;a<this.niches.length;++a)b+=this.niches[a].computeEcosystemBiodiversity();return b},bd.biome.prototype.addToCardLog=function(a){var b=0;for(b=0;b<this.niches.length;++b)this.niches[b].addToCardLog(a)},bd.biome.prototype.computeNicheBiodiversity=function(a){var b=0,c=null,d=[],e=null,f=0,g=0,h=null,i=null;for(d.length=0,b=0;b<this.niches.length;++b)if(h=this.niches[b].getCardWithValue(a))for(e=gs.getCardTitle(h),e&&d.indexOf(e.toLowerCase())<0&&d.push(e.toLowerCase()),c=gs.getCardKeywords(h),c=c?c.split(","):null,g=0;c&&g<c.length;++g)i=c[g].replace(" ","").toLowerCase(),d.indexOf(i)<0&&d.push(i);return f+=d.length},bd.biome.prototype.computeScore=function(){var a=0,b=0;for(a=0;a<this.niches.length;++a)b+=this.niches[a].computeScore();return b},bd.biome.prototype.getCardAt=function(a,b){var c=null;return assert(a.iNiche>=0&&a.iNiche<this.niches.length,"getCardAt: invalid niche index!"),
c=this.niches[a.iNiche].getCardAt(a,b),a.iCard<0&&(a.iNiche+=1,a.iCard=0,a.iNiche>=this.niches.length&&(a.iNiche=-1,a.iCard=-1)),c},bd.biome.prototype.eraseNiche=function(a){var b=0;for(assert(a.iRank>=0&&a.iRank<gs.WILD_CARD_VALUE,"eraseNiche: invalid rank index!"),b=0;b<this.niches.length;++b)this.niches[b].eraseCardAtRank(a.iRank);a.rating=this.computeNicheBiodiversity(a.iRank),a.iRank+=1,a.iRank>=gs.WILD_CARD_VALUE&&(a.iRank=-1)},bd.biome.prototype.recordPopulations=function(a){var b=0;for(b=0;b<this.niches.length;++b)this.niches[b].recordPopulations(a)},bd.biome.prototype.redrawNiche=function(a){var b=0;for(assert(a.iRank>=0&&a.iRank<gs.WILD_CARD_VALUE,"redrawNiche: invalid rank index!"),b=0;b<this.niches.length;++b)this.niches[b].redrawCardAtRank(a.iRank)},bd.biome.prototype.eraseEcosystem=function(a){var b=null;return assert(a.iNiche>=0&&a.iNiche<this.niches.length,"eraseEcosystem: invalid niche index!"),b=this.niches[a.iNiche],b.eraseCards(a),a.iNiche+=1,a.iNiche>=this.niches.length&&(a.iNiche=-1),b},bd.biome.prototype.reset=function(a){var b=0;for(b=0;b<this.niches.length;++b)this.niches[b].reset(),this.niches[b].init();this.erase(a)},bd.biome.prototype.getNormalSize=function(){return this.sizeByLatitude[this.latitude]},bd.biome.prototype.getStartColumn=function(){return this.startCol},bd.biome.prototype.getStartOffset=function(){return this.offsets[this.getLatitude()]},bd.biome.prototype.showNextCardHints=function(){var a=0;for(a=0;a<this.niches.length;++a)this.niches[a].showNextCardHint()},bd.biome.prototype.hideCardHints=function(){var a=0;for(a=0;a<this.niches.length;++a)this.niches[a].hideCardHint()},bd.biome.prototype.convertToNewType=function(a){var b=null;for(b in this.TYPES)if(this.TYPES[b].name.toLowerCase()===a.toLowerCase()){a=this.TYPES[b];break}this.type=a,this.draw(this.layer)},bd.biome.prototype.getScore=function(){return this.score},bd.biome.prototype.setScore=function(a){this.score=a},bd.biome.prototype.isLastNiche=function(a){return this.niches&&this.niches.length>0&&this.niches[this.niches.length-1]===a},bd.biome.prototype.isFirstNiche=function(a){return this.niches&&this.niches.length>0&&this.niches[0]===a},bd.biome.prototype.prependNiche=function(a){this.startCol-=1;var b=gs.getNextAvailableNiche();return b.setTopLeft(this.getNicheRow(),this.getNicheColumn(0)),b.setBiome(a),this.buildAdditionalNiche(a.getType(),b),this.niches.unshift(b),this.nPrepended+=1,b},bd.biome.prototype.getNumCardsDestroyed=function(){return this.cardsDestroyed.length},bd.biome.prototype.getNumPrepended=function(){return this.nPrepended},bd.biome.prototype.getNicheAt=function(a){var b=null;return a>=0&&a<this.niches.length&&(b=this.niches[a]),b},bd.biome.prototype.getNextNiche=function(a){var b=0,c=null;for(b=0;b<this.niches.length;++b)if(this.niches[b]===a){b<this.niches.length-1&&(c=this.niches[b+1]);break}return c},bd.biome.prototype.getPrevNiche=function(a){var b=0,c=null;for(b=0;b<this.niches.length;++b)if(this.niches[b]===a){b>0&&(c=this.niches[b-1]);break}return c},bd.biome.prototype.getCurrentPopulationCount=function(){var a=0,b=0;for(a=0;a<this.niches.length;++a)b+=this.niches[a].getCurrentPopulationCount();return b},bd.biome.prototype.getMaxPopulationCount=function(){var a=0,b=0;for(a=0;a<this.niches.length;++a)b+=this.niches[a].getMaxPopulationCount();return b},bd.biome.prototype.tileAt=function(a,b){var c=null;return gs.worldPressInfo.tile||this.contains(a,b),c=gs.worldPressInfo.tile,gs.worldPressInfo.biome=null,gs.worldPressInfo.tile=null,c},bd.biome.prototype.block=function(){assert(this.sprBlocked,"biome.block: invalid blocking sprite!"),this.sprBlocked.reset(this.sprBlocked.x,this.sprBlocked.y)},bd.biome.prototype.unblock=function(){assert(this.sprBlocked,"biome.unblock: invalid blocking sprite!"),this.sprBlocked.kill()},bd.biome.prototype.isBlocked=function(){return this.sprBlocked&&this.sprBlocked.exists},bd.biome.prototype.addNiche=function(a){var b=gs.getNextAvailableNiche();return b.setTopLeft(this.getNicheRow(),this.getNicheColumn(this.niches.length)),b.setBiome(a),this.niches.push(b),b},bd.biome.prototype.getX=function(a){var b=this.getStartOffset(),c=b%2===0?1:0,d=this.type.tiles[0].length;return a?uim.worldToUiX((b+c(this.getNumNiches()-1)*d+d-1)*TILE_SIZE):uim.worldToUiX((b+c)*TILE_SIZE)},bd.biome.prototype.getY=function(a){var b=this.type.tiles.length;return a?uim.worldToUiY((this.latitude*b+b-1+LAYER_OFFSET)*TILE_SIZE):uim.worldToUiY((this.latitude*b+LAYER_OFFSET)*TILE_SIZE)},bd.biome.prototype.getType=function(){return this.type},bd.biome.prototype.setLatitude=function(a){this.latitude=a},bd.biome.prototype.getLatitude=function(){return this.latitude},bd.biome.prototype.setType=function(a){this.type=a},bd.biome.prototype.setStartCol=function(a){this.startCol=a},bd.biome.prototype.build=function(a,b,c,d){var h=0,j=0,k=0,o=this.getStartOffset(),p=o%2===0?1:0;assert(d,"biome.build: invalid blocking sprite!"),this.sprBlocked=d,this.sprBlocked.x=uim.worldToUiX((o+p)*TILE_SIZE),this.sprBlocked.y=uim.worldToUiY((this.latitude*this.type.tiles.length+LAYER_OFFSET)*TILE_SIZE),this.sprBlocked.scale.setTo(gs.SPRITE_SCALE,gs.SPRITE_SCALE),this.sprBlocked.kill(),this.tileSet=b,this.layer=a,h=this.latitude*this.type.tiles.length+(this.type.tiles.length-1),j=o*TILE_SIZE,k=h*TILE_SIZE,this.sprNoSelect=uim.getGroup().create(j,k,"noSelectLarge"),this.sprNoSelect.kill(),this.draw(a)},bd.biome.prototype.draw=function(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=!1,j=!1,k=null,l=this.getStartOffset();for(b=0;b<this.getNumNiches();++b)for(d=0;d<this.type.tiles.length;++d)for(e=this.latitude*this.type.tiles.length+d,d===this.type.tiles.length-1&&0===b&&(g=l*TILE_SIZE,h=e*TILE_SIZE),c=0;c<this.type.tiles[0].length;++c)f=(this.startCol+b)*this.type.tiles[0].length+c+l,i=b===this.getNumNiches()-1,j=c===this.type.tiles[0].length-1,i&&j||(j?(k=tm.addTilesToLayer(a,"ff_world",this.type.tiles[d][c],e+bd.ROW_OFFSET,f),k&&(k.properties=null)):(k=tm.addTilesToLayer(a,"ff_world",this.type.tiles[d][c],e+bd.ROW_OFFSET,f),k&&(k.properties=this.niches[b])))},bd.biome.prototype.erase=function(a){var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=!1,j=!1,k=null,l=this.getStartOffset();for(b=0;b<this.getNumNiches();++b)for(d=0;d<this.type.tiles.length;++d)for(e=this.latitude*this.type.tiles.length+d,d===this.type.tiles.length-1&&0===b&&(g=l*TILE_SIZE,h=e*TILE_SIZE),c=0;c<this.type.tiles[0].length;++c)f=(this.startCol+b)*this.type.tiles[0].length+c+l,i=b===this.getNumNiches()-1,j=c===this.type.tiles[0].length-1,i&&j||(j?(k=tm.removeTileFromLayer(a,e+bd.ROW_OFFSET,f),k&&(k.properties=null)):(k=tm.removeTileFromLayer(a,e+bd.ROW_OFFSET,f),k&&(k.properties=null)))},bd.biome.prototype.scoreNichesBy=function(a,b,c){var d=0,e=-1,g=0;for(d=0;d<this.niches.length;++d)e=this.niches[d].getOrganismRank(a,b),e>=0&&(g+=2,c&&(g+=this.niches[d].scoreOrganismsAboveRank(e,a,b)));return g},bd.biome.prototype.tagCardsForDisplacement=function(){var a=0;for(this.cardsDisplaced.length=0,a=0;a<this.niches.length;++a)this.niches[a].tagCardsForDisplacement(this.cardsDisplaced);return this.cardsDisplaced.length},bd.biome.prototype.getDisplacedCard=function(a){return assert(this.cardsDisplaced&&a>=0&&a<this.cardsDisplaced.length,"getDisplacedCard: invalid card index!"),this.cardsDisplaced[a]},bd.biome.prototype.getTaggedCard=function(a){return assert(this.cardsDestroyed&&a>=0&&a<this.cardsDestroyed.length,"getTaggedCard: invalid card index!"),this.cardsDestroyed[a]},bd.biome.prototype.removeTaggedCard=function(a){var b=a?gs.getCardNiche(a):null;assert(b,"removeTaggedCard: invalid card or niche!"),b.removeCard(a,!0)},bd.biome.prototype.tagCardsOfTypeForDestruction=function(a,b,c){var d=0;for(c&&(this.cardsDestroyed.length=0),d=0;d<this.niches.length;++d)this.niches[d].tagCardsOfTypeForDestruction(a,b,this.cardsDestroyed)},bd.biome.prototype.untagDestroyedCardsWithKeyword=function(a){var b=0,c=[];for(a=a.toLowerCase(),b=0;b<this.cardsDestroyed.length;++b)this.cardsDestroyed[b]&&gs.cardHasKeyword(this.cardsDestroyed[b],a)?this.cardsDestroyed[b]=null:c.push(this.cardsDestroyed[b]);for(this.cardsDestroyed.length=0,b=0;b<c.length;++b)this.cardsDestroyed.push(c[b])},bd.biome.prototype.buildAdditionalNiche=function(a,b){var c=0,d=0,e=0,f=0,g=0,h=0,j=!1,k=null,l=this.getStartOffset();for(d=0;d<this.type.tiles.length;++d)for(e=this.latitude*this.type.tiles.length+d,d===this.type.tiles.length-1&&(g=l*TILE_SIZE,h=e*TILE_SIZE),c=0;c<this.type.tiles[0].length;++c)f=this.startCol*this.type.tiles[0].length+c+l,j=c===this.type.tiles[0].length-1,j?(k=tm.addTilesToLayer(this.layer,"ff_world",this.type.tiles[d][c],e+bd.ROW_OFFSET,f),k&&(k.properties=null)):(k=tm.addTilesToLayer(this.layer,"ff_world",this.type.tiles[d][c],e+bd.ROW_OFFSET,f),k&&(k.properties=b))},bd.biome.prototype.removeTiles=function(a){var b=0,c=0,d=0,e=0,f=0,g=this.getStartOffset();for(b=0;b<this.getNumNiches();++b)for(d=0;d<this.type.tiles.length;++d)for(e=this.latitude*this.type.tiles.length+d,c=0;c<this.type.tiles[0].length;++c)f=(this.startCol+b)*this.type.tiles[0].length+c+g,tm.aremoveilesFromLayer(a,bd.ROW_OFFSET,e,f)},bd.biome.prototype.getNumNiches=function(){return this.niches?this.niches.length:0},bd.biome.prototype.placeCursor=function(a){assert(a>=0&&a<this.niches.length,"placeCursor: invalid niche index!"),this.niches[a].setCursor(null)},bd.biome.prototype.placeCursors=function(a){var b=this.getNumNiches(),c=0;for(c=0;c<b;++c)!this.isBlocked()&&this.niches[c].canHoldCard(a)&&this.niches[c].setCursor(a)},bd.biome.prototype.getNicheColumn=function(a){return(this.startCol+a)*this.type.tiles[0].length+this.getStartOffset()},bd.biome.prototype.getNicheRow=function(){return this.latitude*this.type.tiles.length+LAYER_OFFSET},bd.biome.prototype.canHoldCard=function(a){var b=0,c=!1;for(b=0;b<this.niches.length;++b)this.niches[b].canHoldCard(a)&&(c=!0);return c},bd.biome.prototype.getNicheId=function(a){var b=0,c=-1;for(b=0;b<this.niches.length;++b)this.niches[b]===a&&(c=b);return c>=0&&(c-=this.nPrepended,c<0&&(c+=this.niches.length)),c},bd.niche=function(a,b){var c=0;for(this.cards=[],this.topRow=a,this.leftCol=b,this.text=game.add.bitmapText(this.leftCol*TILE_SIZE,this.topRow*TILE_SIZE,"bogboo",uim.INFO_TEXT_SIZE*gs.SPRITE_SCALE),uim.addToCardHintGroup(this.text),this.text.anchor.setTo(.5,.5),this.text.visible=!1,this.biome=null,this.bAddedDuringPlay=!1,c=0;c<=this.MAX_RANK;++c)this.cards.push(null)},bd.niche.prototype.MAX_RANK=3,bd.niche.prototype.ERR_INVALID_PLACEMENT=-99,bd.niche.prototype.init=function(){var a=0;if(0===this.cards.length)for(a=0;a<=this.MAX_RANK;++a)this.cards.push(null);else for(assert(this.cards.length===this.MAX_RANK+1,"niche.init: invalid card array!"),a=0;a<=this.MAX_RANK;++a)this.cards[a]=null},bd.niche.prototype.getCardWithValue=function(a){var b=0,c=null;for(b=0;b<this.cards.length;++b)if(this.cards[b]&&this.cards[b].value===a){c=this.cards[b];break}return c},bd.niche.prototype.computeScore=function(){var a=0,b=0;for(a=0;a<this.cards.length;++a)this.cards[a]&&(b+=1);return b*gs.UNIT_SCORE_SCALAR},bd.niche.prototype.getCards=function(a){var b=0;for(b=0;b<this.cards.length;++b)this.cards[b]&&a.push(this.cards[b])},bd.niche.prototype.eraseCards=function(a){var b=0;for(b=0;b<this.cards.length;++b)this.cards[b]&&gs.eraseCard(this.cards[b]);a.rating=this.computeEcosystemBiodiversity()},bd.niche.prototype.redrawCards=function(){var a=0;for(a=0;a<this.cards.length;++a)this.cards[a]&&gs.redrawCard(this.cards[a])},bd.niche.prototype.eraseCardAtRank=function(a){var b=this.cardAtRank(a);b&&gs.eraseCard(b)},bd.niche.prototype.redrawCardAtRank=function(a){var b=this.cardAtRank(a);b&&gs.redrawCard(b)},bd.niche.prototype.computeEcosystemBiodiversity=function(){var a=0,b=0,c=[],d=null,e=null,f=null;for(a=0;a<this.cards.length;++a)if(this.cards[a]&&this.cards[a].value>0)for(d=gs.getCardKeywords(this.cards[a]),e=gs.getCardTitle(this.cards[a]),e&&c.indexOf(e.toLowerCase())<0&&c.push(e.toLowerCase()),d=d?d.split(","):null,b=0;d&&b<d.length;++b)f=d[b].replace(" ","").toLowerCase(),c.indexOf(f)<0&&(gs.isNicheIdentifier(f)||c.push(f));return c.length},bd.niche.prototype.getCardAt=function(a,b){var c=null,d=0;for(assert(a.iCard>=0&&a.iCard<this.cards.length,"getCardAt: invalid card index!"),d=a.iCard;d<this.cards.length;++d)if(this.cards[d]){c=this.cards[d],a.iCard=d+1;break}return(!c||a.iCard>=this.cards.length)&&(a.iCard=-1),c},bd.niche.prototype.setTopLeft=function(a,b){this.topRow=a,this.leftCol=b},bd.niche.prototype.hasOrganismAtRank=function(a){return assert(a>=0&&a<this.cards.length,"hasOrganismAtRank: invalid rank!"),null!==this.cards[a]},bd.niche.prototype.scoreOrganismsAboveRank=function(a,b,c){var d=0,e=0;for(d=a+1;d<this.cards.length;++d)this.cards[d]&&gs.getCardTitle(this.cards[d]).toLowerCase()===b&&(c&&!gs.cardHasKeyword(this.cards[d],c)||(e+=1)),this.cards[d]&&(e+=1);return e},bd.niche.prototype.getOrganismRank=function(a,b){var c=-1,d=0;for(a=a.toLowerCase(),b=b?b.toLowerCase():null,d=0;d<this.cards.length;++d)if(this.cards[d]&&gs.getCardTitle(this.cards[d]).toLowerCase()===a&&(!b||gs.getCardKeywords(this.cards[d]).toLowerCase().indexOf(b)>=0)){c=d;break}return c},bd.niche.prototype.getRankOfFirstHole=function(){var a=-1,b=0;for(b=0;b<this.cards.length;++b)if(!this.cards[b]){a=b;break}return a},bd.niche.prototype.getValueOfFirstHole=function(){var a=-1;this.getRankOfFirstHole();return rank>=0&&(a=0===rank?0:this.cards[rank-1]?gs.getCardValue(this.cards[rank-1])+1:-1),a},bd.niche.prototype.getSuitOfFirstHole=function(){var a=this.getRankOfFirstHole(),b=null;return this.cards[0]&&(a+=gs.getCardValue(this.cards[0])),a<gs.WILD_CARD_VALUE&&(b=gs.getCardSuitFromValue(a)),b},bd.niche.prototype.isLast=function(){return this.biome.isLastNiche(this)},bd.niche.prototype.isFirst=function(){return this.biome.isFirstNiche(this)},bd.niche.prototype.getNextCard=function(a){var b=this.getRankForCard(a),c=null;return b>=0&&b<this.cards.length&&(c=this.cards[b+1]),c},bd.niche.prototype.getCurrentPopulationCount=function(){var a=0,b=0;for(a=0;a<this.cards.length;++a)this.cards[a]&&++b;return b},bd.niche.prototype.reset=function(){var a=0;for(a=0;a<this.cards.length;++a)this.cards[a]&&gs.eraseCard(this.cards[a]),this.cards[a]=null},bd.niche.prototype.getMaxPopulationCount=function(){return this.MAX_RANK+1},bd.niche.prototype.getRankForCard=function(a){var b=-1,c=0;for(c=0;c<this.cards.length;++c)if(this.cards[c]===a){b=c;break}return assert(b>=0&&b<this.cards.length,"getRankForCard: invalid rank!"),b},bd.niche.prototype.getRankForNewCard=function(a){var b=0,c=-1,d=gs.isCardPlantInsectOrNematode(a)?0:gs.getCardValue(a),e=this.cards.length-1-(this.cards[0]?gs.getCardValue(this.cards[0]):0);if(gs.isCardWild(a))for(e=gs.WILD_CARD_VALUE-1,b=1;b<=e&&(d=b,this.cards[0]&&(d-=gs.getCardValue(this.cards[0])),c=this.isRankOpenAndSupported(a,d),!(c>=0));++b);else this.cards[0]&&(d-=gs.getCardValue(this.cards[0])),c=this.isRankOpenAndSupported(a,d);return c},bd.niche.prototype.isRankOpenAndSupported=function(a,b){var c=[],d=-1;return this.cards[b]?d=this.ERR_INVALID_PLACEMENT:this.isCardSupported(a,c,b)&&(d=b),d},bd.niche.prototype.canHoldCard=function(a){return this.getRankForNewCard(a)>=0},bd.niche.prototype.getBiomeId=function(){return gs.getBiomeId(this.biome)},bd.niche.prototype.getId=function(){var a=-1;return this.biome&&(a=this.biome.getNicheId(this)),a},bd.niche.prototype.recordPopulations=function(a){var b=0,c=null;for(b=0;b<this.cards.length;++b)this.cards[b]&&(c=gs.getCardTitle(this.cards[b]),c&&(c=c.toLowerCase(),a.hasOwnProperty(c)&&(a[c]+=1)))},bd.niche.prototype.getTopRow=function(){return this.topRow},bd.niche.prototype.getLeftCol=function(){return this.leftCol},bd.niche.prototype.showNextCardHint=function(){var a=this.getSuitOfFirstHole(),b=(this.leftCol+.5)*TILE_SIZE,c=(this.topRow+.5+this.getRankOfFirstHole())*TILE_SIZE;a?(this.text.x=Math.floor(uim.worldToUiX(b)),this.text.y=Math.floor(uim.worldToUiY(c)),this.text.text=a,this.text.visible=!0):this.text.visible=!1},bd.niche.prototype.hideCardHint=function(){this.text.visible=!1},bd.niche.prototype.isProtected=function(a){var b=null,c=null,d=!1;return assert(a,"isProtected: invalid card!"),gs.cardTitleIs(a,"plantae")&&(b=this.prev(),c=b?b.cardAtRank(this.getRankForCard(a)):null,d=c&&gs.cardTitleIs(c,"insecta")),d},bd.niche.prototype.tagCardsOfTypeForDestruction=function(a,b,c){var d=0;for(a=a.toLowerCase(),d=0;d<this.cards.length;++d)this.cards[d]&&gs.getCardTitle(this.cards[d]).toLowerCase()===a&&(!b||gs.getCardKeywords(this.cards[d]).toLowerCase().indexOf(b)>=0)&&(this.isProtected(this.cards[d])||c.push(this.cards[d]))},bd.niche.prototype.tagCardsForDisplacement=function(a){var b=0,c=[],d=null;for(b=0;b<this.cards.length;++b)c.length=0,this.cards[b]&&(this.isCardSupported(this.cards[b],c)?(d=gs.getCardCoCard(this.cards[b]),d&&gs.cardHasKeyword(d,"angiosperm")&&(assert(1===b,"tagCardsForDisplacement: found angiosperm coCard outside rank 1!"),assert(null===this.cards[0],"tagCardsForDisplacement: angiosperm replacement blocked!"),gs.setCardCoCard(this.cards[b],null),gs.populateNiche(d,this),broadcast("angiospermRepopulated",d))):a.push(this.cards[b]))},bd.niche.prototype.displaceCard=function(a){this.removeCard(this.cards[i],!1)},bd.niche.prototype.removeCard=function(a,b){var c=-1;assert(a,"removeCard: invalid card!"),gs.unlogCard(a),b?(gs.onCardDestroyed(a),broadcast("cardDestroyed",a)):(gs.onCardDisplaced(a),broadcast("cardDisplaced",a)),gs.eraseCard(a),gs.cardResetSuitAndValue(a),c=this.getRankForCard(a),this.cards[c]=null,gs.setCardNiche(a,null)},bd.niche.prototype.addToCardLog=function(a){var b=0;for(b=0;b<this.cards.length;++b)this.cards[b]&&a.push(this.cards[b].id+"~"+this.getBiomeId()+"~"+this.getId())},bd.niche.prototype.isCardSupported=function(a,b,c){var d=!1,e=null,f=null;return"undefined"==typeof c&&(c=this.getRankForCard(a)),b.push(a),d=0===c,d||(e=this.cardAtRank(c-1),e&&b.indexOf(e)<0&&(d=this.isCardSupported(e,b))),d||(gs.cardHasKeyword(a,"symbiote")&&(f=this.prev(),f&&(e=f.cardAtRank(c),e&&b.indexOf(e)<0&&(d=f.isCardSupported(e,b)))),d||(f=this.next(),f&&(e=f.cardAtRank(c),e&&gs.cardHasKeyword(e,"symbiote")&&b.indexOf(e)<0&&(d=f.isCardSupported(e,b))))),d},bd.niche.prototype.addCard=function(a){var e=this.getRankForNewCard(a);assert(e>=0,"addCard: niche cannot hold card!"),gs.setCardNiche(a,this),this.cards[e]=a,this.text.visible=!1,gs.executeCardSpecialFunction(a,"onPlayed")},bd.niche.prototype.next=function(){return assert(this.biome,"niche.next: invalid biome!"),this.biome.getNextNiche(this)},bd.niche.prototype.prev=function(){return assert(this.biome,"niche.prev: invalid biome!"),this.biome.getPrevNiche(this)},bd.niche.prototype.cardAtRank=function(a){return this.cards&&a<this.cards.length?this.cards[a]:null},bd.niche.prototype.setBiome=function(a){this.biome=a},bd.niche.prototype.getBiome=function(){return this.biome},bd.niche.prototype.setCursor=function(a){var b=this.leftCol*TILE_SIZE,c=this.topRow*TILE_SIZE;uim.setCursor(b,c,this)},tm={copyListToList:function(a,b,c){var d=0;for(assert(a&&b,"copyListToList: invalid list!"),c&&(b.length=0),d=0;d<a.length;++d)b.push(a[d])},scrambleList:function(a){var b=0,c=0,d=null;for(b=0;a&&b<a.length;++b)c=Math.floor(Math.random()*(a.length-b)),c!==b&&(d=a[b],a[b]=a[c],a[c]=d)},listsExclusive:function(a,b){var c=!0,d=0,e=0;for(d=0;d<a.length;++d)for(e=0;e<b.length;++e)if(a[d]===b[e]){c=!1;break}return c},listNullAndMoveToBack:function(a,b,c){var d=0;for(d=0;d<a.length;++d)if(a[d]===b){this.listReplaceWithLastNonNull(a,d);break}},listDeleteElement:function(a,b){var c=0;if(c=a.indexOf(b),c>=0){for(;c<a.length-1;++c)a[c]=a[c+1];a.length=a.length-1}},listReplaceWithLastNonNull:function(a,b,c){var d=!1,e=-1;if(a&&b<a.length){for(e=a.length-1;e>b&&!a[e];--e);e>b?(a[b]=a[e],a[e]=null,d=!0):(a[b]=null,d=!0),c&&this.trimList(a)}return d},trimList:function(a){var b=0;for(assert(a,"terminateListAtFirstNull: invalid list!"),b=0;b<a.length;++b)if(!a[b]){a.length=b;break}},numberListFindMaxima:function(a,b){var c=0,d=Number.NEGATIVE_INFINITY;for(assert(a,"numberListFindMaxima: invalid list!"),c=0;c<a.length;++c)assert(typeof("number"==a[c]),"numberListFindMaxima: found non-numerical data!"),a[c]>d&&(d=a[c]);for(c=0;c<a.length;++c)a[c]===d&&b.push(c)},numberListFindMaxValue:function(a){var b=0,c=Number.NEGATIVE_INFINITY;for(assert(a,"numberListFindMaxValue: invalid list!"),b=0;b<a.length;++b)assert("number"==typeof a[b],"numberListFindMaxValue: found non-numerical data!"),a[b]>c&&(c=a[b]);return c},listReturnRandomElement:function(a){return assert(a,"listReturnRandomElement: invalid list!"),a[Math.floor(Math.random()*a.length)]},getTileAt:function(a,b,c){return a.map.getTile(c,b)},addTilesToLayer:function(a,b,c,d,e){var f=null,g=-1,h=null;return a&&a.map&&(f=a.map.tilesets[a.map.getTilesetIndex(b)].image,f&&("number"==typeof c?(g=Math.floor(f.width/a.map.tileWidth),a.map.putTile(c,e,d,a)):(g=Math.floor(f.width/a.map.tileWidth),a.map.putTile(c.row*g+c.col,e,d,a)),h=a.map.getTile(e,d,a))),h},removeTileFromLayer:function(a,b,c){var d=null;return a&&a.map&&(a.map.putTile(null,c,b,a),d=a.map.getTile(c,b,a)),d},sortListHighToLow:function(a){var b=0,c=0,d=0;for(assert(a&&a.length,"sortListHighToLow: invalid list!"),b=0;b<a.length-1;++b)for(c=b+1;c<a.length;++c)a[c]>a[b]&&(d=a[c],a[c]=a[b],a[b]=d)}},uim={FRAME_MARGIN:{X:7,Y:7},INFO_TITLE_SIZE:24,TITLE_SIZE:33,VALUE_SIZE:33,KEYWORD_SIZE:19,BANNER_WIDTH_FACTOR:25,VALUE_WIDTH_NUM:19,VALUE_WIDTH_DENOM:20,KEYWORDS_NUM:2,KEYWORDS_DENOM:5,SPECIAL_HEIGHT_NUM:2,SPECIAL_HEIGHT_DENOM:3,TWEEN_TIME:333,EVENT_TWEEN_TIME:999,NUM_BANNERS:5,BANNER_MARGIN:120,BANNER_SPACING:27,SLIDE_IN_DELAY:50,FRAME_BOTTOM_MARGIN:{X:8,Y:304},TOP_TITLE_SIZE:60,BOTTOM_TITLE_SIZE:150,INFO_TEXT_SIZE:20,INFO_TEXT_SPACING:4,HINT_TEXT_SIZE:32,MAX_CURSORS:29,WIGGLE_FACTOR:3,HINT_WIDTH:12,EVENT_MARGIN:14,INFO_BORDER_SIZE:10,EVENT_EXPAND_TIME:499,EVENT_INFO_SCALE_SMALL:1e-5,EVENT_ALPHA_TIME:333,INFO_TWEEN_TIME:499,INFO_EXPAND_TIME:333,INFO_INFO_SCALE_SMALL:1e-5,INFO_ALPHA_TIME:333,MIN_OPERATION_DELAY:100,UI_BANNER_INDEX:1,GET_FROM_FUNCTION:-1,NOOP:-99,INFO_TEXT_MARGIN:12,VALUE_OFFSET_X:24,VALUE_OFFSET_Y:18,INFO_DLG_FUDGE_Y:3,TITLE_SCALAR:.8,REPORT_COLORS:[17578,4476950,11175936,5066061],group:null,buttonGroup:null,infoGroup:null,reportGroup:null,frameRight:null,frameTop:null,groupBottomFrame:null,titleGroup:null,infoText:{currentLine:-1,lines:[]},banners:[],cursors:[],showingCards:[],cursorGroup:null,hint:{group:null,sprite:null,text:null},cardHintGroup:null,bInputBlocked:!1,lastOp:null,topTitleText:null,bottomTitleText:null,eventShield:null,eventInfo:null,eventMarker:null,eventTitle:null,eventText:null,eventPrompt:null,infoDlgMarker:null,infoDlgPanel:null,infoDlgShield:null,infoDlgTitle:null,infoDlgText:null,infoDlgPrompt:null,eventReport:null,beforeResults:{aves:0,reptilia:0,amphibia:0,mammalia:0},afterResults:{aves:0,reptilia:0,amphibia:0,mammalia:0},textBefore:{aves:null,reptilia:null,amphibia:null,mammalia:null},textAfter:{aves:null,reptilia:null,amphibia:null,mammalia:null},eventGfx:null,questionText:null,focusWidget:null,raiseGroups:function(){gs.baseLayers.objects.bringToTop(),gs.baseLayers.ui.bringToTop(),game.world.bringToTop(this.helperGroup),game.world.bringToTop(this.buttonGroup),gs.baseLayers.walls.bringToTop(),game.world.bringToTop(this.group),game.world.bringToTop(this.hint.group),game.world.bringToTop(this.cardHintGroup),game.world.bringToTop(this.infoGroup),game.world.bringToTop(this.titleGroup),game.world.bringToTop(this.reportGroup)},closeEventReport:function(){this.hideEventReport(),gs.playSound(gs.sounds.dialogClose),broadcast("eventReportClosed")},createEventReport:function(){var a=null,b=0;gs.computePopulationsPerFamily(),this.reportGroup=game.add.group(),this.eventReport=this.reportGroup.create(game.width/2,game.height/2,"eventResults"),this.eventReport.anchor.setTo(.5,.5),this.eventGfx=game.add.graphics(500,310),this.eventGfx.pivot.x=237,this.eventGfx.pivot.y=162,this.reportGroup.addChild(this.eventGfx),this.eventReport.inputEnabled=!0,this.eventReport.events.onInputDown.add(this.closeEventReport,this),uim.textBefore.aves=game.add.bitmapText(0,20,"bogboo","",uim.INFO_TEXT_SIZE),uim.textBefore.reptilia=game.add.bitmapText(0,20,"bogboo","",uim.INFO_TEXT_SIZE),uim.textBefore.amphibia=game.add.bitmapText(0,20,"bogboo","",uim.INFO_TEXT_SIZE),uim.textBefore.mammalia=game.add.bitmapText(0,20,"bogboo","",uim.INFO_TEXT_SIZE),this.eventGfx.addChild(uim.textBefore.aves),this.eventGfx.addChild(uim.textBefore.reptilia),this.eventGfx.addChild(uim.textBefore.amphibia),this.eventGfx.addChild(uim.textBefore.mammalia),b=0;for(a in uim.textBefore)uim.textBefore[a].anchor.setTo(.5,1),uim.textBefore[a].x=32+60*b,b+=1;uim.textAfter.aves=game.add.bitmapText(0,20,"bogboo","",uim.INFO_TEXT_SIZE),uim.textAfter.reptilia=game.add.bitmapText(0,20,"bogboo","",uim.INFO_TEXT_SIZE),uim.textAfter.amphibia=game.add.bitmapText(0,20,"bogboo","",uim.INFO_TEXT_SIZE),uim.textAfter.mammalia=game.add.bitmapText(0,20,"bogboo","",uim.INFO_TEXT_SIZE),this.eventGfx.addChild(uim.textAfter.aves),this.eventGfx.addChild(uim.textAfter.reptilia),this.eventGfx.addChild(uim.textAfter.amphibia),this.eventGfx.addChild(uim.textAfter.mammalia),b=0;for(a in uim.textAfter)uim.textAfter[a].anchor.setTo(.5,1),uim.textAfter[a].x=290+60*b,b+=1;uim.questionText=game.add.bitmapText(0,0,"bogboo","A question goes here to prompt\nplayers to think about how\nbest to optimize play.",uim.HINT_TEXT_SIZE),this.eventGfx.addChild(uim.questionText),this.questionText.x=20,this.questionText.y=430,this.hideEventReport()},setCurrentEventQuestion:function(a){this.questionText.text=a},showEventReport:function(){uim.setLeftHint(""),this.reportGroup.visible=!0,this.eventReport.inputEnabled=!0,gs.playSound(gs.sounds.reportOpen)},hideEventReport:function(){this.reportGroup.visible=!1,this.eventReport.inputEnabled=!1},drawReportBarGraph:function(a,b,c,d,e){var f=Math.round(307*d/e);this.eventGfx.beginFill(a),this.eventGfx.drawRect(b,1+(307-f),58,f),this.eventGfx.endFill(),c.y=307-f+uim.INFO_TEXT_SIZE,c.y=Math.min(c.y,307),c.text=""+d},keyIndex:0,keyTimer:0,DEBUGrenderEventReport:function(){var a=Object.keys(strings.EVENTS);this.keyTimer+=game.time.physicsElapsedMS,this.keyTimer>2e3&&(this.keyTimer-=2e3,this.keyIndex+=1,this.keyIndex=this.keyIndex%a.length),strings.EVENTS[a[this.keyIndex]].hasOwnProperty("question")?this.setCurrentEventQuestion(strings.EVENTS[a[this.keyIndex]].question):this.keyTimer+=2e3},renderEventReport:function(a,b){var c=gs.getPopulationsPerFamily(),d=0,e=null;this.eventGfx.clear(),d=0;for(e in a)assert(uim.textBefore.hasOwnProperty(e),"renderEventReport: invalid population key (before)!"),this.drawReportBarGraph(uim.REPORT_COLORS[d],2+60*d,uim.textBefore[e],a[e],c),++d;d=0;for(e in b)assert(uim.textAfter.hasOwnProperty(e),"renderEventReport: invalid population key (after)!"),this.drawReportBarGraph(uim.REPORT_COLORS[d],260+60*d,uim.textAfter[e],b[e],c),++d},createHints:function(){this.cardHintGroup=game.add.group(),this.hint.group=game.add.group(),this.hint.sprite=this.hint.group.create(0,Math.round(TILE_SIZE/3),"ui_specials"),this.hint.sprite.animations.add("point",[1],1,!1),this.hint.sprite.animations.play("point"),this.hint.sprite.scale.x=gs.SPRITE_SCALE,this.hint.sprite.scale.y=gs.SPRITE_SCALE,this.hint.sprite.visible=!1,this.hint.text=game.add.bitmapText(0,uim.HINT_TEXT_SIZE/2,"bogboo","",uim.HINT_TEXT_SIZE),this.hint.text.visible=!1,this.hint.group.addChild(this.hint.text)},addToCardHintGroup:function(a){this.cardHintGroup.addChild(a)},leftHintCenter:function(){return Math.round(this.HINT_WIDTH*TILE_SIZE*gs.SPRITE_SCALE/2)},rightHintCenter:function(){return Math.round(this.HINT_WIDTH*TILE_SIZE*gs.SPRITE_SCALE+(game.width-this.HINT_WIDTH*TILE_SIZE*gs.SPRITE_SCALE)/2)},setLeftHint:function(a){a?(this.hint.text.text=a,this.hint.sprite.x=this.hint.text.width,this.hint.group.x=Math.round(this.leftHintCenter()-(this.hint.text.width/2+TILE_SIZE*gs.SPRITE_SCALE/2)),this.hint.text.visible=!0,this.hint.sprite.visible=!0):this.hideHint()},setRightHint:function(a){a?(this.hint.text.text=a,this.hint.sprite.x=this.hint.text.width,this.hint.group.x=Math.round(this.rightHintCenter()-(this.hint.text.width/2+TILE_SIZE*gs.SPRITE_SCALE/2)),this.hint.text.visible=!0,this.hint.sprite.visible=!0):this.hideHint()},release:function(){var a=null;this.focusWidget&&(a=this.focusWidget.banner.getData(),a&&this.clearFocusBanner()),a&&"function"==typeof a&&a(this)},hideHint:function(){this.hint.text.visible=!1,this.hint.sprite.visible=!1},createCursors:function(){var a=0,b=null;for(this.cursorGroup=game.add.group(),a=0;a<this.MAX_CURSORS;++a)b=this.cursorGroup.create(0,0,"cursor"),b.animations.add("pulse",[0,1,2,3,4,5,4,3,2,1],10,!0),b.scale.setTo(gs.SPRITE_SCALE,gs.SPRITE_SCALE),b.kill()},createInfoDialog:function(){this.infoDlgMarker=this.infoGroup.create(0,0),this.infoDlgShield=this.infoGroup.create(0,0,"infoShield"),this.infoDlgPanel=this.infoGroup.create(0,0,"infoPanel"),this.infoDlgMarker.x=this.EVENT_MARGIN*TILE_SIZE+this.infoDlgShield.width+TILE_SIZE*gs.SPRITE_SCALE/2,this.infoDlgMarker.y=-this.infoDlgShield.height,this.infoDlgMarker.anchor.setTo(0,0),this.infoDlgMarker.visible=!1,this.infoDlgMarker.data={},this.infoDlgMarker.data.tweenOut=game.add.tween(this.infoDlgMarker).to({x:this.infoDlgMarker.x,y:-this.infoDlgShield.height},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.In,!1),this.infoDlgMarker.data.tweenIn=game.add.tween(this.infoDlgMarker).to({x:this.infoDlgMarker.x,y:game.height/2-this.infoDlgShield.height/2},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.Out,!1),this.infoDlgPanel.x=this.infoDlgShield.width/2,this.infoDlgPanel.y=0,this.infoDlgPanel.anchor.setTo(0,0),this.infoDlgPanel.data.tweenOut=game.tweens.create(this.infoDlgPanel.scale),this.infoDlgPanel.data.tweenOut.to({x:1,y:1},uim.INFO_EXPAND_TIME,Phaser.Easing.Cubic.InOut),this.infoDlgPanel.data.tweenOut.onComplete.add(this.revealInfoText,this),this.infoDlgPanel.data.tweenBack=game.tweens.create(this.infoDlgPanel.scale),this.infoDlgPanel.data.tweenBack.to({x:this.INFO_INFO_SCALE_SMALL,y:1},uim.INFO_EXPAND_TIME,Phaser.Easing.Cubic.InOut),this.infoDlgPanel.data.tweenBack.onComplete.add(this.hideInfoText,this),this.infoDlgMarker.addChild(this.infoDlgPanel),this.infoDlgShield.anchor.setTo(0,0),this.infoDlgMarker.addChild(this.infoDlgShield),this.infoDlgMarker.data.tweenOut.onComplete.add(this.onInfoDialogOut,this),this.infoDlgMarker.data.tweenIn.onComplete.add(this.onInfoDialogIn,this),this.infoDlgTitle=game.add.bitmapText(this.infoDlgPanel.width/2,uim.INFO_TITLE_SIZE/2,"bogboo","Event Title",Math.floor(uim.TITLE_SIZE*uim.TITLE_SCALAR)),this.infoDlgTitle.x=Math.round(this.infoDlgTitle.x),this.infoDlgTitle.y=Math.floor(this.infoDlgTitle.y),this.infoDlgText=game.add.bitmapText(this.infoDlgPanel.width/2,Math.floor(1*this.infoDlgPanel.height/5+uim.TITLE_SIZE/2),"smallbogboo","Event Info",uim.INFO_TEXT_SIZE),this.infoDlgText.x=Math.round(this.infoDlgText.x),this.infoDlgText.y=Math.round(this.infoDlgText.y)-uim.INFO_DLG_FUDGE_Y,this.infoDlgPrompt=game.add.bitmapText(this.infoDlgPanel.width/2,this.infoDlgPanel.height-uim.INFO_TEXT_SIZE,"smallbogboo",strings.EVENTS.PROMPT,3*uim.INFO_TEXT_SIZE/4),this.infoDlgPrompt.x=Math.round(this.infoDlgPrompt.x),this.infoDlgPrompt.y=Math.floor(this.infoDlgPrompt.y)-uim.INFO_DLG_FUDGE_Y,this.infoDlgPanel.addChild(this.infoDlgTitle),this.infoDlgPanel.addChild(this.infoDlgText),this.infoDlgPanel.addChild(this.infoDlgPrompt),this.infoDlgTitle.anchor.setTo(.5,0),this.infoDlgText.anchor.setTo(.5,0),this.infoDlgPrompt.anchor.setTo(.5,0),this.infoDlgTitle.alpha=0,this.infoDlgText.alpha=0,this.infoDlgPrompt.alpha=0,this.infoDlgShield.events.onInputDown.add(this.onInfoPanelClicked,this),this.infoDlgPanel.events.onInputDown.add(this.onInfoPanelClicked,this),this.infoDlgShield.enableInput=!1,this.infoDlgPanel.enableInput=!1,this.infoDlgTitle.tweenIn=game.add.tween(this.infoDlgTitle).to({alpha:1},uim.INFO_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.infoDlgText.tweenIn=game.add.tween(this.infoDlgText).to({
alpha:1},uim.INFO_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.infoDlgPrompt.tweenIn=game.add.tween(this.infoDlgPrompt).to({alpha:1},uim.INFO_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.infoDlgText.tweenIn.onComplete.add(this.onInfoRevealed,this),this.infoDlgTitle.tweenOut=game.add.tween(this.infoDlgTitle).to({alpha:0},uim.INFO_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.infoDlgText.tweenOut=game.add.tween(this.infoDlgText).to({alpha:0},uim.INFO_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.infoDlgPrompt.tweenOut=game.add.tween(this.infoDlgPrompt).to({alpha:0},uim.INFO_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.infoDlgPanel.scale.setTo(uim.INFO_INFO_SCALE_SMALL,1),this.infoDlgMarker.bringToTop()},showInfoDialog:function(a,b,c){c?sm.setTransitionState("showInfoDialog",c,{title:a,text:b}):pushState(sm.showInfoDialog,{title:a,text:b}),uim.setLeftHint(""),gs.playSound(gs.sounds.info)},startInfoDialog:function(a,b){this.infoDlgTitle.text=a,this.infoDlgText.text=b,this.infoDlgMarker.visible=!0,this.infoDlgTitle.visible=!0,this.infoDlgTitle.alpha=0,this.infoDlgText.visible=!0,this.infoDlgText.alpha=0,this.infoDlgPrompt.visible=!0,this.infoDlgPrompt.alpha=0,this.infoDlgMarker.data.tweenIn.start()},showInfoPrompt:function(){this.infoDlgPrompt.tweenIn.start()},onInfoDialogIn:function(){this.infoDlgPanel.data.tweenOut.start()},revealInfoText:function(){this.infoDlgTitle.tweenIn.start(),this.infoDlgText.tweenIn.start(),gs.playSound(gs.sounds.infoReveal)},hideInfoText:function(){this.infoDlgMarker.data.tweenOut.start(),broadcast("hideInfoText")},onInfoDialogOut:function(){this.infoDlgTitle.visible=!1,this.infoDlgText.visible=!1,this.infoDlgPrompt.visible=!1,this.infoDlgMarker.visible=!1,broadcast("infoDialogOut")},onInfoRevealed:function(){this.infoDlgShield.inputEnabled=!0,this.infoDlgPanel.inputEnabled=!0},onInfoPanelClicked:function(){this.infoDlgShield.inputEnabled=!1,this.infoDlgPanel.inputEnabled=!1,this.infoDlgTitle.tweenIn.stop(),this.infoDlgText.tweenIn.stop(),this.infoDlgPrompt.tweenIn.stop(),this.infoDlgTitle.tweenOut.start(),this.infoDlgText.tweenOut.start(),this.infoDlgPrompt.tweenOut.start(),gs.playSound(gs.sounds.dialogClose),this.infoDlgPanel.data.tweenBack.start()},createEvents:function(){this.eventMarker=this.infoGroup.create(0,0),this.eventShield=this.infoGroup.create(0,0,"eventMarker"),this.eventInfo=this.infoGroup.create(0,0,"eventInfo"),this.eventMarker.x=this.EVENT_MARGIN*TILE_SIZE+this.eventShield.width+TILE_SIZE*gs.SPRITE_SCALE/2,this.eventMarker.y=-this.eventShield.height,this.eventMarker.anchor.setTo(0,0),this.eventMarker.visible=!1,this.eventMarker.data={},this.eventMarker.data.tweenOut=game.add.tween(this.eventMarker).to({x:this.eventMarker.x,y:-this.eventShield.height},uim.EVENT_TWEEN_TIME,Phaser.Easing.Cubic.In,!1),this.eventMarker.data.tweenIn=game.add.tween(this.eventMarker).to({x:this.eventMarker.x,y:game.height-this.eventShield.height},uim.EVENT_TWEEN_TIME,Phaser.Easing.Cubic.Out,!1),this.eventMarker.data.tweenToBiome=game.add.tween(this.eventMarker).to({x:this.eventMarker.x,y:0},uim.EVENT_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.eventMarker.data.tweenFromBiome=game.add.tween(this.eventMarker).to({x:this.eventMarker.x,y:0},uim.EVENT_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.eventInfo.x=this.eventShield.width/2,this.eventInfo.y=0,this.eventInfo.anchor.setTo(0,0),this.eventInfo.data.tweenOut=game.tweens.create(this.eventInfo.scale),this.eventInfo.data.tweenOut.to({x:1,y:1},uim.EVENT_EXPAND_TIME,Phaser.Easing.Cubic.InOut),this.eventInfo.data.tweenOut.onComplete.add(this.revealEventText,this),this.eventInfo.data.tweenBack=game.tweens.create(this.eventInfo.scale),this.eventInfo.data.tweenBack.to({x:this.EVENT_INFO_SCALE_SMALL,y:1},uim.EVENT_EXPAND_TIME,Phaser.Easing.Cubic.InOut),this.eventInfo.data.tweenBack.onComplete.add(this.hideEventText,this),this.eventMarker.addChild(this.eventInfo),this.eventShield.anchor.setTo(0,0),this.eventMarker.addChild(this.eventShield),this.eventMarker.data.tweenOut.onComplete.add(this.onEventOff,this),this.eventMarker.data.tweenIn.onComplete.add(this.onEventIn,this),this.eventMarker.data.tweenToBiome.onComplete.add(this.onEventArrived,this),this.eventMarker.data.tweenFromBiome.onComplete.add(this.onEventExited,this),this.eventTitle=game.add.bitmapText(this.eventInfo.width,uim.TITLE_SIZE/2,"bogboo","Event Title",Math.floor(uim.TITLE_SIZE*uim.TITLE_SCALAR)),this.eventText=game.add.bitmapText(this.eventInfo.width,1*this.eventInfo.height/4+uim.TITLE_SIZE/2,"smallbogboo","Event Info",uim.INFO_TEXT_SIZE),this.eventPrompt=game.add.bitmapText(this.eventInfo.width,this.eventInfo.height-uim.TITLE_SIZE,"smallbogboo",strings.EVENTS.PROMPT,3*uim.INFO_TEXT_SIZE/4),this.eventInfo.addChild(this.eventTitle),this.eventInfo.addChild(this.eventText),this.eventInfo.addChild(this.eventPrompt),this.eventTitle.anchor.setTo(.5,0),this.eventText.anchor.setTo(.5,0),this.eventPrompt.anchor.setTo(.5,0),this.eventTitle.alpha=0,this.eventText.alpha=0,this.eventPrompt.alpha=0,this.eventTitle.y-=2,this.eventText.y-=4,this.eventPrompt.y+=10,this.eventShield.events.onInputDown.add(this.onEventInfoClicked,this),this.eventInfo.events.onInputDown.add(this.onEventInfoClicked,this),this.eventShield.enableInput=!1,this.eventInfo.enableInput=!1,this.eventTitle.tweenIn=game.add.tween(this.eventTitle).to({alpha:1},uim.EVENT_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.eventText.tweenIn=game.add.tween(this.eventText).to({alpha:1},uim.EVENT_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.eventPrompt.tweenIn=game.add.tween(this.eventPrompt).to({alpha:1},uim.EVENT_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.eventText.tweenIn.onComplete.add(this.onEventRevealed,this),this.eventTitle.tweenOut=game.add.tween(this.eventTitle).to({alpha:0},uim.EVENT_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.eventText.tweenOut=game.add.tween(this.eventText).to({alpha:0},uim.EVENT_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.eventPrompt.tweenOut=game.add.tween(this.eventPrompt).to({alpha:0},uim.EVENT_ALPHA_TIME,Phaser.Easing.Cubic.InOut),this.eventInfo.scale.setTo(uim.EVENT_INFO_SCALE_SMALL,1)},alignEventText:function(){var a=0;this.eventTitle.x=(this.eventInfo.width-a)/2+a,this.eventText.x=this.eventTitle.x,this.eventPrompt.x=this.eventTitle.x},showEvent:function(a,b,c){var d=a?a.getY()+TILE_SIZE/2*gs.SPRITE_SCALE:game.height/2-this.eventShield.height/2,e=uim.EVENT_TWEEN_TIME*Math.abs(d-(game.height-this.eventShield.height))/game.height;uim.setLeftHint(""),gs.playSound(gs.sounds.event),this.eventMarker.y=-this.eventShield.height,this.eventTitle.text=b,this.eventText.text=c,this.eventMarker.data.tweenToBiome.updateTweenData("vEnd",{y:d}),this.eventMarker.data.tweenToBiome.updateTweenData("duration",e),this.eventMarker.data.tweenIn.start(),this.eventMarker.visible=!0},onEventRevealed:function(){this.eventShield.inputEnabled=!0,this.eventInfo.inputEnabled=!0,broadcast("eventArrived")},revealEventText:function(){this.alignEventText(),this.eventTitle.tweenIn.start(),this.eventText.tweenIn.start(),this.eventPrompt.tweenIn.start(),gs.playSound(gs.sounds.eventReveal)},onEventOff:function(){},onEventIn:function(){this.eventMarker.data.tweenToBiome.start()},onEventArrived:function(){this.eventInfo.data.tweenOut.start()},onEventInfoClicked:function(){this.eventShield.inputEnabled=!1,this.eventInfo.inputEnabled=!1,this.eventTitle.tweenOut.start(),this.eventText.tweenOut.start(),this.eventPrompt.tweenOut.start(),this.eventInfo.data.tweenBack.start(),gs.playSound(gs.sounds.dialogClose)},hideEventText:function(){var a=uim.EVENT_TWEEN_TIME*Math.abs(-this.eventShield.height-this.eventMarker.y)/game.height;this.eventMarker.data.tweenFromBiome.updateTweenData("vEnd",{y:-this.eventShield.height}),this.eventMarker.data.tweenFromBiome.updateTweenData("duration",a),this.eventMarker.data.tweenFromBiome.start()},onEventExited:function(){this.eventMarker.visible=!1,broadcast("eventExited")},blockInput:function(){uim.bInputBlocked=!0},unblockInput:function(){uim.bInputBlocked=!1},inputBlocked:function(){return uim.bInputBlocked||uim.reportGroup.visible},worldToUiX:function(a){return Math.round(a*gs.SPRITE_SCALE-gs.getOffsetX()+2*TILE_SIZE*gs.SPRITE_SCALE-5)},worldToUiY:function(a){return Math.round(a*gs.SPRITE_SCALE-gs.getOffsetY()-.6*TILE_SIZE*gs.SPRITE_SCALE)},UiToWorldX:function(a){return Math.round((a+gs.getOffsetX()-2*TILE_SIZE*gs.SPRITE_SCALE+5)/gs.SPRITE_SCALE)},UiToWorldY:function(a){return Math.round((a+gs.getOffsetY()+.6*TILE_SIZE*gs.SPRITE_SCALE)/gs.SPRITE_SCALE)},setCursor:function(a,b,c){var d=this.cursorGroup.getFirstDead();assert(d,"setCursor: no available cursors!"),d.data=c,d.x=uim.worldToUiX(a),d.y=uim.worldToUiY(b),d.revive(),d.animations.play("pulse")},clearAllCursors:function(){for(var a=this.cursorGroup.getFirstAlive();a;)a.animations.stop(),a.kill(),a=this.cursorGroup.getFirstAlive()},positionRelative:function(a,b,c,d){a&&b&&(b.x=a.x+c,b.y=a.y+d)},onInputUp:function(a,b,c){var d=!1;return this.focusWidget&&sm.isMenuState()&&(this.release(),d=!0),d},setBannerInfo:function(a,b,c,d,e,f){a>=0&&a<this.banners.length&&(this.banners[a].setTitle(b),this.banners[a].setValue(c),this.banners[a].setKeywords(d),this.banners[a].setSpecial(e),this.banners[a].setData(f))},getShowingCards:function(){var a=0;for(this.showingCards.length=0,a=0;a<this.banners.length;++a)this.banners[a].isMovedOut()||this.showingCards.push(this.banners[a].data);return this.showingCards},setFocusBannerInfo:function(a,b,c,d,e){var f=null;this.focusWidget&&uim.focusWidget instanceof uim.button&&(f=uim.focusWidget.banner,f.setTitle(a),f.setValue(b),f.setKeywords(c),f.setSpecial(d),f.setData(e))},setupBanner:function(a,b,c,d){assert(a>=0&&a<this.banners.length,"setupBanner: invalid banner index!"),this.banners[a].setUiTitle(c,gs.bannerStateFromIndex(b)),this.banners[a].setValue(""),this.banners[a].setKeywords(""),this.banners[a].setSpecial(""),this.banners[a].setData(d)},syncBannersToCards:function(){for(var a=0,b=gs.getDrawDeckSize(),c=-1;a<b&&a<this.banners.length;)this.setBannerInfo(a,gs.getDrawDeckType(a),gs.getDrawDeckSuit(a),gs.getDrawDeckKeywords(a),gs.getDrawDeckSpecial(a),gs.getDrawDeckCard(a)),++a;for(c=a,a=a;a<this.banners.length;++a)uim.setBannerInfo(a,"",9,"","",null);return c},moveBannersOut:function(){var a=0,b=null;for(a=0;a<this.banners.length;++a)this.banners[a].data&&(b=function(a){return function(){uim.moveBannerOut(a)}},setTimeout(b(a),uim.SLIDE_IN_DELAY*a));uim.closeAllEggChambers()},moveBannersIn:function(){var a=0,b=null;for(a=0;a<this.banners.length;++a)this.banners[a].data&&(b=function(a){return function(){uim.moveBannerIn(a)}},setTimeout(b(a),uim.SLIDE_IN_DELAY*a))},hideFocusBanner:function(){this.focusWidget instanceof uim.button&&uim.moveBannerOut(this.banners.indexOf(this.focusWidget.banner))},showFocusBanner:function(){this.focusWidget instanceof uim.button&&uim.moveBannerIn(this.banners.indexOf(this.focusWidget.banner))},wiggleFocusBanner:function(){this.focusWidget instanceof uim.button&&uim.wiggleBanner(this.banners.indexOf(this.focusWidget.banner))},wiggleBanners:function(){var a=0,b=null;for(a=0;a<this.banners.length;++a)this.banners[a].data&&(b=function(a){return function(){uim.wiggleBanner(a)}},setTimeout(b(a),uim.SLIDE_IN_DELAY*a))},enableBannerInput:function(){var a=0;for(a=0;a<this.banners.length;++a)this.banners[a].enableInput()},disableBannerInput:function(){var a=0;for(a=0;a<this.banners.length;++a)this.banners[a].disableInput()},moveBannerOut:function(a){a>=0&&a<this.banners.length&&this.banners[a].moveOut()},moveBannerIn:function(a){a>=0&&a<this.banners.length&&this.banners[a].moveIn()},wiggleBanner:function(a){a>=0&&a<this.banners.length&&this.banners[a].wiggle()},button:function(a,b,c,d,e,f,g,h){var i=null;if(this.x=d,this.y=e,this.type="amphibia",this.banner=null,this.state="",a&&b&&c){this.group=game.add.group(),this.group.x=d,this.group.y=e,a.add(this.group),this.sprOff=a.create(0,b.height/2,b);for(i in g)this.sprOff.animations.add(i+"Off",[g[i]],1,!1);this.sprOff.anchor.setTo(0,.5),this.sprOff.revive(0,this.sprOff.height/2),this.sprOff.inputEnabled=!1,this.sprOff.events.onInputDown.add(this.press,this),this.group.add(this.sprOff),this.sprOn=a.create(0,c.height/2,c),this.sprOn.anchor.setTo(0,.5);for(i in g)this.sprOn.animations.add(i+"On",[g[i]],1,!1);this.sprOn.kill(),this.group.add(this.sprOn),this.data=h,this.onPressedCallback=f,this.setState(this.type)}else assert(!1,"Button create failed!")},banner:function(a,b,c,d,e,f,g){var h=null;if(a&&null!==b){this.button=a,this.button.setState(b),this.button.setBanner(this),this.data=g,this.title=game.add.bitmapText(this.button.width(),this.button.height()/2,"bogboo",b,uim.TITLE_SIZE),this.title.anchor.setTo(0,1),this.value=game.add.bitmapText(-uim.VALUE_OFFSET_X,uim.VALUE_OFFSET_Y,"bogboo",""+c,uim.VALUE_SIZE),this.value.anchor.setTo(0,1),this.keywords=game.add.bitmapText(this.button.width(),this.button.height(),"smallbogboo",d,uim.KEYWORD_SIZE),this.keywords.anchor.setTo(0,1),this.button.group.addChild(this.title),this.title.x=this.button.sprOn.width/uim.BANNER_WIDTH_FACTOR,this.title.y=0,this.button.group.addChild(this.value),this.value.x+=uim.VALUE_WIDTH_NUM*this.button.sprOn.width/uim.VALUE_WIDTH_DENOM,this.value.x=Math.round(this.value.x),this.value.y=0,this.value.anchor.setTo(.5,1),this.value.align="center",this.button.group.addChild(this.keywords),this.keywords.x=Math.round(this.button.sprOn.width/uim.BANNER_WIDTH_FACTOR),this.keywords.y=Math.round(this.keywords.height*(1+uim.KEYWORDS_NUM/uim.KEYWORDS_DENOM)),this.special=this.button.group.create(0,0,"ui_specials"),this.special.visible=!1,this.special.anchor.setTo(.5,.5),this.special.x=this.value.x,this.special.y+=uim.SPECIAL_HEIGHT_NUM*this.special.height/uim.SPECIAL_HEIGHT_DENOM;for(h in f)this.special.animations.add(h,[f[h]],1,!1);this.tweenOut=game.add.tween(this.button.group).to({x:-this.button.width()},uim.TWEEN_TIME,Phaser.Easing.Cubic.Out,!1),this.tweenIn=game.add.tween(this.button.group).to({x:TILE_SIZE*gs.SPRITE_SCALE},uim.TWEEN_TIME,Phaser.Easing.Cubic.Out,!1),this.tweenWiggle=game.add.tween(this.button.group).to({x:(-this.button.width()+TILE_SIZE*gs.SPRITE_SCALE)/uim.WIGGLE_FACTOR},uim.TWEEN_TIME/uim.WIGGLE_FACTOR,Phaser.Easing.Cubic.Out,!1),this.tweenWiggle.chain(game.add.tween(this.button.group).to({x:TILE_SIZE*gs.SPRITE_SCALE},uim.TWEEN_TIME/uim.WIGGLE_FACTOR,Phaser.Easing.Cubic.Out,!1)),uim.banners.push(this),this.setMoveOutCallback(uim.onUIopComplete.bind(uim)),this.setMoveInCallback(uim.onUIopComplete.bind(uim)),this.setWiggleCallback(uim.onUIopComplete.bind(uim))}},startOperation:function(a,b,c){var d=!0,e=!1;switch(c||(this.uiOpCounter=0),a){case"moveBannersOut":this.uiOpCounter+=this.getNumBannersWithData();break;case"moveBannerOut":case"moveBannerIn":this.uiOpCounter+=1;break;case"moveBannersIn":case"wiggleBanners":this.uiOpCounter+=this.getNumBannersWithData();break;case"hideFocusBanner":case"showFocusBanner":this.uiOpCounter+=1,d=this.focusWidget;break;case"wiggleFocusBanner":this.uiOpCounter+=1,d=this.focusWidget&&this.focusWidget.banner;break;case"fadeIn":case"fadeOut":e=!0;break;case"turnRingTo":this.uiOpCounter+=1;break;case"turnRingBy":this.uiOpCounter+=1;break;case"blendTo":this.uiOpCounter+=1;break;case"wait":assert(!c,"startOperation: cannot combine 'wait' with additive commands!"),this.uiOpCounter=this.NOOP,setTimeout(function(){broadcast("UIoperationComplete")},b);break;default:d=!1}e||0!==this.uiOpCounter&&this.uiOpCounter!==this.NOOP||(d=!1),d&&this.hasOwnProperty(a)?e?(this.lastOp=a,this.uiOpCounter+=this[a](b)):(this.lastOp=a,this[a](b)):d&&this.helper.hasOwnProperty(a)&&(e?(this.lastOp=a,this.uiOpCounter+=this.helper[a](b)):(this.lastOp=a,this.helper[a](b))),0===this.uiOpCounter&&setTimeout(function(){broadcast("UIoperationComplete")},this.MIN_OPERATION_DELAY)},onUIopComplete:function(){this.uiOpCounter-=1,this.uiOpCounter<=0&&broadcast("UIoperationComplete")},hideTitleText:function(){this.titleGroup.visible=!1},showTitleText:function(){this.titleGroup.visible=!0},init:function(){this.helperGroup=game.add.group(),this.buttonGroup=game.add.group(),this.group=game.add.group(),this.infoGroup=game.add.group(),this.titleGroup=game.add.group(),this.topTitleText=game.add.bitmapText(game.width/2,game.height/2-uim.TOP_TITLE_SIZE/2,"bogboo",strings.INFO.PROJECT,uim.TOP_TITLE_SIZE),this.bottomTitleText=game.add.bitmapText(game.width/2,game.height/2+uim.BOTTOM_TITLE_SIZE/2,"bigbogboo",strings.INFO.EGG,uim.BOTTOM_TITLE_SIZE),this.topTitleText.x+=3*uim.BOTTOM_TITLE_SIZE/2,this.bottomTitleText.x+=3*uim.BOTTOM_TITLE_SIZE/2,this.topTitleText.y-=uim.BOTTOM_TITLE_SIZE/4,this.bottomTitleText.y-=uim.BOTTOM_TITLE_SIZE/4,this.topTitleText.anchor.setTo(.85,.5),this.bottomTitleText.anchor.setTo(.5,.5),this.titleGroup.add(this.topTitleText),this.titleGroup.add(this.bottomTitleText),this.createEvents(),this.createInfoDialog(),this.helper.create()},getButtonGroup:function(){return this.buttonGroup},addBlocker:function(a,b,c){return assert(uim.group,"uim.addBlocker: undefined group!"),assert(c,"uim.addBlocker: invalid sprite identifier!"),uim.group.create(a,b,c)},getNumBanners:function(){return uim.banners.length},getNumBannersWithData:function(){var a=0,b=0;for(a=0;a<uim.banners.length;++a)uim.banners[a]&&uim.banners[a].data&&++b;return b},getGroup:function(){return this.group||(this.group=game.add.group()),this.group},getBannerButton:function(a){return assert(a>=0&&a<this.banners.length,"getBannerButton: invalid index!"),this.banners[a].button},getFocusControlIndex:function(){var a=-1,b=0;if(uim.focusWidget)for(b=0;b<this.banners.length;++b)if(this.banners[b].button===uim.focusWidget){a=b;break}return a},getButtonIndexFromFocusWidget:function(){var a=0,b=-1;for(a=0;uim.focusWidget&&a<this.banners.length;++a)if(uim.focusWidget.banner===this.banners[a]){b=a;break}return b},openFocusEggChamber:function(){var a=uim.getButtonIndexFromFocusWidget();a>=0&&(uim.focusWidget.banner.data&&uim.focusWidget.banner.data.tileId>=0?uim.openEggChamber(uim.focusWidget.banner.data.tileId,a):uim.openEggChamber(gs.getCardTitle(uim.focusWidget.banner.data),a))},closeFocusEggChamber:function(){var a=uim.getButtonIndexFromFocusWidget();a>=0&&uim.closeEggChamber(a)},closeAllEggChambers:function(){var a=0;for(a=0;a<this.banners.length;++a)uim.closeEggChamber(a)},openEggChamber:function(a,b){var c=null;a&&(tm.addTilesToLayer(gs.baseLayers.objects,"sf_world",340,1+3*b,11),"number"==typeof a?(c=a,assert(c>=0,"openEggChamber: unknown EGG type (1)!"),tm.addTilesToLayer(gs.baseLayers.ui,"sf_world",c,1+3*b,11)):(c=gs.getEggIndexFromType(a),assert(c>=0,"openEggChamber: unknown EGG type (2)!"),tm.addTilesToLayer(gs.baseLayers.ui,"sf_world",285+c,1+3*b,11)))},closeEggChamber:function(a){tm.removeTileFromLayer(gs.baseLayers.ui,1+3*a,11),tm.addTilesToLayer(gs.baseLayers.objects,"sf_world",338,1+3*a,11)},enableInput:function(){gs.layers.grid.inputEnabled=!0,gs.layers.grid.events.onInputDown.add(onWorldPressCallback,this)},hasFocusCard:function(){return uim.focusWidget instanceof uim.button&&uim.focusWidget.banner&&uim.focusWidget.banner.data},getFocusCard:function(){return uim.focusWidget instanceof uim.button?uim.focusWidget.banner.data:null},clearFocusBanner:function(){var a=uim.getButtonIndexFromFocusWidget();this.focusWidget instanceof uim.button&&uim.focusWidget.banner&&(this.focusWidget.buttonStateClear(),a>=0&&uim.closeEggChamber(a),this.focusWidget=null)},createInfoArea:function(){var a=0,b=0,c=0,d=0;for(this.groupBottomFrame=game.add.group(),this.groupBottomFrame.x=uim.frameTop.x+uim.FRAME_BOTTOM_MARGIN.X,this.groupBottomFrame.y=uim.frameTop.y+uim.FRAME_BOTTOM_MARGIN.Y,a=this.frameTop.height/(uim.INFO_TEXT_SIZE+uim.INFO_TEXT_SIZE),c=uim.FRAME_BOTTOM_MARGIN.X+uim.INFO_TEXT_MARGIN,b=0;b<a;++b)d=uim.FRAME_BOTTOM_MARGIN.Y+b*(uim.INFO_TEXT_SIZE+uim.INFO_TEXT_SPACING)+gs.getOffsetY(),bmpText=game.add.bitmapText(c,d,"smallbogboo","",uim.INFO_TEXT_SIZE),this.groupBottomFrame.add(bmpText),this.infoText.lines.push(bmpText)},clearInfoText:function(){var a=0;for(a=0;a<this.infoText.lines.length;++a)this.infoText.lines[a].text="";this.infoText.currentLine=-1},addInfoText:function(a){a&&this.infoText.currentLine<this.infoText.lines.length-1&&(this.infoText.currentLine+=1,this.infoText.lines[this.infoText.currentLine].text=a,a.indexOf("\n")>=0&&(this.infoText.currentLine+=1))},simulateButtonPress:function(a){a>=0&&a<this.banners.length&&this.banners[a].button.press()},isBannerFocusControl:function(a){return a>=0&&a<this.banners.length&&this.banners[a].button===this.focusWidget}},uim.banner.prototype.showKeywordInfo=function(){var a=null,b=null,c=0;for(uim.clearInfoText(),a=gs.getFirstKeywordForCard(this.data);null!=a;a=gs.getNextKeywordForCard(this.data))if(b=gs.getTextForKeyword(gs.getCardTitle(this.data),a),b instanceof Array)for(c=0;c<b.length;++c)uim.addInfoText(b[c]);else uim.addInfoText(b)},uim.banner.prototype.enableInput=function(){this.button.enableInput()},uim.banner.prototype.disableInput=function(){this.button.disableInput()},uim.banner.prototype.setTitle=function(a){this.title.text=a,this.button.setState(a)},uim.banner.prototype.setUiTitle=function(a,b){this.title.text=a,this.button.setState(b)},uim.banner.prototype.setValue=function(a){this.value.text=a},uim.banner.prototype.setKeywords=function(a){this.keywords.text=a,this.keywords.y=this.keywords.height*(1+uim.KEYWORDS_NUM/uim.KEYWORDS_DENOM)},uim.banner.prototype.setSpecial=function(a){a?(this.special.animations.play(a.toLowerCase()),this.special.visible=!0):this.special.visible=!1},uim.banner.prototype.setData=function(a){this.data=a},uim.banner.prototype.getData=function(){return this.data},uim.banner.prototype.setMoveOutCallback=function(a){this.tweenOut.onComplete.removeAll(),a&&this.tweenOut.onComplete.add(a,this)},uim.banner.prototype.setMoveInCallback=function(a){this.tweenIn.onComplete.removeAll(),a&&this.tweenIn.onComplete.add(a,this)},uim.banner.prototype.setWiggleCallback=function(a){this.tweenWiggle.chainedTween.onComplete.removeAll(),a&&this.tweenWiggle.chainedTween.onComplete.add(a,this)},uim.banner.prototype.isMovedOut=function(){var a=!1;return a=this.x>game.width+.5*this.button.width()},uim.banner.prototype.moveOut=function(){this.tweenOut.start()},uim.banner.prototype.moveIn=function(){this.tweenIn.start()},uim.banner.prototype.wiggle=function(){this.tweenWiggle.start()},uim.button.prototype.enableInput=function(){this.sprOff.inputEnabled=!0},uim.button.prototype.disableInput=function(){this.sprOff.inputEnabled=!1},uim.button.prototype.setState=function(a){a&&(a=a.toLowerCase(),this.state=a,this.sprOff.animations.play(a+"Off"),this.sprOn.animations.play(a+"On"))},uim.button.prototype.setBanner=function(a){this.banner=a},uim.button.prototype.width=function(){return this.sprOff.width},uim.button.prototype.height=function(){return this.sprOff.height},uim.button.prototype.press=function(){var a=null;uim.inputBlocked()||(this.sprOff.kill(),this.sprOn.revive(0,this.sprOn.height/2),this.sprOn.animations.play(this.state+"On"),uim.focusWidget&&(uim.closeFocusEggChamber(),uim.focusWidget.buttonStateClear()),this.onPressedCallback&&(this.banner&&(a=this.banner.getData()),a&&"function"==typeof a||this.onPressedCallback(this),uim.focusWidget=this,uim.openFocusEggChamber()),game.sound.volume>0&&gs.playSound(gs.sounds.button))},uim.button.prototype.buttonStateClear=function(){uim.inputBlocked()||(this.sprOn.kill(),this.sprOff.revive(0,this.sprOff.height/2),this.sprOff.animations.play(this.state+"Off"),this===uim.focusWidget&&(uim.focusWidget=null))},uim.helperGroup=null,uim.helper={OFFSET:110,VELOCITY:512,ANGULAR_VELOCITY:120,MARGIN:5,MIN_DT:667,ALPHA_THRESH:.1,top:null,right:null,bottom:null,left:null,center:null,ring:null,arrowIn:null,arrowOut:null,textCenter:null,textTop:null,textRight:null,textBottom:null,textLeft:null,bInputBlocked:!1,node:null,create:function(){this.node=uim.helperGroup.create(0,0),this.center=uim.helperGroup.create(0,0,"helperCenter"),this.ring=uim.helperGroup.create(0,0,"helperRing"),this.top=uim.helperGroup.create(0,0,"helperTop"),this.right=uim.helperGroup.create(0,0,"helperRight"),this.bottom=uim.helperGroup.create(0,0,"helperBottom"),this.left=uim.helperGroup.create(0,0,"helperLeft"),this.arrowOut=uim.helperGroup.create(0,0,"helperArrowOut"),this.arrowIn=uim.helperGroup.create(0,0,"helperArrowIn"),this.textCenter=game.add.bitmapText(0,0,"smallbogboo","Center\nText",uim.INFO_TEXT_SIZE),this.textTop=game.add.bitmapText(0,-this.top.height/2+this.MARGIN,"smallbogboo","Top\nText",uim.INFO_TEXT_SIZE),this.textRight=game.add.bitmapText(Math.round(-2*this.MARGIN/1),0,"smallbogboo","Right\nText",uim.INFO_TEXT_SIZE),this.textBottom=game.add.bitmapText(0,0,"smallbogboo","Bottom\nText",uim.INFO_TEXT_SIZE),this.textLeft=game.add.bitmapText(-this.left.width/2+this.MARGIN,0,"smallbogboo","Left\nText",uim.INFO_TEXT_SIZE),this.node.anchor.set(.5,.5),this.center.anchor.set(.5,.5),this.ring.anchor.set(.5,.5),this.top.anchor.set(.5,.5),this.right.anchor.set(.5,.5),this.bottom.anchor.set(.5,.5),this.left.anchor.set(.5,.5),this.arrowOut.anchor.set(.5,.5),this.arrowIn.anchor.set(.5,.5),this.center.events.onInputDown.add(this.onHelpTapped,this.center),this.ring.events.onInputDown.add(this.onHelpTapped,this.ring),this.top.events.onInputDown.add(this.onHelpTapped,this.top),this.right.events.onInputDown.add(this.onHelpTapped,this.right),this.bottom.events.onInputDown.add(this.onHelpTapped,this.bottom),this.left.events.onInputDown.add(this.onHelpTapped,this.left),this.arrowOut.events.onInputDown.add(this.onHelpTapped,this.arrowOut),this.arrowIn.events.onInputDown.add(this.onHelpTapped,this.arrowIn),this.textCenter.events.onInputDown.add(this.onHelpTapped,this.textCenter),this.textTop.events.onInputDown.add(this.onHelpTapped,this.textTop),this.textRight.events.onInputDown.add(this.onHelpTapped,this.textRight),this.textBottom.events.onInputDown.add(this.onHelpTapped,this.textBottom),this.textLeft.events.onInputDown.add(this.onHelpTapped,this.textLeft),this.center.inputEnabled=!0,this.ring.inputEnabled=!0,this.top.inputEnabled=!0,this.right.inputEnabled=!0,this.bottom.inputEnabled=!0,this.left.inputEnabled=!0,this.arrowOut.inputEnabled=!0,this.arrowIn.inputEnabled=!0,this.textCenter.anchor.set(.5,.5),this.textTop.anchor.set(.5,0),this.textRight.anchor.set(0,.5),this.textBottom.anchor.set(.5,0),this.textLeft.anchor.set(0,.5),this.textCenter.align="center",this.textTop.align="center",this.textRight.align="left",this.textBottom.align="center",this.textLeft.align="left",this.node.addChild(this.center),this.node.addChild(this.top),this.node.addChild(this.right),this.node.addChild(this.bottom),this.node.addChild(this.left),this.node.addChild(this.ring),this.ring.addChild(this.arrowOut),this.ring.addChild(this.arrowIn),this.center.addChild(this.textCenter),this.top.addChild(this.textTop),this.right.addChild(this.textRight),this.bottom.addChild(this.textBottom),this.left.addChild(this.textLeft),this.node.x=game.width/2,this.node.y=-game.height/2,this.left.x=-this.OFFSET,this.top.y=-this.OFFSET,this.right.x=this.OFFSET,this.bottom.y=this.OFFSET,this.arrowIn.x=-67,this.arrowOut.x=100,this.center.alpha=0,this.ring.alpha=0,this.top.alpha=0,this.right.alpha=0,this.bottom.alpha=0,this.left.alpha=0,this.node.data={},this.center.data={},this.ring.data={},this.top.data={},this.right.data={},this.bottom.data={},this.left.data={},this.node.data.tweenTranslate=game.add.tween(this.node).to({x:0,y:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.ring.data.tweenRotate=game.add.tween(this.ring).to({angle:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.node.data.tweenTranslate.onComplete.add(uim.onUIopComplete,uim),this.ring.data.tweenRotate.onComplete.add(uim.onUIopComplete,uim),this.top.data.tweenFadeIn=game.add.tween(this.top).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.right.data.tweenFadeIn=game.add.tween(this.right).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.bottom.data.tweenFadeIn=game.add.tween(this.bottom).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.left.data.tweenFadeIn=game.add.tween(this.left).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.ring.data.tweenFadeIn=game.add.tween(this.ring).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.center.data.tweenFadeIn=game.add.tween(this.center).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.arrowIn.data.tweenFadeIn=game.add.tween(this.arrowIn).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.arrowOut.data.tweenFadeIn=game.add.tween(this.arrowOut).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textCenter.data.tweenFadeIn=game.add.tween(this.textCenter).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textTop.data.tweenFadeIn=game.add.tween(this.textTop).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textRight.data.tweenFadeIn=game.add.tween(this.textRight).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textBottom.data.tweenFadeIn=game.add.tween(this.textBottom).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textLeft.data.tweenFadeIn=game.add.tween(this.textLeft).to({alpha:1},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.top.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.top),this.right.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.right),this.bottom.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.bottom),this.left.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.left),this.ring.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.ring),this.center.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.center),this.arrowIn.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.arrowIn),this.arrowOut.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.arrowOut),this.textCenter.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.textCenter),this.textTop.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.textTop),this.textRight.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.textRight),this.textBottom.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.textBottom),this.textLeft.data.tweenFadeIn.onComplete.add(this.onHelperOpComplete,this.textLeft),this.top.data.tweenFadeOut=game.add.tween(this.top).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.right.data.tweenFadeOut=game.add.tween(this.right).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.bottom.data.tweenFadeOut=game.add.tween(this.bottom).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.left.data.tweenFadeOut=game.add.tween(this.left).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.ring.data.tweenFadeOut=game.add.tween(this.ring).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.center.data.tweenFadeOut=game.add.tween(this.center).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.arrowIn.data.tweenFadeOut=game.add.tween(this.arrowIn).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.arrowOut.data.tweenFadeOut=game.add.tween(this.arrowOut).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textCenter.data.tweenFadeOut=game.add.tween(this.textCenter).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textTop.data.tweenFadeOut=game.add.tween(this.textTop).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textRight.data.tweenFadeOut=game.add.tween(this.textRight).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textBottom.data.tweenFadeOut=game.add.tween(this.textBottom).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.textLeft.data.tweenFadeOut=game.add.tween(this.textLeft).to({alpha:0},uim.INFO_TWEEN_TIME,Phaser.Easing.Cubic.InOut,!1),this.top.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.top),
this.right.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.right),this.bottom.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.bottom),this.left.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.left),this.ring.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.ring),this.center.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.center),this.arrowIn.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.arrowIn),this.arrowOut.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.arrowOut),this.textCenter.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.textCenter),this.textTop.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.textTop),this.textRight.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.textRight),this.textBottom.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.textBottom),this.textLeft.data.tweenFadeOut.onComplete.add(this.onHelperOpComplete,this.textLeft)},onHelperOpComplete:function(a){this.alpha<uim.helper.ALPHA_THRESH?this.inputEnabled=!1:this.inputEnabled=!0,uim.onUIopComplete(this)},onHelpTapped:function(a){this.alpha>uim.helper.ALPHA_THRESH&&!uim.helper.bInputBlocked&&(broadcast("onHelpTapped"),gs.playSound(gs.sounds.buttonHi))},resetNode:function(){this.node.x=game.width/2,this.node.y=-game.height/2},blockInput:function(){this.bInputBlocked=!0},unblockInput:function(){this.bInputBlocked=!1},blendTo:function(a){var b=0,c=a.hasOwnProperty("x")?a.x:this.node.x,d=a.hasOwnProperty("y")?a.y:this.node.y;b=1e3*Math.sqrt((c-this.node.x)*(c-this.node.x)+(d-this.node.y)*(d-this.node.y))/this.VELOCITY,b=Math.max(b,this.MIN_DT),this.node.data.tweenTranslate.updateTweenData("vEnd",{x:c,y:d}),this.node.data.tweenTranslate.updateTweenData("duration",b),this.node.data.tweenTranslate.start()},setText:function(a,b){var c=a?a.substring(0,1).toUpperCase()+a.substring(1).toLowerCase():null;assert(a&&this.hasOwnProperty("text"+c),"setText: invalid widget identifier!"),a=this["text"+c],assert("undefined"!=typeof a,"setText: widget is not a text object!"),a.text=b},turnRingTo:function(a){assert(a.hasOwnProperty("angle")&&a.hasOwnProperty("bShortest"),"turnRingTo: invalid arguments!"),this.turnTo(a.angle,a.bShortest)},turnRingBy:function(a){assert(a.hasOwnProperty("angle")&&a.hasOwnProperty("bShortest"),"turnRingBy: invalid arguments!"),this.turnTo(this.ring.angle+a.angle,a.bShortest)},snapArrowsOn:function(a,b){a?(this.arrowIn.alpha=1,this.arrowIn.inputEnabled=!0):(this.arrowIn.alpha=0,this.arrowIn.inputEnabled=!1),b?(this.arrowOut.alpha=1,this.arrowOut.inputEnabled=!0):(this.arrowOut.alpha=0,this.arrowOut.inputEnabled=!1)},snapArrowsOff:function(a,b){a?(this.arrowIn.alpha=0,this.arrowIn.inputEnabled=!1):(this.arrowIn.alpha=1,this.arrowIn.inputEnabled=!0),b?(this.arrowOut.alpha=0,this.arrowOut.inputEnabled=!1):(this.arrowOut.alpha=1,this.arrowOut.inputEnabled=!0)},snapRingTo:function(a){this.ring.angle=a},snapRingBy:function(a){this.ring.angle+=a},snapTo:function(a,b){return"number"==typeof a&&(this.node.x=a),"number"==typeof b&&(this.node.y=b),0},snapIn:function(a){var b=this.executeOnElements(a,function(a){assert(a,"snapIn: invalid property identifier!"),a.alpha=1});return b},snapOut:function(a){var b=this.executeOnElements(a,function(a){assert(a,"snapOut: invalid property identifier!"),a.alpha=0});return b},turnTo:function(a,b){var c=a-this.ring.angle,d=0;b&&(c>180?c-=360:c<-180&&(c+=360),a=this.ring.angle+c),d=1e3*Math.abs(c)/this.ANGULAR_VELOCITY,d=Math.max(d,this.MIN_DT),this.ring.data.tweenRotate.updateTweenData("vEnd",{angle:a}),this.ring.data.tweenRotate.updateTweenData("duration",d),this.ring.data.tweenRotate.start()},fadeOut:function(a){var b=this.executeOnElements(a,function(a){assert(a,"fadeOut: invalid property identifier!"),a.data.tweenFadeOut.start()});return b},fadeIn:function(a){var b=this.executeOnElements(a,function(a){assert(a,"fadeIn: invalid property identifier!"),a.data.tweenFadeIn.start()});return b},executeOnElements:function(a,b){var c=a instanceof Array,d=c?a:[],e=0,f=null,g=0;for(assert(d instanceof Array,"fadeOut: invalid elements!"),0!==d.length||c||d.push(a),e=0;e<d.length;++e)this.hasOwnProperty(d[e])&&(f=this[d[e]],assert(f,"fadeOut: invalid property identifier!"),b(f),g+=1);return g}};var sm={TURNS_UNTIL_EVENT:7,BIODIVERSITY_SCALAR:100,nextState:null,bLastEvent:!1,eventTimer:0,setTransitionState:function(a,b,c){this.nextState=b,setState(a,c)},clearNextState:function(){this.nextState=null},isMenuState:function(){return currentState===sm.chooseMenuItem},handleBannerPress:function(a){a&&a.banner&&(uim.clearAllCursors(),uim.setRightHint(strings.HINTS.PLACE_ORGANISM),a.banner.showKeywordInfo(),gs.showAvailableBiomes(a.banner.data),gs.showTargetableNiches(a.banner.data))},handleWorldPress:function(a,b){var c=null,d=null;uim.hasFocusCard()?(c=gs.getWorldPressInfo(game.input.activePointer.x,game.input.activePointer.y),c&&c.biome&&(c.biome.isBlocked()?(uim.clearInfoText(),uim.addInfoText(strings.INFO.ILLEGAL_PLACEMENT),sm.setTransitionState("wiggleFocusBanner",a)):(d=gs.populateNiche(uim.getFocusCard(),c.niche),d?(uim.clearInfoText(),uim.addInfoText(d)):(uim.clearInfoText(),setState(b))),uim.clearAllCursors())):(uim.clearInfoText(),uim.addInfoText(strings.INFO.SELECT_ORGANISM),sm.setTransitionState("wiggleBanners",a))},startGame:{enter:function(a){uim.setupBanner(0,uim.UI_BANNER_INDEX,strings.UI.START_GAME,function(){setState("outroToStartGame")}),uim.setupBanner(1,uim.UI_BANNER_INDEX,strings.UI.TUTORIAL,gs.instructions.bind(gs)),uim.setupBanner(2,uim.UI_BANNER_INDEX,strings.UI.TOGGLE_SOUND,gs.toggleSound.bind(gs)),uim.setupBanner(3,uim.UI_BANNER_INDEX,strings.UI.QUIT,function(){window.LOLSDK.completeGame()}),uim.setupBanner(4,uim.UI_BANNER_INDEX,strings.UI.TOGGLE_SOUND,null),gs.resetWorld(),uim.showTitleText(),listenFor("UIoperationComplete",this),uim.disableBannerInput(),uim.clearFocusBanner(),uim.startOperation("moveBannersIn",this)},update:function(){},exit:function(){},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),uim.setLeftHint(strings.UI.CHOOSE_ONE),setState("chooseMenuItem")}},chooseMenuItem:{enter:function(a){uim.enableBannerInput()},update:function(){},exit:function(){}},outroToStartGame:{enter:function(a){listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut",this),uim.hideTitleText()},update:function(){},exit:function(){},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),gs.startGame()}},startGameEnd:{enter:function(a){uim.clearInfoText(),uim.disableBannerInput(),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut",this),uim.hideHint()},update:function(){},exit:function(){},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),uim.showInfoDialog(strings.INFO.HUMANS_ARRIVE,strings.INFO.SEE_THEIR_IMPACT,"endGame")}},endGame:{enter:function(a){sm.bLastEvent=!0,events.seedTutorialEvent("humanSettlement")},update:function(){setState(sm.chooseEvent)},exit:function(){}},showScore:{TILE_FLASH_TIME:67,bExit:!1,tileInfo:{iBiome:0,iNiche:0,iRank:0,rating:0},oldTileInfo:{iBiome:-1,iRank:-1},timer:0,oldNiche:0,card:null,bEcosystems:!1,rating:0,totalBiodiversityRating:0,enter:function(a){this.bExit=!1,this.timer=0,this.bEcosystems=!0,this.rating=0,this.ecoRating=0,this.nicheRating=0,this.worldRating=0,this.oldNiche=null,this.tileInfo.iBiome=0,this.tileInfo.iNiche=0,this.tileInfo.iRank=0,this.tileInfo.rating=0,this.oldTileInfo.iBiome=-1,this.oldTileInfo.iRank=-1},update:function(){var a=0;for(this.timer+=game.time.physicsElapsedMS;this.timer>this.TILE_FLASH_TIME;)this.timer-=this.TILE_FLASH_TIME,this.bEcosystems?(this.oldNiche&&gs.redrawEcosystem(this.oldNiche),this.oldNiche=gs.eraseEcosystem(this.tileInfo),this.tileInfo.iBiome>=0?(this.rating+=this.tileInfo.rating,uim.clearInfoText(),uim.addInfoText("Ecosystem biodiversity: "+this.rating)):(this.bEcosystems=!1,this.tileInfo.iBiome=0,this.tileInfo.iRank=0,this.tileInfo.rating=0,this.ecoRating=this.rating,this.rating=0)):(this.oldNiche&&(gs.redrawEcosystem(this.oldNiche),this.oldNiche=null),this.oldTileInfo.iBiome>=0&&this.oldTileInfo.iRank>=0&&gs.redrawNiche(this.oldTileInfo),this.oldTileInfo.iBiome=this.tileInfo.iBiome,this.oldTileInfo.iRank=this.tileInfo.iRank,gs.eraseNiche(this.tileInfo),this.tileInfo.iBiome<0?(this.nicheRating=this.rating,this.worldRating=gs.computeWorldBiodiversity(),uim.addInfoText("World biodiversity: "+this.worldRating),a=gs.computeScore(),this.totalBiodiversityRating=this.ecoRating+this.nicheRating+this.worldRating,this.bExit=!0):(this.rating+=this.tileInfo.rating,uim.clearInfoText(),uim.addInfoText("Ecosystem biodiversity: "+this.ecoRating),uim.addInfoText("Niche biodiversity: "+this.rating)));this.bExit&&uim.showInfoDialog(strings.INFO.FINAL_SCORE,strings.construct(strings.INFO.SCORE,[gs.UNIT_SCORE_SCALAR,a,this.totalBiodiversityRating]),"showRestartMenu")},exit:function(){this.oldTileInfo.iBiome>=0&&this.oldTileInfo.iRank>=0&&gs.redrawNiche(this.oldTileInfo)}},showRestartMenu:{enter:function(a){uim.setupBanner(0,uim.UI_BANNER_INDEX,strings.UI.RESTART_GAME,function(){setState("hideRestartMenu")}),uim.setupBanner(1,uim.UI_BANNER_INDEX,strings.UI.QUIT,function(){window.LOLSDK.completeGame()}),uim.setupBanner(2,uim.UI_BANNER_INDEX,"",null),uim.setupBanner(3,uim.UI_BANNER_INDEX,"",null),uim.setupBanner(4,uim.UI_BANNER_INDEX,"",null),uim.clearFocusBanner(),uim.clearInfoText(),gs.hideCardHints(),listenFor("UIoperationComplete",this),uim.disableBannerInput(),uim.startOperation("moveBannersIn"),gs.postProgressComplete()},update:function(){},exit:function(){},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),uim.setLeftHint(strings.UI.CHOOSE_ONE),setState("chooseMenuItem")}},hideRestartMenu:{enter:function(a){listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut")},update:function(){},exit:function(){},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),setState(sm.startGame)}},chooseEvent:{eventBiome:null,enter:function(a){this.eventBiome=gs.getEventBiome(),gs.hideCardHints(),gs.recordBeforePopulations(),events.setBiome(this.eventBiome),uim.setCurrentEventQuestion(events.getCurrentEventQuestion()),uim.showEvent(this.eventBiome,events.getCurrentEventTitle(),events.getCurrentEventInfo()),listenFor("eventExited",this)},update:function(){},exit:function(){},eventExited:function(a){unlistenFor("eventExited",this),gs.makeDisplacementDeckDrawDeck(),null===this.eventBiome?sm.bLastEvent?setState(sm.endFinalEvent):uim.showInfoDialog(strings.EVENTS.BIOSPHERE_SAFE,strings.EVENTS.BIOME_DAMAGE_REPORT_NONE,"eventEndNoDamage"):setState(sm.eventDestroyCards)}},eventDestroyCards:{enter:function(a){uim.clearInfoText(),uim.disableBannerInput(),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut",this)},update:function(){},exit:function(){},UIoperationComplete:function(a){events.tagCardsForDestruction(),unlistenFor("UIoperationComplete",this),setState(sm.eventShowDestroyed)}},eventShowDestroyed:{bExit:!1,enter:function(a){this.bExit=!1,listenFor("allCardsRemoved",this),listenFor("noCardsRemoved",this),listenFor("cardDestroyed",this),events.destroyCards()},update:function(){var a=events.getNumBiomesAffected(),b=events.getNumCardsDestroyed();this.bExit&&(0===events.getNumBiomesAffected()?sm.bLastEvent?setState(sm.endFinalEvent):uim.showInfoDialog(strings.EVENTS.BIOSPHERE_SAFE,strings.EVENTS.BIOME_DAMAGE_REPORT_NONE,"eventEndNoDamage"):1===events.getNumBiomesAffected()?1===b?uim.showInfoDialog(strings.EVENTS.BIOME_DAMAGED,strings.construct(strings.EVENTS.BIOME_DAMAGE_REPORT_SINGULAR,[b]),"eventDisplaceCards"):uim.showInfoDialog(strings.EVENTS.BIOME_DAMAGED,strings.construct(strings.EVENTS.BIOME_DAMAGE_REPORT_PLURAL,[a,b]),"eventDisplaceCards"):1===b?uim.showInfoDialog(strings.EVENTS.BIOMES_DAMAGED,strings.construct(strings.EVENTS.BIOME_DAMAGE_REPORT_SINGULAR,[b]),"eventDisplaceCards"):uim.showInfoDialog(strings.EVENTS.BIOMES_DAMAGED,strings.construct(strings.EVENTS.BIOME_DAMAGE_REPORT_PLURAL,[a,b]),"eventDisplaceCards"))},exit:function(){},cardDestroyed:function(a){var b=gs.getCardX(a),c=gs.getCardY(a);gs.startFireParticles(b,c,events.CARD_DESTROY_INTERVAL_MS/2)},noCardsRemoved:function(a){unlistenFor("allCardsRemoved",this),unlistenFor("noCardsRemoved",this),unlistenFor("cardDestroyed",this),this.bExit=!0},allCardsRemoved:function(a){unlistenFor("allCardsRemoved",this),unlistenFor("noCardsRemoved",this),unlistenFor("cardDestroyed",this),this.bExit=!0}},eventDisplaceCards:{bExit:!1,enter:function(a){var b=null;for(this.bExit=!1,b=events.getNextAffectedBiome(),gs.clearDisplacementDeck();b;){if(listenFor("allCardsDisplaced",this),gs.isolateBiome(b),events.tagCardsForDisplacement(b),events.getNumCardsDisplaced()){events.displaceCards(b);break}b=events.getNextAffectedBiome()}b||(this.bExit=!0)},update:function(){this.bExit&&(gs.unblockAllBiomes(),sm.bLastEvent?uim.showInfoDialog(strings.EVENTS.COLONY_COMPLETE,strings.EVENTS.RESOLUTION_MESSAGE_END,"endFinalEvent"):uim.showInfoDialog(strings.EVENTS.RESOLVED,strings.EVENTS.RESOLUTION_MESSAGE,"eventEnd"))},exit:function(){},allCardsDisplaced:function(a){unlistenFor("allCardsDisplaced",this),setState(sm.eventStartDisplacementResolution)}},eventStartDisplacementResolution:{bExit:!1,enter:function(a){this.bExit=!1,uim.syncBannersToCards(),uim.disableBannerInput(),uim.setLeftHint(strings.HINTS.CHOOSE_DISPLACED_ORGANISM),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersIn",this)},update:function(){},exit:function(){},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),setState(sm.eventResolveDisplacement)}},eventResolveDisplacement:{bExit:!1,enter:function(a){this.bExit=!1,gs.showNextCardHints(),gs.playerHasLegalMove(!1)?uim.enableBannerInput():this.bExit=!0},update:function(){this.bExit&&(uim.disableBannerInput(),gs.doPlaysRemainInDrawDeck()?(uim.setLeftHint(""),uim.showInfoDialog(strings.INFO.OUT_OF_PLAYS,strings.INFO.RESHUFFLE_AND_TRY_AGAIN,"eventReshuffle")):uim.getNumBannersWithData()?uim.showInfoDialog(strings.INFO.NO_MORE_MOVES,strings.EVENTS.WILL_DISCARD_REMAINING_ORGANISMS,"eventCloseBannersAndDisplace"):uim.showInfoDialog(strings.EVENTS.WELL_DONE,strings.EVENTS.PLACED_ALL_ORGANISMS,"eventCloseBannersAndDisplace"))},exit:function(){},onBannerPressedCallback:function(a){sm.handleBannerPress(a)},onWorldPressCallback:function(){sm.handleWorldPress("eventResolveDisplacement","eventDiscard")}},eventCloseBannersAndDisplace:{bExit:!1,enter:function(a){this.bExit=!1,listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut")},update:function(){this.bExit&&setState(sm.eventDisplaceCards)},exit:function(){},UIoperationComplete:function(){unlistenFor("UIoperationComplete",this),this.bExit=!0}},eventReshuffle:{enter:function(a){listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut")},update:function(){},exit:function(){},UIoperationComplete:function(){unlistenFor("UIoperationComplete",this),gs.shuffleDrawDeck(),setState(sm.eventStartDisplacementResolution)}},eventDiscard:{enter:function(a){uim.disableBannerInput(),listenFor("UIoperationComplete",this),uim.startOperation("hideFocusBanner",this)},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this)},onPushed:function(){unlistenFor("UIoperationComplete",this)},onPopped:function(){listenFor("UIoperationComplete",this)},UIoperationComplete:function(a){var b=gs.discardAndReplace(uim.getFocusCard());unlistenFor("UIoperationComplete",this),gs.doPlaysRemainInDrawDeck()?b?setState("eventDraw"):(uim.clearFocusBanner(),gs.playerHasLegalMove(!1)?(uim.setLeftHint(strings.HINTS.CHOOSE_EGG),uim.enableBannerInput(),setState("eventResolveDisplacement")):gs.drawDeckExhausted()?uim.showInfoDialog(strings.EVENTS.WELL_DONE,strings.EVENTS.PLACED_ALL_ORGANISMS,"eventDisplaceCards"):(uim.setLeftHint(""),gs.shuffleDrawDeck(),uim.showInfoDialog(strings.INFO.OUT_OF_PLAYS,strings.INFO.RESHUFFLE_AND_TRY_AGAIN,"eventResolveDisplacement"))):uim.getNumBannersWithData()?uim.showInfoDialog(strings.INFO.NO_MORE_MOVES,strings.EVENTS.WILL_DISCARD_REMAINING_ORGANISMS,"eventCloseBannersAndDisplace"):uim.showInfoDialog(strings.EVENTS.WELL_DONE,strings.EVENTS.PLACED_ALL_ORGANISMS,"eventCloseBannersAndDisplace")}},eventDraw:{enter:function(a){listenFor("UIoperationComplete",this),uim.startOperation("showFocusBanner"),uim.setLeftHint(strings.HINTS.CHOOSE_EGG),uim.clearFocusBanner()},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this),uim.enableBannerInput()},onPushed:function(){unlistenFor("UIoperationComplete",this)},onPopped:function(){listenFor("UIoperationComplete",this)},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),uim.enableBannerInput(),setState("eventResolveDisplacement")}},endFinalEvent:{enter:function(a){},update:function(){setState(sm.showFinalEventReport)},exit:function(){gs.restoreOriginalDrawDeck()}},showFinalEventReport:{enter:function(a){gs.recordAfterPopulations(),listenFor("eventReportClosed",this),uim.showEventReport()},update:function(){},exit:function(){},render:function(){uim.renderEventReport(gs.getBeforePopulations(),gs.getAfterPopulations())},eventReportClosed:function(a){unlistenFor("eventReportClosed",this),setState(sm.showScore)}},showEventReport:{enter:function(a){gs.recordAfterPopulations(),listenFor("eventReportClosed",this),uim.showEventReport()},update:function(){},exit:function(){},render:function(){uim.renderEventReport(gs.getBeforePopulations(),gs.getAfterPopulations())},eventReportClosed:function(a){unlistenFor("eventReportClosed",this),sm.setTransitionState("startPhaseTwo","phaseTwo")}},eventEnd:{enter:function(a){events.next(),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut"),uim.setLeftHint("")},update:function(){},exit:function(){},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),gs.restoreOriginalDrawDeck(),setState(sm.showEventReport)}},eventEndNoDamage:{enter:function(a){events.next(),gs.restoreOriginalDrawDeck()},update:function(){sm.setTransitionState("startPhaseTwo","phaseTwo")},exit:function(){}},wiggleFocusBanner:{enter:function(a){uim.disableBannerInput(),listenFor("UIoperationComplete",this),uim.startOperation("wiggleFocusBanner")},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this)},UIoperationComplete:function(a){setState(sm.nextState)}},wiggleBanners:{enter:function(a){uim.disableBannerInput(),listenFor("UIoperationComplete",this),uim.startOperation("wiggleBanners")},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this)},UIoperationComplete:function(a){setState(sm.nextState)}},showInfoDialog:{PROMPT_DELAY_MS:2e3,promptTimer:0,bCanShowPrompt:!0,enter:function(a){listenFor("infoDialogOut",this),listenFor("hideInfoText",this),this.bCanShowPrompt=!0,assert(a&&a.title&&a.text,"showInfoDialog: invalid text data!"),this.promptTimer=0,uim.startInfoDialog(a.title,a.text),uim.blockInput()},update:function(){var a=this.promptTimer;this.promptTimer+=game.time.physicsElapsedMS,this.bCanShowPrompt&&a<this.PROMPT_DELAY_MS&&this.promptTimer>=this.PROMPT_DELAY_MS&&uim.showInfoPrompt()},exit:function(){},hideInfoText:function(a){this.bCanShowPrompt=!1},infoDialogOut:function(a){uim.unblockInput(),unlistenFor("infoDialogOut",this),unlistenFor("hideInfoText",this),sm.nextState?setState(sm.nextState):popState()}},startPhaseTwo:{bExit:!1,enter:function(a){this.bExit=!1,sm.eventTimer=0,gs.doPlaysRemainInDrawDeck()?(uim.syncBannersToCards(),uim.clearFocusBanner(),gs.setPhaseOne(!1),uim.setLeftHint(strings.HINTS.CHOOSE_EGG),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersIn",this)):this.bExit=!0},update:function(){this.bExit&&uim.showInfoDialog(strings.INFO.GAME_OVER,strings.INFO.NO_MORE_PLAYS,"endGame")},exit:function(){unlistenFor("UIoperationComplete",this)},onPushed:function(){unlistenFor("UIoperationComplete",this)},onPopped:function(){listenFor("UIoperationComplete",this)},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),setState(sm.nextState)}},phaseTwo:{enter:function(a){uim.enableBannerInput(),gs.showNextCardHints()},update:function(){},exit:function(){gs.postPopulationProgress()},onBannerPressedCallback:function(a){sm.handleBannerPress(a)},onWorldPressCallback:function(){sm.handleWorldPress("phaseTwo","phaseTwoDiscard")}},phaseTwoDiscard:{enter:function(a){uim.disableBannerInput(),listenFor("UIoperationComplete",this),uim.startOperation("hideFocusBanner",this),sm.eventTimer+=1},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this)},onPushed:function(){unlistenFor("UIoperationComplete",this)},onPopped:function(){listenFor("UIoperationComplete",this)},UIoperationComplete:function(a){var b=gs.discardAndReplace(uim.getFocusCard());unlistenFor("UIoperationComplete",this),b?setState(gs.doPlaysRemainInDrawDeck()?"phaseTwoDraw":sm.startGameEnd):(uim.clearFocusBanner(),gs.doPlaysRemainInDrawDeck()?gs.playerHasLegalMove(!1)?sm.eventTimer===sm.TURNS_UNTIL_EVENT?setState(sm.chooseEvent):(uim.setLeftHint(strings.HINTS.CHOOSE_EGG),uim.enableBannerInput(),setState("phaseTwo")):(uim.setLeftHint(""),uim.showInfoDialog(strings.INFO.OUT_OF_PLAYS,strings.INFO.RESHUFFLE_AND_TRY_AGAIN,"phaseTwoReshuffle")):setState(sm.startGameEnd))}},phaseTwoReshuffle:{enter:function(a){assert(gs.doPlaysRemainInDrawDeck(),"phaseTwoReshuffle.enter: no plays remain in draw deck!"),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut")},update:function(){},exit:function(){},UIoperationComplete:function(){unlistenFor("UIoperationComplete",this),gs.shuffleDrawDeck(),sm.eventTimer===sm.TURNS_UNTIL_EVENT?setState(sm.chooseEvent):sm.setTransitionState("startPhaseTwo","phaseTwo")}},phaseTwoDraw:{enter:function(a){assert(gs.doPlaysRemainInDrawDeck(),"phaseTwoReshuffle.enter: no plays remain in draw deck!"),listenFor("UIoperationComplete",this),uim.startOperation("showFocusBanner"),uim.setLeftHint(strings.HINTS.CHOOSE_EGG),uim.clearFocusBanner()},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this),uim.enableBannerInput()},onPushed:function(){unlistenFor("UIoperationComplete",this)},onPopped:function(){listenFor("UIoperationComplete",this)},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),gs.playerHasLegalMove(!1)?sm.eventTimer===sm.TURNS_UNTIL_EVENT?setState(sm.chooseEvent):(uim.enableBannerInput(),setState("phaseTwo")):(uim.setLeftHint(""),uim.showInfoDialog(strings.INFO.OUT_OF_PLAYS,strings.INFO.RESHUFFLE_AND_TRY_AGAIN,"phaseTwoReshuffle"))}},startPhaseOne:{enter:function(a){gs.shuffleDrawDeck(),uim.syncBannersToCards(),sm.bLastEvent=!1,gs.setPhaseOne(!0),uim.setLeftHint(strings.HINTS.CHOOSE_EGG),uim.disableBannerInput(),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersIn")},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this)},onPushed:function(){unlistenFor("UIoperationComplete",this)},onPopped:function(){listenFor("UIoperationComplete",this)},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),setState("phaseOne")}},phaseOne:{enter:function(a){uim.enableBannerInput(),gs.showNextCardHints()},update:function(){},exit:function(){gs.postPopulationProgress()},onBannerPressedCallback:function(a){sm.handleBannerPress(a)},onWorldPressCallback:function(){sm.handleWorldPress("phaseOne","phaseOneDiscard")}},phaseOneDiscard:{enter:function(a){uim.disableBannerInput(),listenFor("UIoperationComplete",this),gs.blockBiomes(null),uim.startOperation("hideFocusBanner",this)},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this)},onPushed:function(){unlistenFor("UIoperationComplete",this)},onPopped:function(){listenFor("UIoperationComplete",this)},UIoperationComplete:function(a){var b=gs.discardAndReplace(uim.getFocusCard());unlistenFor("UIoperationComplete",this),b?gs.doPlaysRemainInDrawDeck()?gs.playerHasLegalMove(!0)?setState("phaseOneDraw"):(uim.setLeftHint(""),uim.showInfoDialog(strings.INFO.OUT_OF_PLAYS,strings.INFO.RESHUFFLE_AND_TRY_AGAIN,"phaseOneReshuffle")):setState("endPhaseOne"):gs.playerHasLegalMove(!0)?(uim.setLeftHint(strings.HINTS.CHOOSE_EGG),uim.clearFocusBanner(),uim.enableBannerInput(),setState("phaseOne")):setState("endPhaseOne")}},phaseOneReshuffle:{enter:function(a){assert(gs.doPlaysRemainInDrawDeck(),"phaseOneReshuffle.enter: no plays remain in draw deck!"),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut")},update:function(){},exit:function(){},UIoperationComplete:function(){unlistenFor("UIoperationComplete",this),gs.shuffleDrawDeck(),sm.eventTimer===sm.TURNS_UNTIL_EVENT?setState(sm.chooseEvent):sm.setTransitionState("startPhaseOne","phaseOne")}},phaseOneDraw:{enter:function(a){uim.setLeftHint(strings.HINTS.CHOOSE_EGG),listenFor("UIoperationComplete",this),uim.startOperation("showFocusBanner"),uim.clearFocusBanner()},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this),uim.enableBannerInput()},onPushed:function(){unlistenFor("UIoperationComplete",this)},onPopped:function(){listenFor("UIoperationComplete",this)},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),gs.playerHasLegalMove(!0)?(uim.enableBannerInput(),setState("phaseOne")):setState("endPhaseOne")}},endPhaseOne:{enter:function(a){uim.disableBannerInput(),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut",this)},update:function(){},exit:function(){unlistenFor("UIoperationComplete",this)},onPushed:function(){unlistenFor("UIoperationComplete",this)},onPopped:function(){listenFor("UIoperationComplete",this)},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),gs.removeInsectsAndNematodes(),gs.addPhaseTwoCards(),gs.shuffleDrawDeck(),gs.playSound(gs.sounds.phaseSwitch),sm.setTransitionState("startPhaseTwo","phaseTwo")}}};sm.bannerInputStages=[],sm.worldInputStages=[],sm.startTutorial={enter:function(a){uim.disableBannerInput(),listenFor("UIoperationComplete",this),uim.startOperation("moveBannersOut"),gs.postTutorialProgress()},update:function(){},exit:function(){},UIoperationComplete:function(a){unlistenFor("UIoperationComplete",this),setState(sm.startTutorialIntro)}},sm.handleTutorialBannerPress=function(a,b){a&&a.banner&&sm.bannerInputStages.indexOf(sm.startTutorialIntro.stage)>=0&&(sm.startTutorialIntro.stageAction&&sm.startTutorialIntro.stageAction(!0),b>99&&(uim.setRightHint(strings.HINTS.PLACE_ORGANISM),gs.showAvailableBiomes(a.banner.data),gs.showTargetableNiches(a.banner.data)))},sm.handleTutorialWorldPress=function(a,b){sm.worldInputStages.indexOf(sm.startTutorialIntro.stage)>=0&&sm.startTutorialIntro.stageAction&&sm.startTutorialIntro.stageAction(!0)},sm.handleTutorialBannerPress02=function(a,b){a&&a.banner&&sm.bannerInputStages.indexOf(sm.continueTutorial01.stage)>=0&&(sm.continueTutorial01.stageAction&&sm.continueTutorial01.stageAction(!0),b>99&&(uim.setRightHint(strings.HINTS.PLACE_ORGANISM),gs.showAvailableBiomes(a.banner.data),gs.showTargetableNiches(a.banner.data)))},sm.handleTutorialWorldPress02=function(a,b){sm.worldInputStages.indexOf(sm.continueTutorial01.stage)>=0&&sm.continueTutorial01.stageAction&&sm.continueTutorial01.stageAction(!0)},sm.doAction12=function(a){var b=uim.getBannerButton(1);sm.startTutorialIntro.stageAction=null,b.banner.showKeywordInfo(),uim.simulateButtonPress(1),sm.startTutorialIntro.nextStage()},sm.doAction16=function(a){var b=null,c=null;b=gs.getWorldPressInfo(game.input.activePointer.x,game.input.activePointer.y),(!a||b&&b.niche==gs.getNiche(1,0))&&(sm.startTutorialIntro.stageAction=null,c=gs.populateNiche(uim.getFocusCard(),gs.getNiche(1,0)),assert(!c,"handleTutorialWorldPress: EGG population failed!"),uim.clearInfoText(),uim.clearAllCursors(),sm.startTutorialIntro.nextStage())},sm.doAction1202=function(a){var b=uim.getBannerButton(0);sm.continueTutorial01.stageAction=null,b.banner.showKeywordInfo(),uim.simulateButtonPress(0),sm.continueTutorial01.nextStage()},sm.doAction1602=function(a){var b=null,c=null;b=gs.getWorldPressInfo(game.input.activePointer.x,game.input.activePointer.y),(!a||b&&b.niche==gs.getNiche(1,0))&&(sm.continueTutorial01.stageAction=null,c=gs.populateNiche(uim.getFocusCard(),gs.getNiche(1,0)),assert(!c,"handleTutorialWorldPress: EGG population failed!"),uim.clearInfoText(),uim.clearAllCursors(),sm.continueTutorial01.nextStage())},sm.startTutorialIntro={bAcceptingInput:!1,bWantsNextStage:!1,stage:0,skipStage:[],stageAction:null,eventBiome:null,enter:function(a){listenFor("UIoperationComplete",this),listenFor("onHelpTapped",this),this.stage=0,this.inputStage=0,this.skipStage.length=0,sm.bannerInputStages.length=0,sm.worldInputStages.length=0,this.bAcceptingInput=!1,this.bWantsNextStage=!1,gs.seedTutorialDeck(0),uim.setLeftHint(null),uim.helper.snapTo(720,400),uim.helper.snapArrowsOff(!0,!1),uim.helper.setText("center",strings.TUTORIAL.WELCOME_TERRAFORMER_AND_TAPOUT),uim.helper.snapOut(["arrowOut","arrowIn"]),uim.startOperation("fadeIn",["center","ring"])},update:function(){},onBannerPressedCallback:function(a){sm.handleTutorialBannerPress(a,this.stage)},onWorldPressCallback:function(){sm.handleTutorialWorldPress(null,null)},exit:function(){},autoAdvance:function(){this.skipStage.push(this.stage)},acceptBannerInput:function(){sm.bannerInputStages.push(this.stage),uim.enableBannerInput()},acceptWorldInput:function(){sm.worldInputStages.push(this.stage)},nextStage:function(){var a=null,b=null;switch(this.bAcceptingInput=!1,this.bWantsNextStage=!1,this.stageAction&&(this.stageAction(!1),this.stageAction=null),uim.disableBannerInput(),uim.helper.unblockInput(),++this.stage,this.stage){case 1:uim.startOperation("fadeIn",["arrowOut"]),uim.startOperation("fadeOut",["textCenter"],!0),this.autoAdvance();break;case 2:uim.helper.setText("center",strings.TUTORIAL.THIS_IS_YOUR_BIOSPHERE),uim.startOperation("fadeIn",["textCenter"]),uim.startOperation("turnRingBy",{angle:360,bShortest:!1},!0);break;case 3:uim.startOperation("fadeOut",["arrowOut"]),uim.startOperation("fadeOut",["textCenter"],!0),this.autoAdvance();break;case 4:uim.helper.setText("center",strings.TUTORIAL.MISSION_OBJECTIVE),uim.startOperation("fadeIn",["textCenter"]);break;case 5:uim.startOperation("fadeOut",["center","ring","textCenter"]),this.autoAdvance();break;case 6:uim.openEggChamber("plantae",1),uim.helper.snapTo(Math.round(11.5*TILE_SIZE*gs.SPRITE_SCALE),Math.round(6.33*TILE_SIZE*gs.SPRITE_SCALE)),uim.helper.setText("right",strings.TUTORIAL.INTRODUCING_THE_EGG),uim.helper.snapRingBy(90),uim.helper.snapArrowsOn(!0,!1),uim.startOperation("fadeIn",["textRight","right","ring"]);break;case 7:uim.startOperation("fadeOut",["textRight"],!0),this.autoAdvance();break;case 8:uim.helper.setText("right",strings.TUTORIAL.EGG_PURPOSE),uim.startOperation("fadeIn",["textRight"]);break;case 9:uim.startOperation("fadeOut",["textRight","right","ring"],!0),this.autoAdvance();break;case 10:uim.syncBannersToCards(),uim.startOperation("moveBannerIn",1),uim.helper.snapTo(Math.round(5.5*TILE_SIZE*gs.SPRITE_SCALE),Math.round(11*TILE_SIZE*gs.SPRITE_SCALE)),uim.helper.setText("center",strings.TUTORIAL.INTRODUCING_THE_DATA_CARD),uim.helper.snapRingTo(-90),uim.helper.snapArrowsOn(!1,!0),uim.startOperation("fadeIn",["textCenter","ring","center"]);break;case 11:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 12:this.acceptBannerInput(),uim.helper.blockInput(),this.stageAction=sm.doAction12,uim.helper.setText("center",strings.TUTORIAL.CLICK_DATA_CARD),uim.startOperation("fadeIn",["textCenter"]),uim.startOperation("turnRingTo",{angle:90,bShortest:!0},!0);break;case 13:uim.startOperation("blendTo",{x:702,y:260}),uim.startOperation("fadeOut",["textCenter","center","arrowOut"],!0),uim.startOperation("fadeIn",["arrowIn"],!0),this.autoAdvance();break;case 14:uim.helper.setText("bottom",strings.TUTORIAL.THIS_IS_A_HABITAT),uim.startOperation("fadeIn",["textBottom","bottom"]);
break;case 15:uim.startOperation("fadeOut",["textBottom","bottom","arrowIn"]),uim.startOperation("blendTo",{x:550,y:260},!0),uim.startOperation("fadeIn",["center","arrowOut"],!0),uim.startOperation("turnRingBy",{angle:-90,bShortest:!0},!0),this.autoAdvance();break;case 16:uim.helper.setText("center",strings.TUTORIAL.POPULATE_EGG_01),uim.startOperation("fadeIn",["textCenter"]),gs.selectNiche(1,0),this.acceptWorldInput(),uim.helper.blockInput(),this.stageAction=sm.doAction16;break;case 17:uim.startOperation("hideFocusBanner"),uim.closeEggChamber(uim.getFocusControlIndex()),uim.startOperation("fadeOut",["textCenter"]),uim.startOperation("turnRingBy",{angle:-20,bShortest:!0},!0),this.autoAdvance();break;case 18:uim.helper.setText("center",strings.TUTORIAL.YOU_MADE_A_PLANT),uim.startOperation("fadeIn",["textCenter"]);break;case 19:uim.startOperation("blendTo",{x:702,y:260}),uim.startOperation("fadeOut",["textCenter","center","arrowOut"],!0),uim.startOperation("fadeIn",["arrowIn"],!0),uim.startOperation("turnRingBy",{angle:20,bShortest:!0},!0),this.autoAdvance();break;case 20:uim.helper.setText("bottom",strings.TUTORIAL.BUILDING_ECOSYSTEMS_01),uim.startOperation("fadeIn",["textBottom","bottom"]);break;case 21:case 23:case 25:uim.startOperation("fadeOut",["textBottom"]),this.autoAdvance();break;case 22:uim.helper.setText("bottom",strings.TUTORIAL.BUILDING_ECOSYSTEMS_02),uim.startOperation("fadeIn",["textBottom"]);break;case 24:uim.helper.setText("bottom",strings.TUTORIAL.BUILDING_ECOSYSTEMS_03),uim.startOperation("fadeIn",["textBottom"]);break;case 26:uim.helper.setText("bottom",strings.TUTORIAL.BUILDING_ECOSYSTEMS_04),uim.startOperation("fadeIn",["textBottom"]),gs.getNiche(1,0).showNextCardHint(),uim.startOperation("turnRingBy",{angle:50,bShortest:!0},!0);break;case 27:uim.startOperation("fadeOut",["textBottom","bottom","arrowIn"]),uim.startOperation("blendTo",{x:550,y:260},!0),uim.startOperation("fadeIn",["center","arrowOut"],!0),uim.startOperation("turnRingBy",{angle:-50,bShortest:!0},!0),this.autoAdvance();break;case 28:uim.helper.setText("center",strings.TUTORIAL.TRY_IT_NOW),uim.startOperation("fadeIn",["textCenter"]),uim.startOperation("turnRingBy",{angle:-170,bShortest:!0},!0),gs.seedTutorialDeck(1),uim.syncBannersToCards(),uim.startOperation("moveBannerIn",1),uim.clearFocusBanner(),this.acceptBannerInput(),uim.helper.blockInput(),uim.openEggChamber("aves",1),this.stageAction=sm.doAction12;break;case 29:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 30:gs.selectNiche(1,0),this.acceptWorldInput(),uim.helper.blockInput(),uim.helper.setText("center",strings.TUTORIAL.POPULATE_HERBIVORE),uim.startOperation("fadeIn",["textCenter"]),uim.startOperation("turnRingBy",{angle:170,bShortest:!0},!0),this.stageAction=sm.doAction16;break;case 31:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 32:uim.helper.setText("center",strings.TUTORIAL.POPULATION_DEFINITION_01),uim.startOperation("hideFocusBanner"),uim.startOperation("fadeIn",["textCenter"],!0),uim.closeEggChamber(1);break;case 33:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 34:uim.helper.setText("center",strings.TUTORIAL.POPULATION_DEFINITION_02),uim.startOperation("fadeIn",["textCenter"]);break;case 35:uim.startOperation("fadeOut",["textCenter"]),uim.startOperation("blendTo",{x:312,y:Math.round(11*TILE_SIZE*gs.SPRITE_SCALE)}),uim.startOperation("turnRingBy",{angle:-90,bShortest:!0},!0),gs.seedTutorialDeck(2),uim.syncBannersToCards(),uim.startOperation("moveBannerIn",1),uim.clearFocusBanner(),uim.openEggChamber("aves",1),gs.getNiche(1,0).showNextCardHint(),this.autoAdvance();break;case 36:uim.helper.setText("center",strings.TUTORIAL.POPULATE_CARNIVORE_01),uim.startOperation("fadeIn",["textCenter"]);break;case 37:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 38:uim.helper.setText("center",strings.TUTORIAL.POPULATE_CARNIVORE_02),uim.startOperation("fadeIn",["textCenter"]),this.acceptBannerInput(),uim.helper.blockInput(),this.stageAction=sm.doAction12;break;case 39:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 40:uim.helper.setText("center",strings.TUTORIAL.POPULATE_CARNIVORE_03),uim.startOperation("fadeIn",["textCenter"]),uim.startOperation("turnRingBy",{angle:180,bShortest:!0},!0);break;case 41:uim.startOperation("blendTo",{x:550,y:260}),uim.startOperation("fadeOut",["textCenter"],!0),uim.startOperation("turnRingBy",{angle:-90,bShortest:!0},!0),this.autoAdvance();break;case 42:uim.helper.setText("center",strings.TUTORIAL.POPULATE_CARNIVORE_04),uim.startOperation("fadeIn",["textCenter"]),gs.selectNiche(1,0),this.acceptWorldInput(),uim.helper.blockInput(),this.stageAction=sm.doAction16;break;case 43:uim.startOperation("hideFocusBanner"),uim.startOperation("turnRingBy",{angle:-170,bShortest:!0},!0),uim.startOperation("fadeOut",["textCenter"],!0),gs.getNiche(1,0).showNextCardHint(),uim.closeEggChamber(1),this.autoAdvance();break;case 44:uim.helper.setText("center",strings.TUTORIAL.POPULATE_OMNIVORE_01),gs.seedTutorialDeck(3),uim.syncBannersToCards(),uim.clearFocusBanner(),uim.startOperation("fadeIn",["textCenter"]),uim.startOperation("moveBannerIn",1,!0),uim.openEggChamber("amphibia",1);break;case 45:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 46:uim.helper.setText("center",strings.TUTORIAL.POPULATE_OMNIVORE_02),uim.startOperation("fadeIn",["textCenter"]),this.acceptBannerInput(),uim.helper.blockInput(),this.stageAction=sm.doAction12;break;case 47:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 48:gs.selectNiche(1,0),this.acceptWorldInput(),uim.helper.blockInput(),uim.helper.setText("center",strings.TUTORIAL.POPULATE_OMNIVORE_03),uim.startOperation("fadeIn",["textCenter"]),uim.startOperation("turnRingBy",{angle:170,bShortest:!0},!0),this.stageAction=sm.doAction16;break;case 49:uim.startOperation("hideFocusBanner"),uim.closeEggChamber(uim.getFocusControlIndex()),uim.startOperation("fadeOut",["textCenter","arrowOut"]),uim.startOperation("blendTo",{x:312,y:Math.round(11*TILE_SIZE*gs.SPRITE_SCALE)}),this.autoAdvance();break;case 50:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_01),uim.startOperation("fadeIn",["textCenter"]),events.seedTutorialEvent("disease");break;case 51:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 52:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_02),uim.startOperation("fadeIn",["textCenter"]),uim.helper.blockInput(),this.eventBiome=gs.getEventBiome(),events.setBiome(this.eventBiome),uim.showEvent(this.eventBiome,events.getCurrentEventTitle(),events.getCurrentEventInfo()),listenFor("eventExited",this);break;case 53:events.tagCardsForDestruction(),listenFor("allCardsRemoved",this),events.destroyCards();break;case 54:case 56:case 58:case 60:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 55:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_03),uim.startOperation("fadeIn",["textCenter"]);break;case 57:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_04),uim.startOperation("fadeIn",["textCenter"]);break;case 59:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_05),uim.startOperation("fadeIn",["textCenter"]);break;case 61:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_06),uim.startOperation("fadeIn",["textCenter"]);break;case 62:a=events.getNumBiomesAffected(),b=events.getNumCardsDestroyed(),uim.showInfoDialog(strings.EVENTS.BIOME_DAMAGED,strings.construct(strings.EVENTS.BIOME_DAMAGE_REPORT_PLURAL,[a,b]),"continueTutorial01");break;default:unlistenFor("onHelpTapped",this),unlistenFor("UIoperationComplete",this),unlistenFor("eventExited",this)}},allCardsRemoved:function(a){unlistenFor("allCardsRemoved",this),this.nextStage()},eventExited:function(a){unlistenFor("eventExited",this),gs.makeDisplacementDeckDrawDeck(),this.nextStage()},UIoperationComplete:function(a){var b=0;if(this.bWantsNextStage)this.nextStage();else for(this.bAcceptingInput=!0,b=0;b<this.skipStage.length;++b)if(this.stage===this.skipStage[b]){this.onHelpTapped(null);break}},onHelpTapped:function(a){this.bAcceptingInput?this.nextStage():this.bWantsNextStage=!0}},sm.tutorialEndEvent={enter:function(a){},update:function(){gs.unblockAllBiomes(),uim.showInfoDialog(strings.EVENTS.RESOLVED,strings.EVENTS.RESOLUTION_MESSAGE,"tutorialEnd")},exit:function(){}},sm.tutorialEnd={bAcceptingInput:!1,bWantsNextStage:!1,stage:0,skipStage:[],stageAction:null,enter:function(a){listenFor("UIoperationComplete",this),listenFor("onHelpTapped",this),this.stage=-1,this.inputStage=0,this.skipStage.length=0,sm.bannerInputStages.length=0,sm.worldInputStages.length=0,this.bAcceptingInput=!1,this.bWantsNextStage=!1,this.UIoperationComplete=sm.startTutorialIntro.UIoperationComplete.bind(this),this.onHelpTapped=sm.startTutorialIntro.onHelpTapped.bind(this),this.autoAdvance=sm.startTutorialIntro.autoAdvance.bind(this),this.nextStage()},update:function(){},exit:function(){},nextStage:function(){switch(this.bAcceptingInput=!1,this.bWantsNextStage=!1,this.stageAction&&(this.stageAction(!1),this.stageAction=null),uim.disableBannerInput(),uim.helper.unblockInput(),++this.stage,this.stage){case 0:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 1:uim.helper.setText("center",strings.TUTORIAL.END_01),uim.startOperation("fadeIn",["textCenter"]);break;case 2:uim.startOperation("fadeOut",["textCenter","center","ring"]),this.autoAdvance();break;case 3:uim.helper.resetNode(),setState(sm.startGame)}}},sm.continueTutorial01={bAcceptingInput:!1,bWantsNextStage:!1,stage:0,skipStage:[],stageAction:null,enter:function(a){var b=null;listenFor("UIoperationComplete",this),listenFor("onHelpTapped",this),this.stage=-1,this.inputStage=0,this.skipStage.length=0,sm.bannerInputStages.length=0,sm.worldInputStages.length=0,this.bAcceptingInput=!1,this.bWantsNextStage=!1,this.UIoperationComplete=sm.startTutorialIntro.UIoperationComplete.bind(this),this.onHelpTapped=sm.startTutorialIntro.onHelpTapped.bind(this),this.autoAdvance=sm.startTutorialIntro.autoAdvance.bind(this),this.acceptBannerInput=sm.startTutorialIntro.acceptBannerInput.bind(this),this.acceptWorldInput=sm.startTutorialIntro.acceptWorldInput.bind(this),this.doAction12=sm.doAction12.bind(this),this.doAction16=sm.doAction16.bind(this),b=events.getNextAffectedBiome(),gs.clearDisplacementDeck(),listenFor("allCardsDisplaced",this),gs.isolateBiome(b),events.tagCardsForDisplacement(b),events.displaceCards(b)},update:function(){},exit:function(){},onBannerPressedCallback:function(a){sm.handleTutorialBannerPress02(a,this.stage)},onWorldPressCallback:function(){sm.handleTutorialWorldPress02(null,null)},allCardsDisplaced:function(a){unlistenFor("allCardsDisplaced",this),this.nextStage()},nextStage:function(){switch(this.bAcceptingInput=!1,this.bWantsNextStage=!1,this.stageAction&&(this.stageAction(!1),this.stageAction=null),uim.disableBannerInput(),uim.helper.unblockInput(),++this.stage,this.stage){case 0:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 1:uim.syncBannersToCards(),uim.disableBannerInput(),uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_07),uim.startOperation("fadeIn",["textCenter"]),uim.startOperation("moveBannerIn",0,!0);break;case 2:uim.startOperation("fadeOut",["textCenter"]),this.autoAdvance();break;case 3:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_08),uim.startOperation("fadeIn",["textCenter"]);break;case 4:uim.startOperation("blendTo",{x:312,y:300}),uim.startOperation("fadeOut",["textCenter"],!0),uim.startOperation("fadeIn",["arrowOut"],!0),uim.startOperation("turnRingBy",{angle:-90,bShortest:!0},!0),this.autoAdvance();break;case 5:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_09),uim.startOperation("fadeIn",["textCenter"]),gs.showNextCardHints(),this.acceptBannerInput(),uim.helper.blockInput(),this.stageAction=sm.doAction1202;break;case 6:uim.startOperation("fadeOut",["textCenter"]),uim.startOperation("turnRingBy",{angle:90,bShortest:!0},!0),this.autoAdvance();break;case 7:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_10),uim.startOperation("fadeIn",["textCenter"]),gs.selectNiche(1,0),this.acceptWorldInput(),uim.helper.blockInput(),this.stageAction=sm.doAction1602;break;case 8:uim.startOperation("fadeOut",["textCenter","arrowOut"]),uim.startOperation("hideFocusBanner",!0),this.autoAdvance();break;case 9:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_11),uim.startOperation("fadeIn",["textCenter"]),uim.clearFocusBanner();break;case 10:uim.startOperation("fadeOut",["textCenter","arrowOut"]),this.autoAdvance();break;case 11:uim.helper.setText("center",strings.TUTORIAL.PROCESS_EVENT_12),uim.startOperation("fadeIn",["textCenter"]),gs.unblockAllBiomes(),gs.hideCardHints();break;case 12:gs.restoreOriginalDrawDeck(),uim.showInfoDialog(strings.EVENTS.WELL_DONE,strings.EVENTS.PLACED_ALL_ORGANISMS,"tutorialEndEvent")}}};var TILE_SIZE=24,MAX_WINDOW_X=1024,MAX_WINDOW_Y=768,N_BIOMES=5,LAYER_OFFSET=3,SHADOW_OFFSET=4,TILE_OFFSET_X=TILE_SIZE/6,TILE_OFFSET_Y=TILE_SIZE/6,tilesX=Math.floor(MAX_WINDOW_X/TILE_SIZE),tilesY=Math.floor(MAX_WINDOW_Y/TILE_SIZE),windowDx=tilesX*TILE_SIZE,windowDy=tilesY*TILE_SIZE,infoText=null,row=-1,col=-1,currentState=null,nextState=null,stateData=null,suspendedStates=[],suspendData={state:null,data:null},bWantsStateChange=!1,bWantsStatePush=!1,bWantsStatePop=!1,switchboard={},game=new Phaser.Game(MAX_WINDOW_X,MAX_WINDOW_Y,Phaser.AUTO,"",{preload:preload,create:create,update:update,render:render});